!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.6	//
A	rng.cc	143;"	d	file:
A1p0	rng.cc	/^	const double A1p0[3][3] = { $/;"	v
A1p127	rng.cc	/^	const double A1p127[3][3] = { $/;"	v
A1p76	rng.cc	/^	const double A1p76[3][3] = { $/;"	v
A2p0	rng.cc	/^	const double A2p0[3][3] = { $/;"	v
A2p127	rng.cc	/^	const double A2p127[3][3] = { $/;"	v
A2p76	rng.cc	/^	const double A2p76[3][3] = { $/;"	v
ADDR1	packetProtection.cpp	518;"	d	file:
ADDR2	packetProtection.cpp	519;"	d	file:
ADDR3	packetProtection.cpp	520;"	d	file:
ADDR4	packetProtection.cpp	521;"	d	file:
ADDR5	packetProtection.cpp	522;"	d	file:
ALLHEADERS	Makefile	/^ALLHEADERS:=$(shell ls *.h | sort)$/;"	m
ALLOBJS	Makefile	/^ALLOBJS:=$(patsubst %.cpp,%.o,$(patsubst %.c,%.o,$(ALLSRCS)))$/;"	m
ALLSRCS	Makefile	/^ALLSRCS:=$(shell ls *{.c,.cpp} | sort)$/;"	m
ALLUTOBJS	Makefile	/^ALLUTOBJS:=$(ALLUTSRCS:.c=.uto)$/;"	m
ALLUTSRCS	Makefile	/^ALLUTSRCS:=$(shell (ls ut_*{.c,.cc} 2>\/dev\/null) | sort)$/;"	m
AMROUTEOBJ	Makefile	/^AMROUTEOBJ=amroute.o amroutesend.o neighborlist.o$/;"	m
AMRouteGetHierarchyGraph	neighborlist.cpp	/^int *AMRouteGetHierarchyGraph(manet *m)$/;"	f
AMRoutePrintHierarchyGraph	neighborlist.cpp	/^void AMRoutePrintHierarchyGraph(manet *m)$/;"	f
AMRouteSetClusterHead	amroute.cpp	/^STATIC void AMRouteSetClusterHead(manetNode *us, int status)$/;"	f
APICOMMAND_INIT	apisupport.h	/^	APICOMMAND_INIT,			\/* demon is sending a horde of init data *\/$/;"	e	enum:__anon29
APICOMMAND_LINKDOWN	apisupport.h	/^	APICOMMAND_LINKDOWN,			\/* logging event, for when the API loses connection to demon *\/$/;"	e	enum:__anon29
APICOMMAND_LINKUP	apisupport.h	/^	APICOMMAND_LINKUP,			\/* logging event, for when the API restores connection to demon *\/$/;"	e	enum:__anon29
APICOMMAND_MESSAGETYPE_REMOVE	apisupport.h	/^	APICOMMAND_MESSAGETYPE_REMOVE,		\/* tell the demon to not send this client a message type *\/$/;"	e	enum:__anon29
APICOMMAND_MESSAGETYPE_REQUEST	apisupport.h	/^	APICOMMAND_MESSAGETYPE_REQUEST,		\/* tell the demon to send this client a message type *\/$/;"	e	enum:__anon29
APICOMMAND_MESSAGE_ACK	apisupport.h	/^	APICOMMAND_MESSAGE_ACK,			\/* demon is sending a message ACK   *\/$/;"	e	enum:__anon29
APICOMMAND_MESSAGE_NAK	apisupport.h	/^	APICOMMAND_MESSAGE_NAK,			\/* demon is sending a message NAK   *\/$/;"	e	enum:__anon29
APICOMMAND_MESSAGE_NEXT	apisupport.h	/^	APICOMMAND_MESSAGE_NEXT,		\/* client is returning a message it was inspecting to the demon (possibly rewritten)  *\/$/;"	e	enum:__anon29
APICOMMAND_MESSAGE_REC	apisupport.h	/^	APICOMMAND_MESSAGE_REC,			\/* demon is sending an incoming message *\/$/;"	e	enum:__anon29
APICOMMAND_MESSAGE_SEND	apisupport.h	/^	APICOMMAND_MESSAGE_SEND,		\/* request the demon to send the following message  *\/$/;"	e	enum:__anon29
APICOMMAND_NAMEGET	apisupport.h	/^	APICOMMAND_NAMEGET			\/* client wishes to get list of current clients.  or demon is sending list of current clients *\/$/;"	e	enum:__anon29
APICOMMAND_NAMESET	apisupport.h	/^	APICOMMAND_NAMESET,			\/* client wishes to set its name and key  *\/$/;"	e	enum:__anon29
APICOMMAND_NEIGHBOR	apisupport.h	/^	APICOMMAND_NEIGHBOR,			\/* the demon is sending a neighbor update *\/$/;"	e	enum:__anon29
APICOMMAND_POSITION	apisupport.h	/^	APICOMMAND_POSITION,			\/* c->d means tell the demon this client is or is not eligible for a postion *\/$/;"	e	enum:__anon29
APICOMMAND_POSITIONWEIGHT	apisupport.h	/^	APICOMMAND_POSITIONWEIGHT,		\/* client is sending a node weight update.  *\/$/;"	e	enum:__anon29
APICOMMAND_RAWSEND	apisupport.h	/^	APICOMMAND_RAWSEND,			\/* client wishes to send a raw message to the local simulatorland *\/$/;"	e	enum:__anon29
APICOMMAND_STATUS	apisupport.h	/^	APICOMMAND_STATUS,			\/* request the demon to send a node state report to the client (debugging command) *\/$/;"	e	enum:__anon29
APICOMMAND_TIME_GET	apisupport.h	/^	APICOMMAND_TIME_GET,			\/* request the demon to send the current time *\/$/;"	e	enum:__anon29
APISUPPORT	apisupport.h	2;"	d
API_DEFAULTPORT	apisupport.h	29;"	d
API_VERSION	apisupport.h	30;"	d
ARG	tsm_v4_TOJ.pl	/^ARG: foreach (@ARGV) {$/;"	l
ARROW_SCALE_ZOOM_FACTOR	watcher.cpp	979;"	d	file:
ApiCommand	apisupport.h	/^typedef struct ApiCommand$/;"	s
ApiCommand	apisupport.h	/^} ApiCommand;$/;"	t	typeref:struct:ApiCommand
ApiCommandType	apisupport.h	/^} ApiCommandType;$/;"	t	typeref:enum:__anon29
ApiInit	apisupport.h	/^typedef struct ApiInit$/;"	s
ApiInit	apisupport.h	/^} ApiInit;$/;"	t	typeref:struct:ApiInit
ApiName	idsCommunications-sanitized.h	/^typedef struct ApiName$/;"	s
ApiName	idsCommunications-sanitized.h	/^} ApiName;$/;"	t	typeref:struct:ApiName
ApiName	idsCommunications.h	/^typedef struct ApiName$/;"	s
ApiName	idsCommunications.h	/^} ApiName;$/;"	t	typeref:struct:ApiName
ApiPacketCount	idsCommunications-sanitized.h	/^typedef struct ApiPacketCount$/;"	s
ApiPacketCount	idsCommunications-sanitized.h	/^} ApiPacketCount;$/;"	t	typeref:struct:ApiPacketCount
ApiPacketCount	idsCommunications.h	/^typedef struct ApiPacketCount$/;"	s
ApiPacketCount	idsCommunications.h	/^} ApiPacketCount;$/;"	t	typeref:struct:ApiPacketCount
ApiSession	packetapi.cpp	/^typedef struct ApiSession$/;"	s	file:
ApiSession	packetapi.cpp	/^} ApiSession;$/;"	t	typeref:struct:ApiSession	file:
ApiStatus	idsCommunications-sanitized.h	/^typedef struct ApiStatus$/;"	s
ApiStatus	idsCommunications-sanitized.h	/^} ApiStatus;$/;"	t	typeref:struct:ApiStatus
ApiStatus	idsCommunications.h	/^typedef struct ApiStatus$/;"	s
ApiStatus	idsCommunications.h	/^} ApiStatus;$/;"	t	typeref:struct:ApiStatus
Args	main.cpp	/^static GLenum Args(int argc, char **argv)$/;"	f	file:
Args	test.c	/^static GLenum Args(int argc, char **argv)$/;"	f	file:
Args	watcher.cpp	/^static GLenum Args(int argc, char **argv)$/;"	f	file:
BANNERJEE_H	bft.h	2;"	d
BASEOBJ	Makefile	/^BASEOBJ=des.o metric.o rng.o node.o config.o idmefPrint.o hashtable.o $/;"	m
BIT_CHUNK_SIZE	gmclusterTest.cpp	8;"	d	file:
BIT_CHUNK_TYPE	gmclusterTest.cpp	7;"	d	file:
BROADCAST	idsCommunications-sanitized.h	182;"	d
BROADCAST	idsCommunications.h	184;"	d
BROADCAST_BIT	livenetwork.cpp	425;"	d	file:
BUFFERPAIR_H_FILE	bufferPair.h	7;"	d
Bg_	rng.h	/^	double Cg_[6], Bg_[6], Ig_[6]; $/;"	m	class:RNG
BufferPair	bufferPair.c	/^struct BufferPair$/;"	s	file:
CC	Makefile	/^CC=cc$/;"	m
CHAIN	tsm_v4_TOJ.pl	/^use constant CHAIN => "tsmdeny";$/;"	c
CHILDRENOF	idsCommunications-sanitized.h	183;"	d
CHILDRENOF	idsCommunications.h	185;"	d
COMMUNICATIONSDESTINATION_BROADCAST	idsCommunications-sanitized.h	/^    COMMUNICATIONSDESTINATION_BROADCAST,$/;"	e	enum:__anon33
COMMUNICATIONSDESTINATION_BROADCAST	idsCommunications.h	/^    COMMUNICATIONSDESTINATION_BROADCAST,$/;"	e	enum:__anon11
COMMUNICATIONSDESTINATION_CHILDRENOF	idsCommunications-sanitized.h	/^    COMMUNICATIONSDESTINATION_CHILDRENOF,$/;"	e	enum:__anon33
COMMUNICATIONSDESTINATION_CHILDRENOF	idsCommunications.h	/^    COMMUNICATIONSDESTINATION_CHILDRENOF,$/;"	e	enum:__anon11
COMMUNICATIONSDESTINATION_DIRECT	idsCommunications-sanitized.h	/^    COMMUNICATIONSDESTINATION_DIRECT=0,$/;"	e	enum:__anon33
COMMUNICATIONSDESTINATION_DIRECT	idsCommunications.h	/^    COMMUNICATIONSDESTINATION_DIRECT=0,$/;"	e	enum:__anon11
COMMUNICATIONSDESTINATION_DIRECTBACKUP	idsCommunications-sanitized.h	/^    COMMUNICATIONSDESTINATION_DIRECTBACKUP,$/;"	e	enum:__anon33
COMMUNICATIONSDESTINATION_DIRECTBACKUP	idsCommunications.h	/^    COMMUNICATIONSDESTINATION_DIRECTBACKUP,$/;"	e	enum:__anon11
COMMUNICATIONSDESTINATION_IS_VALID	idsCommunications-sanitized.h	166;"	d
COMMUNICATIONSDESTINATION_IS_VALID	idsCommunications.h	168;"	d
COMMUNICATIONSDESTINATION_MULTICAST	idsCommunications-sanitized.h	/^    COMMUNICATIONSDESTINATION_MULTICAST,$/;"	e	enum:__anon33
COMMUNICATIONSDESTINATION_MULTICAST	idsCommunications.h	/^    COMMUNICATIONSDESTINATION_MULTICAST,$/;"	e	enum:__anon11
COMMUNICATIONSDESTINATION_NEARESTCOORD	idsCommunications-sanitized.h	/^    COMMUNICATIONSDESTINATION_NEARESTCOORD,$/;"	e	enum:__anon33
COMMUNICATIONSDESTINATION_NEARESTCOORD	idsCommunications.h	/^    COMMUNICATIONSDESTINATION_NEARESTCOORD,$/;"	e	enum:__anon11
COMMUNICATIONSDESTINATION_NEIGHBORSOF	idsCommunications-sanitized.h	/^    COMMUNICATIONSDESTINATION_NEIGHBORSOF,$/;"	e	enum:__anon33
COMMUNICATIONSDESTINATION_NEIGHBORSOF	idsCommunications.h	/^    COMMUNICATIONSDESTINATION_NEIGHBORSOF,$/;"	e	enum:__anon11
COMMUNICATIONSDESTINATION_PARENTSOF	idsCommunications-sanitized.h	/^    COMMUNICATIONSDESTINATION_PARENTSOF,$/;"	e	enum:__anon33
COMMUNICATIONSDESTINATION_PARENTSOF	idsCommunications.h	/^    COMMUNICATIONSDESTINATION_PARENTSOF,$/;"	e	enum:__anon11
COMMUNICATIONSDESTINATION_RECURSIVECHILDRENOF	idsCommunications-sanitized.h	/^    COMMUNICATIONSDESTINATION_RECURSIVECHILDRENOF,$/;"	e	enum:__anon33
COMMUNICATIONSDESTINATION_RECURSIVECHILDRENOF	idsCommunications.h	/^    COMMUNICATIONSDESTINATION_RECURSIVECHILDRENOF,$/;"	e	enum:__anon11
COMMUNICATIONSDESTINATION_RECURSIVEPARENTSOF	idsCommunications-sanitized.h	/^    COMMUNICATIONSDESTINATION_RECURSIVEPARENTSOF,$/;"	e	enum:__anon33
COMMUNICATIONSDESTINATION_RECURSIVEPARENTSOF	idsCommunications.h	/^    COMMUNICATIONSDESTINATION_RECURSIVEPARENTSOF,$/;"	e	enum:__anon11
COMMUNICATIONSLOGHEADERSIZE	apisupport.c	274;"	d	file:
COMMUNICATIONSNEIGHBOR_ARRIVING	idsCommunications-sanitized.h	/^    COMMUNICATIONSNEIGHBOR_ARRIVING,$/;"	e	enum:__anon39
COMMUNICATIONSNEIGHBOR_ARRIVING	idsCommunications.h	/^    COMMUNICATIONSNEIGHBOR_ARRIVING,$/;"	e	enum:__anon17
COMMUNICATIONSNEIGHBOR_CHILD	idsCommunications-sanitized.h	759;"	d
COMMUNICATIONSNEIGHBOR_CHILD	idsCommunications.h	767;"	d
COMMUNICATIONSNEIGHBOR_DEPARTING	idsCommunications-sanitized.h	/^    COMMUNICATIONSNEIGHBOR_DEPARTING,$/;"	e	enum:__anon39
COMMUNICATIONSNEIGHBOR_DEPARTING	idsCommunications.h	/^    COMMUNICATIONSNEIGHBOR_DEPARTING,$/;"	e	enum:__anon17
COMMUNICATIONSNEIGHBOR_PARENT	idsCommunications-sanitized.h	758;"	d
COMMUNICATIONSNEIGHBOR_PARENT	idsCommunications.h	766;"	d
COMMUNICATIONSNEIGHBOR_ROOT	idsCommunications-sanitized.h	760;"	d
COMMUNICATIONSNEIGHBOR_ROOT	idsCommunications.h	768;"	d
COMMUNICATIONSNEIGHBOR_UNKNOWN	idsCommunications-sanitized.h	757;"	d
COMMUNICATIONSNEIGHBOR_UNKNOWN	idsCommunications.h	765;"	d
COMMUNICATIONSNEIGHBOR_UPDATING	idsCommunications-sanitized.h	/^    COMMUNICATIONSNEIGHBOR_UPDATING,$/;"	e	enum:__anon39
COMMUNICATIONSNEIGHBOR_UPDATING	idsCommunications.h	/^    COMMUNICATIONSNEIGHBOR_UPDATING,$/;"	e	enum:__anon17
COMMUNICATIONSNEIGHBOR_WASONEHOP	idsCommunications-sanitized.h	761;"	d
COMMUNICATIONSNEIGHBOR_WASONEHOP	idsCommunications.h	769;"	d
COMMUNICATIONSPOSITIONWEIGHT_ASSIGNED	idsCommunications-sanitized.h	875;"	d
COMMUNICATIONSPOSITIONWEIGHT_ASSIGNED	idsCommunications.h	883;"	d
COMMUNICATIONSPOSITIONWEIGHT_BANNED	idsCommunications-sanitized.h	873;"	d
COMMUNICATIONSPOSITIONWEIGHT_BANNED	idsCommunications.h	881;"	d
COMMUNICATIONSPOSITIONWEIGHT_DEFAULT	idsCommunications-sanitized.h	874;"	d
COMMUNICATIONSPOSITIONWEIGHT_DEFAULT	idsCommunications.h	882;"	d
COMMUNICATIONS_CONFIG_DIR	config.h	16;"	d
COMMUNICATIONS_CONFIG_DIR	idsCommunications-sanitized.h	25;"	d
COMMUNICATIONS_CONFIG_DIR	idsCommunications.h	25;"	d
COMMUNICATIONS_EDGE_REMOVE_ALL	idsCommunications-sanitized.h	1175;"	d
COMMUNICATIONS_EDGE_REMOVE_ALL	idsCommunications.h	1189;"	d
COMMUNICATIONS_EDGE_REMOVE_FAMILY	idsCommunications-sanitized.h	1172;"	d
COMMUNICATIONS_EDGE_REMOVE_FAMILY	idsCommunications.h	1186;"	d
COMMUNICATIONS_EDGE_REMOVE_HEAD	idsCommunications-sanitized.h	1170;"	d
COMMUNICATIONS_EDGE_REMOVE_HEAD	idsCommunications.h	1184;"	d
COMMUNICATIONS_EDGE_REMOVE_PRIORITY	idsCommunications-sanitized.h	1173;"	d
COMMUNICATIONS_EDGE_REMOVE_PRIORITY	idsCommunications.h	1187;"	d
COMMUNICATIONS_EDGE_REMOVE_TAG	idsCommunications-sanitized.h	1174;"	d
COMMUNICATIONS_EDGE_REMOVE_TAG	idsCommunications.h	1188;"	d
COMMUNICATIONS_EDGE_REMOVE_TAIL	idsCommunications-sanitized.h	1171;"	d
COMMUNICATIONS_EDGE_REMOVE_TAIL	idsCommunications.h	1185;"	d
COMMUNICATIONS_LABEL_FAMILY_ALERT	idsCommunications-sanitized.h	1043;"	d
COMMUNICATIONS_LABEL_FAMILY_ALERT	idsCommunications.h	1051;"	d
COMMUNICATIONS_LABEL_FAMILY_ALL	idsCommunications-sanitized.h	1026;"	d
COMMUNICATIONS_LABEL_FAMILY_ALL	idsCommunications.h	1034;"	d
COMMUNICATIONS_LABEL_FAMILY_ANOMPATHS	idsCommunications-sanitized.h	1039;"	d
COMMUNICATIONS_LABEL_FAMILY_ANOMPATHS	idsCommunications.h	1047;"	d
COMMUNICATIONS_LABEL_FAMILY_ANTENNARADIUS	idsCommunications-sanitized.h	1035;"	d
COMMUNICATIONS_LABEL_FAMILY_ANTENNARADIUS	idsCommunications.h	1043;"	d
COMMUNICATIONS_LABEL_FAMILY_BANDWIDTH	idsCommunications-sanitized.h	1031;"	d
COMMUNICATIONS_LABEL_FAMILY_BANDWIDTH	idsCommunications.h	1039;"	d
COMMUNICATIONS_LABEL_FAMILY_CORRELATION	idsCommunications-sanitized.h	1041;"	d
COMMUNICATIONS_LABEL_FAMILY_CORRELATION	idsCommunications.h	1049;"	d
COMMUNICATIONS_LABEL_FAMILY_CORRELATION_3HOP	idsCommunications-sanitized.h	1045;"	d
COMMUNICATIONS_LABEL_FAMILY_CORRELATION_3HOP	idsCommunications.h	1053;"	d
COMMUNICATIONS_LABEL_FAMILY_FLOATINGGRAPH	idsCommunications-sanitized.h	1051;"	d
COMMUNICATIONS_LABEL_FAMILY_FLOATINGGRAPH	idsCommunications.h	1059;"	d
COMMUNICATIONS_LABEL_FAMILY_HIERARCHY	idsCommunications-sanitized.h	1030;"	d
COMMUNICATIONS_LABEL_FAMILY_HIERARCHY	idsCommunications.h	1038;"	d
COMMUNICATIONS_LABEL_FAMILY_NORMPATHS	idsCommunications-sanitized.h	1053;"	d
COMMUNICATIONS_LABEL_FAMILY_NORMPATHS	idsCommunications.h	1061;"	d
COMMUNICATIONS_LABEL_FAMILY_PHYSICAL	idsCommunications-sanitized.h	1029;"	d
COMMUNICATIONS_LABEL_FAMILY_PHYSICAL	idsCommunications.h	1037;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_10	idsCommunications-sanitized.h	1042;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_10	idsCommunications.h	1050;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_11	idsCommunications-sanitized.h	1044;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_11	idsCommunications.h	1052;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_12	idsCommunications-sanitized.h	1046;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_12	idsCommunications.h	1054;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_13	idsCommunications-sanitized.h	1048;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_13	idsCommunications.h	1056;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_14	idsCommunications-sanitized.h	1050;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_14	idsCommunications.h	1058;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_15	idsCommunications-sanitized.h	1052;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_15	idsCommunications.h	1060;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_16	idsCommunications-sanitized.h	1055;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_16	idsCommunications.h	1063;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_17	idsCommunications-sanitized.h	1056;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_17	idsCommunications.h	1064;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_18	idsCommunications-sanitized.h	1057;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_18	idsCommunications.h	1065;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_19	idsCommunications-sanitized.h	1058;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_19	idsCommunications.h	1066;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_20	idsCommunications-sanitized.h	1059;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_20	idsCommunications.h	1067;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_21	idsCommunications-sanitized.h	1060;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_21	idsCommunications.h	1068;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_22	idsCommunications-sanitized.h	1061;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_22	idsCommunications.h	1069;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_23	idsCommunications-sanitized.h	1062;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_23	idsCommunications.h	1070;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_24	idsCommunications-sanitized.h	1063;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_24	idsCommunications.h	1071;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_25	idsCommunications-sanitized.h	1064;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_25	idsCommunications.h	1072;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_26	idsCommunications-sanitized.h	1065;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_26	idsCommunications.h	1073;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_27	idsCommunications-sanitized.h	1066;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_27	idsCommunications.h	1074;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_28	idsCommunications-sanitized.h	1067;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_28	idsCommunications.h	1075;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_29	idsCommunications-sanitized.h	1068;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_29	idsCommunications.h	1076;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_30	idsCommunications-sanitized.h	1069;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_30	idsCommunications.h	1077;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_31	idsCommunications-sanitized.h	1070;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_31	idsCommunications.h	1078;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_6	idsCommunications-sanitized.h	1034;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_6	idsCommunications.h	1042;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_7	idsCommunications-sanitized.h	1036;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_7	idsCommunications.h	1044;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_8	idsCommunications-sanitized.h	1038;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_8	idsCommunications.h	1046;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_9	idsCommunications-sanitized.h	1040;"	d
COMMUNICATIONS_LABEL_FAMILY_RESERVED_9	idsCommunications.h	1048;"	d
COMMUNICATIONS_LABEL_FAMILY_ROUTING	idsCommunications-sanitized.h	1032;"	d
COMMUNICATIONS_LABEL_FAMILY_ROUTING	idsCommunications.h	1040;"	d
COMMUNICATIONS_LABEL_FAMILY_ROUTING2	idsCommunications-sanitized.h	1047;"	d
COMMUNICATIONS_LABEL_FAMILY_ROUTING2	idsCommunications.h	1055;"	d
COMMUNICATIONS_LABEL_FAMILY_ROUTING2_ONEHOP	idsCommunications-sanitized.h	1049;"	d
COMMUNICATIONS_LABEL_FAMILY_ROUTING2_ONEHOP	idsCommunications.h	1057;"	d
COMMUNICATIONS_LABEL_FAMILY_ROUTING_ONEHOP	idsCommunications-sanitized.h	1033;"	d
COMMUNICATIONS_LABEL_FAMILY_ROUTING_ONEHOP	idsCommunications.h	1041;"	d
COMMUNICATIONS_LABEL_FAMILY_SANITYCHECK	idsCommunications-sanitized.h	1037;"	d
COMMUNICATIONS_LABEL_FAMILY_SANITYCHECK	idsCommunications.h	1045;"	d
COMMUNICATIONS_LABEL_FAMILY_UNDEFINED	idsCommunications-sanitized.h	1028;"	d
COMMUNICATIONS_LABEL_FAMILY_UNDEFINED	idsCommunications.h	1036;"	d
COMMUNICATIONS_LABEL_PRIORITY_CRITICAL	idsCommunications-sanitized.h	1022;"	d
COMMUNICATIONS_LABEL_PRIORITY_CRITICAL	idsCommunications.h	1030;"	d
COMMUNICATIONS_LABEL_PRIORITY_INFO	idsCommunications-sanitized.h	1024;"	d
COMMUNICATIONS_LABEL_PRIORITY_INFO	idsCommunications.h	1032;"	d
COMMUNICATIONS_LABEL_PRIORITY_WARN	idsCommunications-sanitized.h	1023;"	d
COMMUNICATIONS_LABEL_PRIORITY_WARN	idsCommunications.h	1031;"	d
COMMUNICATIONS_LABEL_REMOVE_FAMILY	idsCommunications-sanitized.h	1141;"	d
COMMUNICATIONS_LABEL_REMOVE_FAMILY	idsCommunications.h	1155;"	d
COMMUNICATIONS_LABEL_REMOVE_NODE	idsCommunications-sanitized.h	1144;"	d
COMMUNICATIONS_LABEL_REMOVE_NODE	idsCommunications.h	1158;"	d
COMMUNICATIONS_LABEL_REMOVE_PRIORITY	idsCommunications-sanitized.h	1142;"	d
COMMUNICATIONS_LABEL_REMOVE_PRIORITY	idsCommunications.h	1156;"	d
COMMUNICATIONS_LABEL_REMOVE_TAG	idsCommunications-sanitized.h	1143;"	d
COMMUNICATIONS_LABEL_REMOVE_TAG	idsCommunications.h	1157;"	d
COMMUNICATIONS_MESSAGE_AFTERALL	idsCommunications-sanitized.h	351;"	d
COMMUNICATIONS_MESSAGE_AFTERALL	idsCommunications.h	353;"	d
COMMUNICATIONS_MESSAGE_BEFOREALL	idsCommunications-sanitized.h	350;"	d
COMMUNICATIONS_MESSAGE_BEFOREALL	idsCommunications.h	352;"	d
COMMUNICATIONS_MESSAGE_INBOUND	idsCommunications-sanitized.h	/^    COMMUNICATIONS_MESSAGE_INBOUND=0,$/;"	e	enum:__anon34
COMMUNICATIONS_MESSAGE_INBOUND	idsCommunications.h	/^    COMMUNICATIONS_MESSAGE_INBOUND=0,$/;"	e	enum:__anon12
COMMUNICATIONS_MESSAGE_OUTBOUND	idsCommunications-sanitized.h	/^    COMMUNICATIONS_MESSAGE_OUTBOUND,$/;"	e	enum:__anon34
COMMUNICATIONS_MESSAGE_OUTBOUND	idsCommunications.h	/^    COMMUNICATIONS_MESSAGE_OUTBOUND,$/;"	e	enum:__anon12
COMMUNICATIONS_MESSAGE_READONLY	idsCommunications-sanitized.h	/^    COMMUNICATIONS_MESSAGE_READONLY=0,$/;"	e	enum:__anon35
COMMUNICATIONS_MESSAGE_READONLY	idsCommunications.h	/^    COMMUNICATIONS_MESSAGE_READONLY=0,$/;"	e	enum:__anon13
COMMUNICATIONS_MESSAGE_READWRITE	idsCommunications-sanitized.h	/^    COMMUNICATIONS_MESSAGE_READWRITE,$/;"	e	enum:__anon35
COMMUNICATIONS_MESSAGE_READWRITE	idsCommunications.h	/^    COMMUNICATIONS_MESSAGE_READWRITE,$/;"	e	enum:__anon13
CONFIG_H	config.h	2;"	d
CONTINUE_CONSTRAINT	mobility.cpp	47;"	d	file:
COORDINATOR_MAXVAL	idsCommunications-sanitized.h	610;"	d
COORDINATOR_MAXVAL	idsCommunications.h	618;"	d
COORDINATOR_NEIGHBORHOOD	idsCommunications-sanitized.h	/^    COORDINATOR_NEIGHBORHOOD=0,$/;"	e	enum:IDSPositionType
COORDINATOR_NEIGHBORHOOD	idsCommunications.h	/^    COORDINATOR_NEIGHBORHOOD=0,$/;"	e	enum:IDSPositionType
COORDINATOR_REGIONAL	idsCommunications-sanitized.h	/^    COORDINATOR_REGIONAL,$/;"	e	enum:IDSPositionType
COORDINATOR_REGIONAL	idsCommunications.h	/^    COORDINATOR_REGIONAL,$/;"	e	enum:IDSPositionType
COORDINATOR_ROOT	idsCommunications-sanitized.h	/^    COORDINATOR_ROOT,$/;"	e	enum:IDSPositionType
COORDINATOR_ROOT	idsCommunications.h	/^    COORDINATOR_ROOT,$/;"	e	enum:IDSPositionType
COORDINATOR_ROOTGROUP	idsCommunications.h	/^    COORDINATOR_ROOTGROUP,$/;"	e	enum:IDSPositionType
CRYPT_BIT	livenetwork.cpp	426;"	d	file:
Cg_	rng.h	/^	double Cg_[6], Bg_[6], Ig_[6]; $/;"	m	class:RNG
CheckSeed	rng.cc	/^	int CheckSeed (const unsigned long seed[6]) $/;"	f	namespace:__anon32
CommunicationsDestination	idsCommunications-sanitized.h	/^typedef struct CommunicationsDestination$/;"	s
CommunicationsDestination	idsCommunications-sanitized.h	/^} CommunicationsDestination;$/;"	t	typeref:struct:CommunicationsDestination
CommunicationsDestination	idsCommunications.h	/^typedef struct CommunicationsDestination$/;"	s
CommunicationsDestination	idsCommunications.h	/^} CommunicationsDestination;$/;"	t	typeref:struct:CommunicationsDestination
CommunicationsDestinationType	idsCommunications-sanitized.h	/^} CommunicationsDestinationType;$/;"	t	typeref:enum:__anon33
CommunicationsDestinationType	idsCommunications.h	/^} CommunicationsDestinationType;$/;"	t	typeref:enum:__anon11
CommunicationsErrorFunction	apisupport.h	/^typedef void (*CommunicationsErrorFunction)(char const *fmt, ...) __attribute__ ((format(printf, 1, 2)));$/;"	t
CommunicationsGraphEdge	idsCommunications-sanitized.h	/^typedef struct CommunicationsGraphEdge$/;"	s
CommunicationsGraphEdge	idsCommunications-sanitized.h	/^} CommunicationsGraphEdge;$/;"	t	typeref:struct:CommunicationsGraphEdge
CommunicationsGraphEdge	idsCommunications.h	/^typedef struct CommunicationsGraphEdge$/;"	s
CommunicationsGraphEdge	idsCommunications.h	/^} CommunicationsGraphEdge;$/;"	t	typeref:struct:CommunicationsGraphEdge
CommunicationsLogMerge	goodwinmerge.c	/^} CommunicationsLogMerge;$/;"	t	typeref:struct:__anon8	file:
CommunicationsLogState	apisupport.h	/^typedef struct CommunicationsLogState$/;"	s
CommunicationsLogState	apisupport.h	/^} CommunicationsLogState;$/;"	t	typeref:struct:CommunicationsLogState
CommunicationsLogStatePtr	idsCommunications-sanitized.h	/^typedef struct CommunicationsLogState *CommunicationsLogStatePtr;$/;"	t	typeref:struct:CommunicationsLogState
CommunicationsLogStatePtr	idsCommunications.h	/^typedef struct CommunicationsLogState *CommunicationsLogStatePtr;$/;"	t	typeref:struct:CommunicationsLogState
CommunicationsMessageAccess	idsCommunications-sanitized.h	/^} CommunicationsMessageAccess;$/;"	t	typeref:enum:__anon35
CommunicationsMessageAccess	idsCommunications.h	/^} CommunicationsMessageAccess;$/;"	t	typeref:enum:__anon13
CommunicationsMessageDirection	idsCommunications-sanitized.h	/^} CommunicationsMessageDirection;$/;"	t	typeref:enum:__anon34
CommunicationsMessageDirection	idsCommunications.h	/^} CommunicationsMessageDirection;$/;"	t	typeref:enum:__anon12
CommunicationsMessageType	idsCommunicationsMessages.h	/^typedef struct CommunicationsMessageType$/;"	s
CommunicationsMessageType	idsCommunicationsMessages.h	/^} CommunicationsMessageType;$/;"	t	typeref:struct:CommunicationsMessageType
CommunicationsNeighbor	idsCommunications-sanitized.h	/^typedef struct CommunicationsNeighbor$/;"	s
CommunicationsNeighbor	idsCommunications-sanitized.h	/^} CommunicationsNeighbor;$/;"	t	typeref:struct:CommunicationsNeighbor
CommunicationsNeighbor	idsCommunications.h	/^typedef struct CommunicationsNeighbor$/;"	s
CommunicationsNeighbor	idsCommunications.h	/^} CommunicationsNeighbor;$/;"	t	typeref:struct:CommunicationsNeighbor
CommunicationsNeighborState	idsCommunications-sanitized.h	/^} CommunicationsNeighborState;$/;"	t	typeref:enum:__anon39
CommunicationsNeighborState	idsCommunications.h	/^} CommunicationsNeighborState;$/;"	t	typeref:enum:__anon17
CommunicationsNeighborType	idsCommunications-sanitized.h	/^typedef unsigned int CommunicationsNeighborType;$/;"	t
CommunicationsNeighborType	idsCommunications.h	/^typedef unsigned int CommunicationsNeighborType;$/;"	t
CommunicationsNeighborUpdateProc	idsCommunications-sanitized.h	/^typedef void (*CommunicationsNeighborUpdateProc)$/;"	t
CommunicationsNeighborUpdateProc	idsCommunications.h	/^typedef void (*CommunicationsNeighborUpdateProc)$/;"	t
CommunicationsPositionWeight	idsCommunications-sanitized.h	/^typedef struct CommunicationsPositionWeight$/;"	s
CommunicationsPositionWeight	idsCommunications-sanitized.h	/^} CommunicationsPositionWeight;$/;"	t	typeref:struct:CommunicationsPositionWeight
CommunicationsPositionWeight	idsCommunications.h	/^typedef struct CommunicationsPositionWeight$/;"	s
CommunicationsPositionWeight	idsCommunications.h	/^} CommunicationsPositionWeight;$/;"	t	typeref:struct:CommunicationsPositionWeight
CommunicationsState	apisupport.h	/^typedef struct CommunicationsState$/;"	s
CommunicationsState	apisupport.h	/^} CommunicationsState;$/;"	t	typeref:struct:CommunicationsState
CommunicationsStatePtr	idsCommunications-sanitized.h	/^typedef struct CommunicationsState *CommunicationsStatePtr;$/;"	t	typeref:struct:CommunicationsState
CommunicationsStatePtr	idsCommunications.h	/^typedef struct CommunicationsState *CommunicationsStatePtr;$/;"	t	typeref:struct:CommunicationsState
CommunicationsStatusUpdateProc	idsCommunications-sanitized.h	/^typedef void (*CommunicationsStatusUpdateProc)($/;"	t
CommunicationsStatusUpdateProc	idsCommunications.h	/^typedef void (*CommunicationsStatusUpdateProc)($/;"	t
Config	config.c	/^struct Config$/;"	s	file:
Config	config.h	/^typedef struct Config Config;$/;"	t	typeref:struct:Config
ConfigNode	config.c	/^typedef struct ConfigNode$/;"	s	file:
ConfigNode	config.c	/^} ConfigNode;$/;"	t	typeref:struct:ConfigNode	file:
DATA_ACK	data.h	/^	DATA_ACK=1,$/;"	e	enum:DataAck
DATA_ACK_ENDTOEND	data.h	/^	DATA_ACK_ENDTOEND,		\/* final destinations will send ACKs  *\/$/;"	e	enum:DataAckType
DATA_ACK_NONE	data.h	/^	DATA_ACK_NONE,			\/* no ACK packets will be sent (and no retransmissions)  *\/$/;"	e	enum:DataAckType
DATA_H	data.h	2;"	d
DATA_MAX_DEST	data.h	29;"	d
DATA_NAK	data.h	/^	DATA_NAK$/;"	e	enum:DataAck
DATA_REXMIT	data.cpp	62;"	d	file:
DATA_ROUTE_AMBIENT	data.h	/^	DATA_ROUTE_AMBIENT=0,		\/* route using the ambient routing protocol  *\/$/;"	e	enum:DataRouteEnum
DATA_ROUTE_FLOOD	data.h	/^	DATA_ROUTE_FLOOD,		\/* route by flooding (at application layer)  *\/$/;"	e	enum:DataRouteEnum
DATA_ROUTE_HIERARCHY	data.h	/^	DATA_ROUTE_HIERARCHY,		\/* not implemented   route along the hierarchy *\/$/;"	e	enum:DataRouteEnum
DATA_ROUTE_MASK	data.h	51;"	d
DATA_ROUTE_NOFAILOVER	data.h	49;"	d
DATA_ROUTE_ROUTING	data.h	/^	DATA_ROUTE_ROUTING,		\/* route using the routing module (at application layer)  *\/$/;"	e	enum:DataRouteEnum
DATA_STATUS_ACKED	data.cpp	/^	DATA_STATUS_ACKED$/;"	e	enum:DataStatus	file:
DATA_STATUS_UNACKED	data.cpp	/^	DATA_STATUS_UNACKED=0,$/;"	e	enum:DataStatus	file:
DATA_TIMEOUT	data.cpp	58;"	d	file:
DATA_TIMEOUTENTRY	data.cpp	54;"	d	file:
DEBUG	routingdetector.c	16;"	d	file:
DEFAULT_GID_HEARTBEAT_INTERVAL	gmcluster.h	25;"	d
DEFAULT_GID_HEARTBEAT_TIMEOUT_FACTOR	gmcluster.h	24;"	d
DEMOLIB_H	demolib.h	2;"	d
DES_H	des.h	2;"	d
DIRECT	idsCommunications-sanitized.h	180;"	d
DIRECT	idsCommunications.h	182;"	d
DIRECTBACKUP	idsCommunications-sanitized.h	181;"	d
DIRECTBACKUP	idsCommunications.h	183;"	d
DOVAR	watcher.cpp	2196;"	d	file:
DOVAR	watcher.cpp	2210;"	d	file:
DOVAR	watcher.cpp	2213;"	d	file:
DOVAR	watcher.cpp	2230;"	d	file:
DROP_IN_CHAIN	tsm_v4_TOJ.pl	/^use constant DROP_IN_CHAIN => "tsmdropin";$/;"	c
DROP_OUT_CHAIN	tsm_v4_TOJ.pl	/^use constant DROP_OUT_CHAIN => "tsmdropout";$/;"	c
DROP_THRU_CHAIN	tsm_v4_TOJ.pl	/^use constant DROP_THRU_CHAIN => "tsmdropthru";$/;"	c
DYNRG_RADIUS_DEBUG	interim2.cpp	106;"	d	file:
DYNRG_RADIUS_DEBUG	interim2.cpp	108;"	d	file:
DataAck	data.h	/^typedef enum DataAck$/;"	g
DataAck	data.h	/^} DataAck;$/;"	t	typeref:enum:DataAck
DataAckType	data.h	/^typedef enum DataAckType$/;"	g
DataAckType	data.h	/^} DataAckType;$/;"	t	typeref:enum:DataAckType
DataPacketAck	data.h	/^typedef struct DataPacketAck$/;"	s
DataPacketAck	data.h	/^} DataPacketAck;$/;"	t	typeref:struct:DataPacketAck
DataRoute	data.h	/^typedef unsigned int DataRoute;$/;"	t
DataRouteEnum	data.h	/^typedef enum DataRouteEnum$/;"	g
DataRouteEnum	data.h	/^} DataRouteEnum;$/;"	t	typeref:enum:DataRouteEnum
DataStatus	data.cpp	/^typedef enum DataStatus$/;"	g	file:
DataStatus	data.cpp	/^} DataStatus;$/;"	t	typeref:enum:DataStatus	file:
DetectorInit	routingdetector.c	/^typedef struct DetectorInit$/;"	s	file:
DetectorInit	routingdetector.c	/^} DetectorInit;$/;"	t	typeref:struct:DetectorInit	file:
Direction	transDuo.c	/^} Direction;$/;"	t	typeref:enum:__anon20	file:
Draw	main.cpp	/^static void Draw(void)$/;"	f	file:
Draw	test.c	/^static void Draw(void)$/;"	f	file:
EVENTLISTBUCKET	des.cpp	223;"	d	file:
EVENT_FDREAD	des.h	348;"	d
EVENT_FDWRITE	des.h	349;"	d
EVENT_PACKET	des.h	344;"	d
EVENT_REPACKET	des.h	345;"	d
EVENT_TICK	des.h	347;"	d
EVENT_TIMER	des.h	346;"	d
EXTERNC	idmefPrint.h	11;"	d
EXTERNC	idmefPrint.h	13;"	d
FLOATINGROOT	bft.h	42;"	d
FLOATINGROOT	graphcluster.cpp	/^typedef enum {NOTREEYET,FLOATINGROOT,TREEINIT,WAITCLUSTER,WAITTERM,HIERARCHYINIT,HIERARCHYREADY} clusterState;$/;"	e	enum:__anon52	file:
FLOATING_LABEL_H	floatinglabel.h	2;"	d
FLOODMAXLASTHEARD	flood.h	16;"	d
FLOOD_H	flood.h	2;"	d
FLOOD_HEADERSIZE	flood.cpp	22;"	d	file:
FREE	hashtable.c	6;"	d	file:
FloatingLabel	idsCommunications-sanitized.h	/^typedef struct FloatingLabel$/;"	s
FloatingLabel	idsCommunications-sanitized.h	/^} FloatingLabel;$/;"	t	typeref:struct:FloatingLabel
FloatingLabel	idsCommunications.h	/^typedef struct FloatingLabel$/;"	s
FloatingLabel	idsCommunications.h	/^} FloatingLabel;$/;"	t	typeref:struct:FloatingLabel
FlyonlyRect	mobility.h	/^typedef struct FlyonlyRect$/;"	s
FlyonlyRect	mobility.h	/^} FlyonlyRect;$/;"	t	typeref:struct:FlyonlyRect
GETMAX	watcher.cpp	3000;"	d	file:
GETMAX	watcher.cpp	3013;"	d	file:
GETMAXFD	demoaggregator.c	282;"	d	file:
GETMAXFD	demodetector.c	85;"	d	file:
GETMAXFD	demoresponder.c	193;"	d	file:
GETMAXFD	demorewriter.c	179;"	d	file:
GETMAXFD	demosigningaggregator.c	633;"	d	file:
GETMAXFD	demoverifiedalertreader.c	282;"	d	file:
GETMAXFD	des.cpp	870;"	d	file:
GETMAXFD	glancer.c	52;"	d	file:
GETMAXFD	goodwin.cpp	121;"	d	file:
GETMAXFD	livenetwork.cpp	731;"	d	file:
GETMAXFD	pgraphwatcher.c	102;"	d	file:
GETMAXFD	positionweight.c	78;"	d	file:
GETMAXFD	routingdetector.c	621;"	d	file:
GETMAXFD	tealabcontrol.c	213;"	d	file:
GETMAXFD	testapi.c	84;"	d	file:
GETMAXFD	watcher.cpp	2262;"	d	file:
GMCLUSTER_ACCEPTABLE_LINK_EXPIRATION_TIME	gmcluster.h	23;"	d
GMCLUSTER_ANTENNARADIUS_DEFAULT	gmcluster.h	21;"	d
GMCLUSTER_POSITIONHISTORY_DEFAULT	gmcluster.h	22;"	d
GPSScale	watcher.cpp	/^static double GPSScale = 80000.0;$/;"	v	file:
GRAPHCLUSTER_H	graphcluster.h	2;"	d
GRAPHICSLIBS	Makefile	/^GRAPHICSLIBS=-L\/usr\/X11R6\/lib -lGL -lGLU -lglut$/;"	m
GRAPHICS_H	graphics.h	2;"	d
GROUPDISPDATAPORT	gmcluster.cpp	679;"	d	file:
GROUP_MOBILITY_DER_BORKBORKBORK_CLUSTER_H	gmcluster.h	2;"	d
Graph	hierarchy2text.cpp	/^boost::setS, boost::vecS, boost::bidirectionalS, Node, int > Graph;$/;"	t	file:
GroupMatrix	gmclusterTest.cpp	/^typedef GroupRow GroupMatrix[MAX_GM_NODES];$/;"	t	file:
GroupRow	gmclusterTest.cpp	/^typedef BIT_CHUNK_TYPE GroupRow[MAX_GM_NODES\/BIT_CHUNK_SIZE];$/;"	t	file:
HASHTABLE_H	hashtable.h	2;"	d
HCUNIT_ASSEMBLY_SETUP	ut_BufferPair.c	/^HCUNIT_ASSEMBLY_SETUP(bufferPairUnitTestSetup)$/;"	f
HCUNIT_ASSEMBLY_SETUP	ut_TransDuo.c	/^HCUNIT_ASSEMBLY_SETUP(transDuoUnitTestSetup)$/;"	f
HCUNIT_ASSEMBLY_SETUP	ut_marshal.c	/^HCUNIT_ASSEMBLY_SETUP(marshalUnitTestSetup)$/;"	f
HCUNIT_ASSEMBLY_SETUP	ut_transformNull.c	/^HCUNIT_ASSEMBLY_SETUP(transformNullUnitTestSetup)$/;"	f
HCUNIT_ASSEMBLY_SETUP	ut_transformSign.c	/^HCUNIT_ASSEMBLY_SETUP(transformSignUnitTestAssemblySetup)$/;"	f
HCUNIT_ASSEMBLY_TEARDOWN	ut_BufferPair.c	/^HCUNIT_ASSEMBLY_TEARDOWN(bufferPairUnitTestTeardown)$/;"	f
HCUNIT_ASSEMBLY_TEARDOWN	ut_TransDuo.c	/^HCUNIT_ASSEMBLY_TEARDOWN(transDuoUnitTestTeardown)$/;"	f
HCUNIT_ASSEMBLY_TEARDOWN	ut_marshal.c	/^HCUNIT_ASSEMBLY_TEARDOWN(marshalUnitTestTeardown)$/;"	f
HCUNIT_ASSEMBLY_TEARDOWN	ut_transformNull.c	/^HCUNIT_ASSEMBLY_TEARDOWN(transformNullUnitTestTeardown)$/;"	f
HCUNIT_ASSEMBLY_TEARDOWN	ut_transformSign.c	/^HCUNIT_ASSEMBLY_TEARDOWN(transformSignUnitTestAssemblyTeardown)$/;"	f
HCUNIT_TEST	ut_BufferPair.c	/^HCUNIT_TEST(testBufferPairDups)$/;"	f
HCUNIT_TEST	ut_BufferPair.c	/^HCUNIT_TEST(testRoundTripBufferPairBuffers)$/;"	f
HCUNIT_TEST	ut_BufferPair.c	/^HCUNIT_TEST(testRoundTripBufferPairFromTransDuo)$/;"	f
HCUNIT_TEST	ut_TransDuo.c	/^HCUNIT_TEST(transDuoTestAdds)$/;"	f
HCUNIT_TEST	ut_TransDuo.c	/^HCUNIT_TEST(transDuoTestBufferDup)$/;"	f
HCUNIT_TEST	ut_TransDuo.c	/^HCUNIT_TEST(transDuoTestCreateDestroy)$/;"	f
HCUNIT_TEST	ut_TransDuo.c	/^HCUNIT_TEST(transDuoTestDataHandle)$/;"	f
HCUNIT_TEST	ut_TransDuo.c	/^HCUNIT_TEST(transDuoTestDoubleRoundTripsWithCopy)$/;"	f
HCUNIT_TEST	ut_TransDuo.c	/^HCUNIT_TEST(transDuoTestRawGet)$/;"	f
HCUNIT_TEST	ut_TransDuo.c	/^HCUNIT_TEST(transDuoTestRoundTrips)$/;"	f
HCUNIT_TEST	ut_TransDuo.c	/^HCUNIT_TEST(transDuoTestSigner)$/;"	f
HCUNIT_TEST	ut_TransDuo.c	/^HCUNIT_TEST(transDuoTestTagGets)$/;"	f
HCUNIT_TEST	ut_TransDuo.c	/^HCUNIT_TEST(transDuoTestTransformedGet)$/;"	f
HCUNIT_TEST	ut_marshal.c	/^HCUNIT_TEST(marshalTestLong)$/;"	f
HCUNIT_TEST	ut_marshal.c	/^HCUNIT_TEST(marshalTestRand)$/;"	f
HCUNIT_TEST	ut_marshal.c	/^HCUNIT_TEST(marshalTestULong)$/;"	f
HCUNIT_TEST	ut_transformNull.c	/^HCUNIT_TEST(transformNullRoundtrip)$/;"	f
HCUNIT_TEST	ut_transformSign.c	/^HCUNIT_TEST(transformSignTestCopyFromTransformAmmend)$/;"	f
HCUNIT_TEST	ut_transformSign.c	/^HCUNIT_TEST(transformSignTestCopyFromTransformStraight)$/;"	f
HCUNIT_TEST	ut_transformSign.c	/^HCUNIT_TEST(transformSignTestCopyThroughUntransform)$/;"	f
HCUNIT_TEST	ut_transformSign.c	/^HCUNIT_TEST(transformSignTestIdOfSender1)$/;"	f
HCUNIT_TEST	ut_transformSign.c	/^HCUNIT_TEST(transformSignTestIdOfSender2)$/;"	f
HCUNIT_TEST	ut_transformSign.c	/^HCUNIT_TEST(transformSignTestIdOfSender3)$/;"	f
HCUNIT_TEST	ut_transformSign.c	/^HCUNIT_TEST(transformSignTestRawLength)$/;"	f
HCUNIT_TEST	ut_transformSign.c	/^HCUNIT_TEST(transformSignTestRoundtrip1)$/;"	f
HCUNIT_TEST	ut_transformSign.c	/^HCUNIT_TEST(transformSignTestRoundtrip2)$/;"	f
HCUNIT_TEST	ut_transformSign.c	/^HCUNIT_TEST(transformSignTestRoundtrip3)$/;"	f
HCUNIT_TEST	ut_transformSign.c	/^HCUNIT_TEST(transformSignTestToUntransform)$/;"	f
HCUNIT_TEST	ut_transformSign.c	/^HCUNIT_TEST(transformSignTestUntransformSignInternalErrorOnBadHandle)$/;"	f
HCUNIT_TEST	ut_transformSign.c	/^HCUNIT_TEST(transformSignTestUntransformSignInternalErrorOnShortData)$/;"	f
HCUNIT_TEST	ut_transformSign.c	/^HCUNIT_TEST(transformSignTestUntransformSignInternalErrorOnUnsetHandle)$/;"	f
HCUNIT_TEST	ut_transformSign.c	/^HCUNIT_TEST(transformSignTestUntransformSignReplay)$/;"	f
HCUNIT_TEST	ut_transformSign.c	/^HCUNIT_TEST(transformSignTestUntransformSignVerificationFailureOnModified)$/;"	f
HCUNIT_TEST	ut_transformSign.c	/^HCUNIT_TEST(transformSignTestUntransformSignVerificationFailureOnOtherIP)$/;"	f
HCUNIT_TEST	ut_transformSign.c	/^HCUNIT_TEST(transformSignTestUntransformSignVerificationFailureOnTruncation)$/;"	f
HCUNIT_TEST	ut_transformSign.c	/^HCUNIT_TEST(transformSignTestUntransformSignVerificationNoPeer)$/;"	f
HCUNIT_TEST	ut_transformSign.c	/^HCUNIT_TEST(transformSignTestUntransformSignVerified)$/;"	f
HCUNIT_TEST_SETUP	ut_marshal.c	/^HCUNIT_TEST_SETUP(marshalTestSetup)$/;"	f
HCUNIT_TEST_SETUP	ut_transformSign.c	/^HCUNIT_TEST_SETUP(transformSignUnitTestSetup)$/;"	f
HCUNIT_TEST_TEARDOWN	ut_marshal.c	/^HCUNIT_TEST_TEARDOWN(marshalTestTeardown)$/;"	f
HCUNIT_TEST_TEARDOWN	ut_transformSign.c	/^HCUNIT_TEST_TEARDOWN(transformSignUnitTestTeardown)$/;"	f
HEADERSIZE	apisupport.c	41;"	d	file:
HEADERSIZE	livenetwork.cpp	412;"	d	file:
HELLOGIDDATALEN	gmcluster.cpp	51;"	d	file:
HELLOGIDDATAOFFSET	gmcluster.cpp	50;"	d	file:
HELLOGPSDATALEN	gmcluster.cpp	49;"	d	file:
HELLOGPSDATAOFFSET	gmcluster.cpp	48;"	d	file:
HELLO_CLUSTERHEAD	simulation.h	24;"	d
HELLO_H	hello.h	2;"	d
HELLO_SELECTTIME	hello.cpp	22;"	d	file:
HELLO_UNDESIREDTIME	hello.cpp	25;"	d	file:
HEURISTIC_SEED_SOURCE	rng.h	/^	enum RNGSources { RAW_SEED_SOURCE, PREDEF_SEED_SOURCE, HEURISTIC_SEED_SOURCE };$/;"	e	enum:RNG::RNGSources
HIERARCHYINIT	graphcluster.cpp	/^typedef enum {NOTREEYET,FLOATINGROOT,TREEINIT,WAITCLUSTER,WAITTERM,HIERARCHYINIT,HIERARCHYREADY} clusterState;$/;"	e	enum:__anon52	file:
HIERARCHYREADY	graphcluster.cpp	/^typedef enum {NOTREEYET,FLOATINGROOT,TREEINIT,WAITCLUSTER,WAITTERM,HIERARCHYINIT,HIERARCHYREADY} clusterState;$/;"	e	enum:__anon52	file:
HIERARCHY_LEVEL_SPACING	graphics.cpp	904;"	d	file:
HIERARCHY_RADIUS	graphics.h	70;"	d
HIERARCHY_RADIUS	graphics.h	87;"	d
HIGH_ORDER_BIT	gmcluster.cpp	72;"	d	file:
HIGH_ORDER_BIT	gmclusterTest.cpp	9;"	d	file:
IDMEFPRINT_H_FILE	idmefPrint.h	5;"	d
IDSCOMMUNICATIONS_H_FILE	idsCommunications-sanitized.h	13;"	d
IDSCOMMUNICATIONS_H_FILE	idsCommunications.h	13;"	d
IDSCOMMUNICATIONS_MESSAGE_DEMO_DIRECTIVE	idsCommunicationsMessages.h	38;"	d
IDSCOMMUNICATIONS_MESSAGE_DEMO_MESSAGE	idsCommunicationsMessages.h	39;"	d
IDSCOMMUNICATIONS_MESSAGE_DEMO_REPORT	idsCommunicationsMessages.h	37;"	d
IDSCOMMUNICATIONS_MESSAGE_DEMO_SIGNED_DIRECTIVE	idsCommunicationsMessages.h	41;"	d
IDSCOMMUNICATIONS_MESSAGE_DEMO_SIGNED_REPORT	idsCommunicationsMessages.h	40;"	d
IDSCOMMUNICATIONS_MESSAGE_IDMEF_ALERT	idsCommunicationsMessages.h	20;"	d
IDSCOMMUNICATIONS_MESSAGE_IDMEF_ALERT_ACK	idsCommunicationsMessages.h	24;"	d
IDSCOMMUNICATIONS_MESSAGE_IDMEF_ALERT_ACK_SIGNED	idsCommunicationsMessages.h	29;"	d
IDSCOMMUNICATIONS_MESSAGE_IDMEF_ALERT_CONSOLIDATED	idsCommunicationsMessages.h	22;"	d
IDSCOMMUNICATIONS_MESSAGE_IDMEF_ALERT_CONSOLIDATED_SIGNED	idsCommunicationsMessages.h	27;"	d
IDSCOMMUNICATIONS_MESSAGE_IDMEF_ALERT_CONSOLIDATED_TOROOTGROUP	idsCommunicationsMessages.h	23;"	d
IDSCOMMUNICATIONS_MESSAGE_IDMEF_ALERT_CONSOLIDATED_TOROOTGROUP_SIGNED	idsCommunicationsMessages.h	28;"	d
IDSCOMMUNICATIONS_MESSAGE_IDMEF_ALERT_VERIFIED	idsCommunicationsMessages.h	25;"	d
IDSCOMMUNICATIONS_MESSAGE_IDMEF_HEARTBEAT	idsCommunicationsMessages.h	21;"	d
IDSCOMMUNICATIONS_MESSAGE_INCONSISTANCY_LINKSTATE	idsCommunicationsMessages.h	45;"	d
IDSCOMMUNICATIONS_MESSAGE_LINKHISTORYQUERY	idsCommunicationsMessages.h	49;"	d
IDSCOMMUNICATIONS_MESSAGE_LINKHISTORYREPLY	idsCommunicationsMessages.h	50;"	d
IDSCOMMUNICATIONS_MESSAGE_LIPAD_REPORT	idsCommunicationsMessages.h	71;"	d
IDSCOMMUNICATIONS_MESSAGE_RG_BLOCK	idsCommunicationsMessages.h	33;"	d
IDSCOMMUNICATIONS_MESSAGE_WATCHER_COLOR	idsCommunicationsMessages.h	56;"	d
IDSCOMMUNICATIONS_MESSAGE_WATCHER_EDGE	idsCommunicationsMessages.h	57;"	d
IDSCOMMUNICATIONS_MESSAGE_WATCHER_EDGE_REMOVE	idsCommunicationsMessages.h	58;"	d
IDSCOMMUNICATIONS_MESSAGE_WATCHER_FLOATINGLABEL	idsCommunicationsMessages.h	62;"	d
IDSCOMMUNICATIONS_MESSAGE_WATCHER_FLOATINGLABEL_REMOVE	idsCommunicationsMessages.h	63;"	d
IDSCOMMUNICATIONS_MESSAGE_WATCHER_GPS	idsCommunicationsMessages.h	59;"	d
IDSCOMMUNICATIONS_MESSAGE_WATCHER_GRAPH	idsCommunicationsMessages.h	60;"	d
IDSCOMMUNICATIONS_MESSAGE_WATCHER_GRAPH_EDGE	idsCommunicationsMessages.h	61;"	d
IDSCOMMUNICATIONS_MESSAGE_WATCHER_LABEL	idsCommunicationsMessages.h	54;"	d
IDSCOMMUNICATIONS_MESSAGE_WATCHER_LABEL_REMOVE	idsCommunicationsMessages.h	55;"	d
IDSCOMMUNICATIONS_MESSAGE_WORMHOLE_DATA	idsCommunicationsMessages.h	67;"	d
IDSPOSITION_ACTIVE	idsCommunications-sanitized.h	/^    IDSPOSITION_ACTIVE,$/;"	e	enum:IDSPositionStatus
IDSPOSITION_ACTIVE	idsCommunications.h	/^    IDSPOSITION_ACTIVE,$/;"	e	enum:IDSPositionStatus
IDSPOSITION_INACTIVE	idsCommunications-sanitized.h	/^    IDSPOSITION_INACTIVE=0,$/;"	e	enum:IDSPositionStatus
IDSPOSITION_INACTIVE	idsCommunications.h	/^    IDSPOSITION_INACTIVE=0,$/;"	e	enum:IDSPositionStatus
IDSPOSITION_INFORM	idsCommunications-sanitized.h	/^    IDSPOSITION_INFORM,$/;"	e	enum:IDSPositionStatus
IDSPOSITION_INFORM	idsCommunications.h	/^    IDSPOSITION_INFORM,$/;"	e	enum:IDSPositionStatus
IDSPOSITION_MAXVAL	idsCommunications-sanitized.h	626;"	d
IDSPOSITION_MAXVAL	idsCommunications.h	634;"	d
IDSPOSITION_UNDEFINED	idsCommunications-sanitized.h	/^    IDSPOSITION_UNDEFINED,     \/* internal value, to make sure that an update $/;"	e	enum:IDSPositionStatus
IDSPOSITION_UNDEFINED	idsCommunications.h	/^    IDSPOSITION_UNDEFINED,     \/* internal value, to make sure that an update $/;"	e	enum:IDSPositionStatus
IDSPosition	idsCommunications-sanitized.h	/^typedef struct IDSPosition$/;"	s
IDSPosition	idsCommunications-sanitized.h	/^} IDSPosition;$/;"	t	typeref:struct:IDSPosition
IDSPosition	idsCommunications.h	/^typedef struct IDSPosition$/;"	s
IDSPosition	idsCommunications.h	/^} IDSPosition;$/;"	t	typeref:struct:IDSPosition
IDSPositionStatus	idsCommunications-sanitized.h	/^typedef enum IDSPositionStatus$/;"	g
IDSPositionStatus	idsCommunications-sanitized.h	/^} IDSPositionStatus;$/;"	t	typeref:enum:IDSPositionStatus
IDSPositionStatus	idsCommunications.h	/^typedef enum IDSPositionStatus$/;"	g
IDSPositionStatus	idsCommunications.h	/^} IDSPositionStatus;$/;"	t	typeref:enum:IDSPositionStatus
IDSPositionType	idsCommunications-sanitized.h	/^typedef enum IDSPositionType$/;"	g
IDSPositionType	idsCommunications-sanitized.h	/^} IDSPositionType;$/;"	t	typeref:enum:IDSPositionType
IDSPositionType	idsCommunications.h	/^typedef enum IDSPositionType$/;"	g
IDSPositionType	idsCommunications.h	/^} IDSPositionType;$/;"	t	typeref:enum:IDSPositionType
IDSPositionUpdateProc	idsCommunications-sanitized.h	/^typedef void (*IDSPositionUpdateProc)($/;"	t
IDSPositionUpdateProc	idsCommunications.h	/^typedef void (*IDSPositionUpdateProc)($/;"	t
IDSSTATE_NODE_FLAG_ROOTGROUP_GET	apisupport.c	483;"	d	file:
IDSSTATE_NODE_FLAG_ROOTGROUP_SET	apisupport.c	484;"	d	file:
IDSSTATE_STATE_FLAG_LOCKED_GET	apisupport.c	481;"	d	file:
IDSSTATE_STATE_FLAG_LOCKED_SET	apisupport.c	482;"	d	file:
IDSState	idsCommunications-sanitized.h	/^} IDSState;$/;"	t	typeref:struct:__anon38
IDSState	idsCommunications.h	/^} IDSState;$/;"	t	typeref:struct:__anon16
IDSStateElement	idsCommunications-sanitized.h	/^} IDSStateElement;$/;"	t	typeref:struct:__anon37
IDSStateElement	idsCommunications.h	/^} IDSStateElement;$/;"	t	typeref:struct:__anon15
IDSStateElementMarshaledSize	apisupport.c	/^static size_t IDSStateElementMarshaledSize(const IDSStateElement *e)$/;"	f	file:
IDSStateFree	idsCommunications.c	/^void IDSStateFree(IDSState *vect)$/;"	f
IDSStateMalloc	idsCommunications.c	/^IDSState *IDSStateMalloc(CommunicationsStatePtr cs, int num)$/;"	f
IDSStateMarshal	apisupport.c	/^ApiCommand *IDSStateMarshal(const IDSState *vect)$/;"	f
IDSStateMarshaledSize	apisupport.c	/^static size_t IDSStateMarshaledSize(const IDSState *vect)$/;"	f	file:
IDSStateRead	statetest.c	/^static IDSState *IDSStateRead(CommunicationsStatePtr cs, FILE *fil)$/;"	f	file:
IDSStateSet	idsCommunications.c	/^void IDSStateSet(IDSState *vect)$/;"	f
IDSStateUnmarshal	apisupport.c	/^IDSState *IDSStateUnmarshal(const packet *p)$/;"	f
IDS_MESSAGE_TYPES_H	idsCommunicationsMessages.h	2;"	d
INFINITE_TTL	amroute.h	75;"	d
INTERIM2_ENROUTECHENABLE	interim2.cpp	92;"	d	file:
INTERIM2_H	interim2.h	2;"	d
INTERIM2_HELLO_OPTION_NOOP	interim2.cpp	188;"	d	file:
INTERIM2_HELLO_OPTION_PAYLOAD	interim2.cpp	190;"	d	file:
INTERIM2_HELLO_OPTION_ROOTGROUP_RADIUS	interim2.cpp	189;"	d	file:
INTERIM2_HOPCOUNTWINDOW	interim2.cpp	101;"	d	file:
INTERIM2_LEAFSCALE	interim2.cpp	91;"	d	file:
INTERIM2_MAXNEIGHBORS	interim2.cpp	99;"	d	file:
INTERIM2_MINSEQUENTIALCOUNT	interim2.cpp	90;"	d	file:
INTERIM2_PROMOTIONTIME	interim2.cpp	89;"	d	file:
INTERIM2_ROOT	interim2.cpp	96;"	d	file:
INTERIM2_ROOTGROUPMINSIZE	interim2.cpp	94;"	d	file:
INTERIM2_ROOTGROUPRADIUS	interim2.cpp	93;"	d	file:
INTERIM2_ROOTNAILED	interim2.cpp	97;"	d	file:
INTERIM2_TIME_HELLO	interim2.cpp	86;"	d	file:
INTERIM2_TIME_HELLO_TIMEOUT	interim2.cpp	87;"	d	file:
INTERIM2_TIME_SELECT	interim2.cpp	85;"	d	file:
INTERIM2_UNDESIREDTIME	interim2.cpp	88;"	d	file:
INVERSE_M	rng.cc	145;"	d	file:
IPQUAD	demosigningaggregator.c	36;"	d	file:
IPQUAD	demosigningdetector.c	37;"	d	file:
IPQUAD	demoverifiedalertreader.c	31;"	d	file:
IPQUAD	ut_TransDuo.c	19;"	d	file:
IPQUAD	ut_transformSign.c	378;"	d	file:
Ig_	rng.h	/^	double Cg_[6], Bg_[6], Ig_[6]; $/;"	m	class:RNG
InFlight	data.cpp	/^typedef struct InFlight$/;"	s	file:
InFlight	data.cpp	/^} InFlight;$/;"	t	typeref:struct:InFlight	file:
InFlightKey	data.cpp	/^typedef struct InFlightKey$/;"	s	file:
Init	test.c	/^static void Init(void)$/;"	f	file:
InvA1	rng.cc	/^	const double InvA1[3][3] = { \/\/ Inverse of A1p0 $/;"	v
InvA2	rng.cc	/^	const double InvA2[3][3] = { \/\/ Inverse of A2p0 $/;"	v
K	graphcluster.cpp	896;"	d	file:
Key	main.cpp	/^static void Key(unsigned char key, int x, int y)$/;"	f	file:
Key	test.c	/^static void Key(unsigned char key, int x, int y)$/;"	f	file:
Key	watcher.cpp	/^static void Key(unsigned char key, int x, int y)$/;"	f	file:
Key2	main.cpp	/^static void Key2(int key, int x, int y)$/;"	f	file:
Key2	test.c	/^static void Key2(int key, int x, int y)$/;"	f	file:
Key2	watcher.cpp	/^static void Key2(int key, int x, int y)$/;"	f	file:
LDSO	Makefile	/^LDSO:=$(shell ls \/lib\/ld-*.so)$/;"	m
LIBNET_CONFIG	Makefile	/^LIBNET_CONFIG=..\/libnet\/install\/bin\/libnet-config$/;"	m
LIBNET_LDFLAGS	Makefile	/^LIBNET_LDFLAGS="-L..\/libnet\/install\/lib `$(LIBNET_CONFIG) --libs`"$/;"	m
LIBOBJS	Makefile	/^LIBOBJS = apisupport.o $/;"	m
LIVEOBJ	Makefile	/^LIVEOBJ=$(BASEOBJ) $(MODULEOBJ) livenetwork.o libidsCommunications.a $/;"	m
M	rng.cc	144;"	d	file:
MAKEBAR	watcher.cpp	3092;"	d	file:
MAKEBAR	watcher.cpp	3129;"	d	file:
MALLOC	hashtable.c	5;"	d	file:
MALLOCREADLINE_H	mallocreadline.h	5;"	d
MANETADDR_DEFINED	des.h	15;"	d
MANETADDR_DEFINED	idsCommunications-sanitized.h	84;"	d
MANETADDR_DEFINED	idsCommunications.h	84;"	d
MANETLOSS_BER	main.cpp	/^	MANETLOSS_BER           \/* do a bit error rate, with some FEC parameters  (unimplemented) *\/$/;"	e	enum:__anon54	file:
MANETLOSS_NONE	main.cpp	/^	MANETLOSS_NONE,         \/* do no loss at the simulator level  *\/$/;"	e	enum:__anon54	file:
MANETLOSS_PER	main.cpp	/^	MANETLOSS_PER,          \/* do a packet error rate loss, in the simulator  *\/$/;"	e	enum:__anon54	file:
MANETTIME_DEFINED	des.h	20;"	d
MANETTIME_DEFINED	idsCommunications-sanitized.h	89;"	d
MANETTIME_DEFINED	idsCommunications.h	89;"	d
MARSHALBUFFERLONG	marshal.h	88;"	d
MARSHALBYTE	marshal.h	42;"	d
MARSHALBYTEREV	data.cpp	769;"	d	file:
MARSHALLONG	marshal.h	26;"	d
MARSHALLONGLONG	marshal.h	13;"	d
MARSHALLONGREV	data.cpp	758;"	d	file:
MARSHALNETWORK	marshal.h	143;"	d
MARSHALNETWORKLONG	marshal.h	157;"	d
MARSHALNETWORKSHORT	marshal.h	158;"	d
MARSHALSHORT	marshal.h	35;"	d
MARSHALSTRINGMEDIUM	marshal.h	108;"	d
MARSHALSTRINGSHORT	marshal.h	58;"	d
MARSHAL_H	marshal.h	2;"	d
MAX	node.h	111;"	d
MAXBUFF	goodwinmerge.c	18;"	d	file:
MAXHOP	des.h	27;"	d
MAXINT	rng.h	72;"	d
MAXINTERFACE	livenetwork.cpp	54;"	d	file:
MAXKIDS	graphcluster.cpp	49;"	d	file:
MAXLEVEL	des.h	190;"	d
MAXNODE	watcher.cpp	130;"	d	file:
MAXPACKETSIZE	livenetwork.cpp	419;"	d	file:
MAX_GM_NODES	gmcluster.cpp	70;"	d	file:
MAX_GM_NODES	gmclusterTest.cpp	10;"	d	file:
MENU_ALLOFF	watcher.cpp	182;"	d	file:
MENU_ALLON	watcher.cpp	183;"	d	file:
MENU_CLEAREDGES	watcher.cpp	189;"	d	file:
MENU_CLEARLABELS	watcher.cpp	188;"	d	file:
MENU_LABELCRITICAL	watcher.cpp	185;"	d	file:
MENU_LABELINFO	watcher.cpp	187;"	d	file:
MENU_LABELWARN	watcher.cpp	186;"	d	file:
MENU_QUIT	watcher.cpp	178;"	d	file:
MENU_SPEED1	watcher.cpp	171;"	d	file:
MENU_SPEED16	watcher.cpp	175;"	d	file:
MENU_SPEED1_2	watcher.cpp	170;"	d	file:
MENU_SPEED1_4	watcher.cpp	169;"	d	file:
MENU_SPEED2	watcher.cpp	172;"	d	file:
MENU_SPEED32	watcher.cpp	176;"	d	file:
MENU_SPEED4	watcher.cpp	173;"	d	file:
MENU_SPEED8	watcher.cpp	174;"	d	file:
MENU_VIEWPOINTRESET	watcher.cpp	179;"	d	file:
MENU_ZOOMIN	watcher.cpp	180;"	d	file:
MENU_ZOOMOUT	watcher.cpp	181;"	d	file:
MESHNEIGHBOR	amroute.h	38;"	d
MESSAGETYPE	pgraphwatcher.c	26;"	d	file:
MESSAGETYPE	positionweight.c	27;"	d	file:
MESSAGE_FAILED	idsCommunications-sanitized.h	/^    MESSAGE_FAILED,$/;"	e	enum:__anon36
MESSAGE_FAILED	idsCommunications.h	/^    MESSAGE_FAILED,$/;"	e	enum:__anon14
MESSAGE_MAXTTL	idsCommunications-sanitized.h	100;"	d
MESSAGE_MAXTTL	idsCommunications.h	101;"	d
MESSAGE_STATUS_TEXT	idsCommunications-sanitized.h	457;"	d
MESSAGE_STATUS_TEXT	idsCommunications.h	459;"	d
MESSAGE_SUCCESSFUL	idsCommunications-sanitized.h	/^    MESSAGE_SUCCESSFUL=0,       \/* The message was delivered and ACKed  *\/$/;"	e	enum:__anon36
MESSAGE_SUCCESSFUL	idsCommunications.h	/^    MESSAGE_SUCCESSFUL=0,       \/* The message was delivered and ACKed  *\/$/;"	e	enum:__anon14
MESSAGE_THE_CATS_EATEN_IT	idsCommunications-sanitized.h	/^    MESSAGE_THE_CATS_EATEN_IT,  \/* not used *\/$/;"	e	enum:__anon36
MESSAGE_THE_CATS_EATEN_IT	idsCommunications.h	/^    MESSAGE_THE_CATS_EATEN_IT,  \/* not used *\/$/;"	e	enum:__anon14
METRIC_H	metric.h	2;"	d
MIN	des.cpp	22;"	d	file:
MIN	infrasniff.cpp	57;"	d	file:
MIN	node.h	108;"	d
MOBILITYCONSTRAINT_FLYONLY	mobility.h	/^	MOBILITYCONSTRAINT_FLYONLY,$/;"	e	enum:__anon42
MOBILITYCONSTRAINT_NOFLY	mobility.h	/^	MOBILITYCONSTRAINT_NOFLY,$/;"	e	enum:__anon42
MOBILITYCONSTRAINT_REPEL	mobility.h	/^	MOBILITYCONSTRAINT_REPEL$/;"	e	enum:__anon42
MOBILITY_H	mobility.h	2;"	d
MOBILITY_MAXCONSTRAINT	mobility.h	84;"	d
ManetAddr	des.h	/^typedef unsigned int ManetAddr;$/;"	t
ManetAddr	idsCommunications-sanitized.h	/^typedef unsigned int ManetAddr;$/;"	t
ManetAddr	idsCommunications.h	/^typedef unsigned int ManetAddr;$/;"	t
ManetPacketCallback	des.h	/^typedef void ManetPacketCallback(manetNode *, packet *);$/;"	t
ManetRFModelState	main.cpp	/^typedef struct ManetRFModelState$/;"	s	file:
ManetRFModelState	main.cpp	/^} ManetRFModelState;$/;"	t	typeref:struct:ManetRFModelState	file:
MatMatModM	rng.cc	/^	void MatMatModM (const double A[3][3], const double B[3][3], $/;"	f	namespace:__anon32
MatPowModM	rng.cc	/^	void MatPowModM (const double A[3][3], double B[3][3], double m, $/;"	f	namespace:__anon32
MatTwoPowModM	rng.cc	/^	void MatTwoPowModM (const double A[3][3], double B[3][3], double m, $/;"	f	namespace:__anon32
MatVecModM	rng.cc	/^	void MatVecModM (const double A[3][3], const double s[3], double v[3], $/;"	f	namespace:__anon32
MatchAddr	hierarchy2text.cpp	/^    MatchAddr(ManetAddr toMatch) : addr(toMatch) {}$/;"	f	class:MatchAddr
MatchAddr	hierarchy2text.cpp	/^class MatchAddr$/;"	c	file:
MessageHandler	idsCommunications-sanitized.h	/^typedef void (*MessageHandler)(void *messageHandlerData, $/;"	t
MessageHandler	idsCommunications.h	/^typedef void (*MessageHandler)(void *messageHandlerData, $/;"	t
MessageHandlerReadWrite	idsCommunications-sanitized.h	/^typedef void (*MessageHandlerReadWrite)(void *messageHandlerData, $/;"	t
MessageHandlerReadWrite	idsCommunications.h	/^typedef void (*MessageHandlerReadWrite)(void *messageHandlerData, $/;"	t
MessageHandlerRequest	apisupport.h	/^typedef struct MessageHandlerRequest$/;"	s
MessageHandlerRequest	apisupport.h	/^} MessageHandlerRequest;$/;"	t	typeref:struct:MessageHandlerRequest
MessageID	apisupport.h	/^typedef unsigned int MessageID;$/;"	t
MessageInfo	apisupport.h	/^typedef struct MessageInfo$/;"	s
MessageInfo	apisupport.h	/^} MessageInfo;$/;"	t	typeref:struct:MessageInfo
MessageInfoPtr	idsCommunications-sanitized.h	/^typedef struct MessageInfo *MessageInfoPtr;$/;"	t	typeref:struct:MessageInfo
MessageInfoPtr	idsCommunications.h	/^typedef struct MessageInfo *MessageInfoPtr;$/;"	t	typeref:struct:MessageInfo
MessageStatus	idsCommunications-sanitized.h	/^} MessageStatus;$/;"	t	typeref:enum:__anon36
MessageStatus	idsCommunications.h	/^} MessageStatus;$/;"	t	typeref:enum:__anon14
MessageStatusHandler	idsCommunications-sanitized.h	/^typedef void (*MessageStatusHandler)($/;"	t
MessageStatusHandler	idsCommunications.h	/^typedef void (*MessageStatusHandler)($/;"	t
MessageType	idsCommunications-sanitized.h	/^typedef unsigned int MessageType;$/;"	t
MessageType	idsCommunications.h	/^typedef unsigned int MessageType;$/;"	t
MessageTypeNode	apisupport.h	/^typedef struct MessageTypeNode$/;"	s
MessageTypeNode	apisupport.h	/^} MessageTypeNode;$/;"	t	typeref:struct:MessageTypeNode
MobilityCallback	mobility.h	/^typedef void MobilityCallback(manetNode *us);$/;"	t
MobilityConstraint	mobility.h	/^struct MobilityConstraint$/;"	s
MobilityConstraint	mobility.h	/^typedef struct MobilityConstraint MobilityConstraint;$/;"	t	typeref:struct:MobilityConstraint
MobilityConstraintCallback	mobility.h	/^typedef int MobilityConstraintCallback(manetNode *us, MobilityConstraint *con);$/;"	t
MobilityConstraintType	mobility.h	/^} MobilityConstraintType;$/;"	t	typeref:enum:__anon42
MobilityList	mobility.h	/^} MobilityList;$/;"	t	typeref:struct:__anon44
MobilityMove	mobility.h	/^struct MobilityMove$/;"	s
MobilityMove	mobility.h	/^typedef struct MobilityMove MobilityMove;$/;"	t	typeref:struct:MobilityMove
MobilityMoveCallback	mobility.h	/^typedef int MobilityMoveCallback(manetNode *us, MobilityMove *mov);$/;"	t
Motion	watcher.cpp	/^static void Motion(int mousex, int mousey)$/;"	f	file:
Mouse	watcher.cpp	/^static void Mouse(int button, int updown, int mousex, int mousey)$/;"	f	file:
MultModM	rng.cc	/^	double MultModM (double a, double s, double c, double m) $/;"	f	namespace:__anon32
NBR_COLOR_NUM	graphics.cpp	645;"	d	file:
NEARESTCOORD	idsCommunications-sanitized.h	185;"	d
NEARESTCOORD	idsCommunications.h	187;"	d
NEIGHBORTYPES	amroute.h	40;"	d
NEIGHBOR_1HOP	des.h	150;"	d
NEIGHBOR_CHILD	des.h	151;"	d
NEIGHBOR_HEARD	des.h	154;"	d
NEIGHBOR_HEARS	des.h	155;"	d
NEIGHBOR_PARENT	des.h	152;"	d
NEIGHBOR_ROOT	des.h	153;"	d
NLONGS	ut_marshal.c	64;"	d	file:
NODE_ADDRESSSIZE	des.h	187;"	d
NODE_ALL	idsCommunications-sanitized.h	96;"	d
NODE_ALL	idsCommunications.h	96;"	d
NODE_BROADCAST	des.h	188;"	d
NODE_DISPLAY_HIERARCHY	idsCommunications.h	/^    NODE_DISPLAY_HIERARCHY = 1$/;"	e	enum:__anon18
NODE_DISPLAY_MANET	idsCommunications.h	/^    NODE_DISPLAY_MANET = 0,$/;"	e	enum:__anon18
NODE_H	node.h	2;"	d
NODE_IS_MULTICAST	idsCommunications-sanitized.h	97;"	d
NODE_IS_MULTICAST	idsCommunications.h	98;"	d
NODE_LOCAL	idsCommunications-sanitized.h	95;"	d
NODE_LOCAL	idsCommunications.h	95;"	d
NODE_PACKETLIST	des.h	194;"	d
NODE_ROOTGROUP	idsCommunications.h	97;"	d
NOPCLUSTER_H	nopcluster.h	2;"	d
NOTREEYET	bft.h	40;"	d
NOTREEYET	graphcluster.cpp	/^typedef enum {NOTREEYET,FLOATINGROOT,TREEINIT,WAITCLUSTER,WAITTERM,HIERARCHYINIT,HIERARCHYREADY} clusterState;$/;"	e	enum:__anon52	file:
NO_CONSTRAINT	mobility.cpp	45;"	d	file:
NULONGS	ut_marshal.c	47;"	d	file:
NUM_NAME	demosigningaggregator.c	33;"	d	file:
NUM_NAME	demoverifiedalertreader.c	38;"	d	file:
N_SEEDS_	rng.cc	327;"	d	file:
NameHandler	idsCommunications-sanitized.h	/^typedef void (*NameHandler)(void *nameHandlerData, const struct ApiName *list);$/;"	t
NameHandler	idsCommunications.h	/^typedef void (*NameHandler)(void *nameHandlerData, const struct ApiName *list);$/;"	t
Node	hierarchy2text.cpp	/^    Node() : $/;"	f	class:Node
Node	hierarchy2text.cpp	/^class Node$/;"	c	file:
NodeDisplayStatus	idsCommunications-sanitized.h	/^} NodeDisplayStatus;$/;"	t	typeref:struct:__anon40
NodeDisplayStatus	idsCommunications.h	/^} NodeDisplayStatus;$/;"	t	typeref:struct:__anon19
NodeDisplayType	idsCommunications.h	/^} NodeDisplayType;$/;"	t	typeref:enum:__anon18
NodeEdge	idsCommunications-sanitized.h	/^typedef struct NodeEdge$/;"	s
NodeEdge	idsCommunications-sanitized.h	/^} NodeEdge;$/;"	t	typeref:struct:NodeEdge
NodeEdge	idsCommunications.h	/^typedef struct NodeEdge$/;"	s
NodeEdge	idsCommunications.h	/^} NodeEdge;$/;"	t	typeref:struct:NodeEdge
NodeLabel	idsCommunications-sanitized.h	/^typedef struct NodeLabel$/;"	s
NodeLabel	idsCommunications-sanitized.h	/^} NodeLabel;$/;"	t	typeref:struct:NodeLabel
NodeLabel	idsCommunications.h	/^typedef struct NodeLabel$/;"	s
NodeLabel	idsCommunications.h	/^} NodeLabel;$/;"	t	typeref:struct:NodeLabel
NoflyRect	mobility.h	/^typedef struct NoflyRect$/;"	s
NoflyRect	mobility.h	/^} NoflyRect;$/;"	t	typeref:struct:NoflyRect
NullData	transformNull.c	/^struct NullData$/;"	s	file:
NullData	untransformNull.c	/^struct NullData$/;"	s	file:
NullTransformData	transformNull.c	/^struct NullTransformData$/;"	s	file:
NullUntransformData	untransformNull.c	/^struct NullUntransformData$/;"	s	file:
OPT	tsm_v4_TOJ.pl	/^		OPT: foreach (@flags) {$/;"	l
ORIGIN_NAME	demosigningaggregator.c	34;"	d	file:
ORIGIN_NAME	demoverifiedalertreader.c	39;"	d	file:
PACKETAPI_HEADERLEN	packetapi.h	19;"	d
PACKETDATA_HEADERLEN	data.cpp	778;"	d	file:
PACKETPROTECTIONOBJ	Makefile	/^PACKETPROTECTIONOBJ=$/;"	m
PACKETPROTECTIONOBJ	Makefile	/^PACKETPROTECTIONOBJ=packetProtection.o$/;"	m
PACKETSTATS_H_FILE	packetstats.h	2;"	d
PACKET_AMROUTE	des.h	95;"	d
PACKET_API	des.h	89;"	d
PACKET_API_H	packetapi.h	2;"	d
PACKET_API_RECEIVE	packetapi.h	16;"	d
PACKET_API_RECEIVEACK	packetapi.h	17;"	d
PACKET_API_ROUTE	packetapi.h	15;"	d
PACKET_BARNACLE	des.h	100;"	d
PACKET_BFT	des.h	97;"	d
PACKET_BFT_HELLO	bft.h	14;"	d
PACKET_BFT_TREE	bft.h	15;"	d
PACKET_DATA	des.h	88;"	d
PACKET_DATA_ACK	data.h	23;"	d
PACKET_DATA_DATA	data.h	22;"	d
PACKET_FLOOD	des.h	94;"	d
PACKET_FLOOD_DATA	flood.h	20;"	d
PACKET_GRAPHCLUSTER	des.h	93;"	d
PACKET_GRAPHCLUSTER_CLUSTER	graphcluster.h	17;"	d
PACKET_GRAPHCLUSTER_DADDY	graphcluster.h	18;"	d
PACKET_GRAPHCLUSTER_DADDYACK	graphcluster.h	19;"	d
PACKET_GRAPHCLUSTER_HELLO	graphcluster.h	14;"	d
PACKET_GRAPHCLUSTER_TERM	graphcluster.h	16;"	d
PACKET_GRAPHCLUSTER_TREE	graphcluster.h	15;"	d
PACKET_GROUP_ID_ASSERTION	gmcluster.h	15;"	d
PACKET_GROUP_MOBILITY	des.h	99;"	d
PACKET_GROUP_MOBILTY_GPS	gmcluster.h	14;"	d
PACKET_HELLO	des.h	91;"	d
PACKET_HELLO_HELLO	hello.h	16;"	d
PACKET_INTERIM	des.h	92;"	d
PACKET_INTERIM2	des.h	98;"	d
PACKET_INTERIM2_HELLO	interim2.h	10;"	d
PACKET_INTERIM2_ROOT	interim2.h	11;"	d
PACKET_INTERIM_HELLO	simulation.h	19;"	d
PACKET_MAX	des.h	115;"	d
PACKET_MODULE_MASK	des.h	103;"	d
PACKET_NOP	des.h	282;"	d
PACKET_NOPCLUSTER	des.h	87;"	d
PACKET_ORIGIN	des.h	280;"	d
PACKET_PROTCTION_H_FILE	packetProtection.h	8;"	d
PACKET_RECEIVE	des.h	281;"	d
PACKET_REPEAT	des.h	279;"	d
PACKET_ROUTING	des.h	90;"	d
PACKET_ROUTING_DATA	routing.h	21;"	d
PACKET_ROUTING_ROUTE	routing.h	20;"	d
PACKET_ROUTING_TEST	routing.h	22;"	d
PACKET_STATEVECT	des.h	110;"	d
PACKET_STATEVECT_FLOOD	des.h	113;"	d
PACKET_STATEVECT_NOFLOOD	des.h	111;"	d
PACKET_TESTTRAFFIC	des.h	96;"	d
PACKET_TESTTRAFFIC_DATA	testtraffic.h	22;"	d
PACKET_TESTTRAFFIC_DATAACK	testtraffic.h	23;"	d
PARENTSOF	idsCommunications-sanitized.h	184;"	d
PARENTSOF	idsCommunications.h	186;"	d
PP_ARP	packetstats.h	/^	PP_ARP,$/;"	e	enum:__anon6
PP_ICMP	packetstats.h	/^	PP_ICMP,$/;"	e	enum:__anon6
PP_IDS_ACK	packetstats.h	/^	PP_IDS_ACK,	\/* PACKET_DATA_ACK; port=0 *\/$/;"	e	enum:__anon6
PP_IDS_API	packetstats.h	/^	PP_IDS_API,	\/* PACKET_API (app messages); port=msg class *\/$/;"	e	enum:__anon6
PP_IDS_HELLO	packetstats.h	/^	PP_IDS_HELLO,   \/* PACKET_INTERIM2_HELLO packets; port=0 *\/$/;"	e	enum:__anon6
PP_IDS_OTHER	packetstats.h	/^	PP_IDS_OTHER,   \/* other idsCommunications (UDP 4837) *\/$/;"	e	enum:__anon6
PP_OTHER	packetstats.h	/^	PP_OTHER$/;"	e	enum:__anon6
PP_TCP	packetstats.h	/^	PP_TCP,   \/* port is MIN(src_port,dst_port) *\/$/;"	e	enum:__anon6
PP_UDP	packetstats.h	/^	PP_UDP,   \/* port is MIN(src_port,dst_port) *\/$/;"	e	enum:__anon6
PP_UNKNOWN	packetstats.h	/^	PP_UNKNOWN = 0,$/;"	e	enum:__anon6
PREDEF_SEED_SOURCE	rng.h	/^	enum RNGSources { RAW_SEED_SOURCE, PREDEF_SEED_SOURCE, HEURISTIC_SEED_SOURCE };$/;"	e	enum:RNG::RNGSources
PRINTADDR	demoaggregator.c	27;"	d	file:
PRINTADDR	demodetector.c	26;"	d	file:
PRINTADDR	demolib.c	28;"	d	file:
PRINTADDR	demolib.h	16;"	d
PRINTADDR	demoresponder.c	26;"	d	file:
PRINTADDR	demorewriter.c	25;"	d	file:
PRINTADDR	goodwin.cpp	28;"	d	file:
PRINTADDR	idsCommunications-sanitized.h	1195;"	d
PRINTADDR	idsCommunications.h	1209;"	d
PRINTADDR	infrasniff.cpp	74;"	d	file:
PRINTADDR	livenetwork.cpp	85;"	d	file:
PRINTADDR	packetapi.cpp	163;"	d	file:
PRINTADDR	pgraphwatcher.c	28;"	d	file:
PRINTADDR	positionweight.c	29;"	d	file:
PRINTADDR	tealabcontrol.c	153;"	d	file:
PRINTADDRCPP	idsCommunications-sanitized.h	1196;"	d
PRINTADDRCPP	idsCommunications.h	1210;"	d
PRINTCOORD	interim2.cpp	103;"	d	file:
PRINTETHERADDR	infrasniff.cpp	75;"	d	file:
PROTECTIONLIB	Makefile	/^PROTECTIONLIB=$/;"	m
PROTECTIONLIB	Makefile	/^PROTECTIONLIB=..\/protection\/libnnpprotection.a$/;"	m
PROTECTION_INCLUDES	Makefile	/^PROTECTION_INCLUDES=$/;"	m
PROTECTION_INCLUDES	Makefile	/^PROTECTION_INCLUDES=-I..\/protection$/;"	m
PROTECTION_LDFLAGS	Makefile	/^PROTECTION_LDFLAGS=$/;"	m
PacketApi	packetapi.h	/^} PacketApi;$/;"	t	typeref:struct:__anon41
PacketApiNodeState	packetapi.cpp	/^typedef struct PacketApiNodeState$/;"	s	file:
PacketApiNodeState	packetapi.cpp	/^} PacketApiNodeState;$/;"	t	typeref:struct:PacketApiNodeState	file:
PacketClass	packetstats.cpp	/^	PacketClass()$/;"	f	struct:PacketClass
PacketClass	packetstats.cpp	/^	PacketClass(PacketProto packetProto, unsigned int packetPort)$/;"	f	struct:PacketClass
PacketClass	packetstats.cpp	/^typedef struct PacketClass {$/;"	s	file:
PacketClass	packetstats.cpp	/^} PacketClass;$/;"	t	typeref:struct:PacketClass	file:
PacketClassHash	packetstats.cpp	/^struct PacketClassHash {$/;"	s	file:
PacketCounts	packetstats.cpp	/^struct PacketCounts {$/;"	s	file:
PacketData	data.h	/^typedef struct PacketData$/;"	s
PacketData	data.h	/^} PacketData;$/;"	t	typeref:struct:PacketData
PacketDataAck	data.h	/^typedef struct PacketDataAck$/;"	s
PacketDataAck	data.h	/^} PacketDataAck;$/;"	t	typeref:struct:PacketDataAck
PacketProtection	packetProtection.cpp	/^struct PacketProtection$/;"	s	file:
PacketProto	packetstats.h	/^} PacketProto;$/;"	t	typeref:enum:__anon6
PacketStats	packetstats.cpp	/^	PacketStats()$/;"	f	class:PacketStats
PacketStats	packetstats.cpp	/^class PacketStats {$/;"	c	file:
PrintChildAndParent	hierarchy2text.cpp	/^    PrintChildAndParent(bool verboseFlag, bool rootgroupFlag) : verbose(verboseFlag), rootgroup(rootgroupFlag) {}$/;"	f	class:PrintChildAndParent
PrintChildAndParent	hierarchy2text.cpp	/^class PrintChildAndParent$/;"	c	file:
PrintLine	hierarchy2text.cpp	/^    PrintLine(bool verboseFlag) : verbose(verboseFlag) {}$/;"	f	class:PrintLine
PrintLine	hierarchy2text.cpp	/^class PrintLine$/;"	c	file:
PrintMeAndMyParents	hierarchy2text.cpp	/^    PrintMeAndMyParents(bool verboseFlag, bool rootgroupFlag) : verbose(verboseFlag), rootgroup(rootgroupFlag) {}$/;"	f	class:PrintMeAndMyParents
PrintMeAndMyParents	hierarchy2text.cpp	/^class PrintMeAndMyParents$/;"	c	file:
Quadrangle	watcher.cpp	/^typedef struct Quadrangle$/;"	s	file:
Quadrangle	watcher.cpp	/^} Quadrangle;$/;"	t	typeref:struct:Quadrangle	file:
QuadranglePoint	watcher.cpp	/^typedef struct QuadranglePoint$/;"	s	file:
QuadranglePoint	watcher.cpp	/^} QuadranglePoint;$/;"	t	typeref:struct:QuadranglePoint	file:
RAND_INT	ut_marshal.c	125;"	d	file:
RAND_LONG	ut_marshal.c	122;"	d	file:
RAND_LONGLONG	ut_marshal.c	119;"	d	file:
RAND_SHORT	ut_marshal.c	127;"	d	file:
RAND_U01	hello.cpp	62;"	d	file:
RAND_U01	hello.cpp	64;"	d	file:
RAND_U01	interim2.cpp	32;"	d	file:
RAND_U01	interim2.cpp	34;"	d	file:
RAND_U01	mobility.cpp	40;"	d	file:
RAND_U01	mobility.cpp	42;"	d	file:
RAND_U01	nopcluster.cpp	60;"	d	file:
RAND_U01	nopcluster.cpp	62;"	d	file:
RAND_UCHAR	ut_marshal.c	128;"	d	file:
RAND_UINT	ut_marshal.c	123;"	d	file:
RAND_ULONG	ut_marshal.c	120;"	d	file:
RAND_ULONGLONG	ut_marshal.c	116;"	d	file:
RAND_USHORT	ut_marshal.c	126;"	d	file:
RANLIB	Makefile	/^RANLIB ?= ranlib$/;"	m
RAW_SEED_SOURCE	rng.h	/^	enum RNGSources { RAW_SEED_SOURCE, PREDEF_SEED_SOURCE, HEURISTIC_SEED_SOURCE };$/;"	e	enum:RNG::RNGSources
REVERSE_CONSTRAINT	mobility.cpp	46;"	d	file:
RNG	rng.cc	/^RNG::RNG (const char *s) $/;"	f	class:RNG
RNG	rng.cc	/^RNG::RNG (long seedvalue) $/;"	f	class:RNG
RNG	rng.h	/^	RNG() : stream_(1L) {};$/;"	f	class:RNG
RNG	rng.h	/^	RNG(RNGSources source, int seedvalue = 1) { set_seed(source, seedvalue); };$/;"	f	class:RNG
RNG	rng.h	/^class RNG $/;"	c
RNGClass	rng.cc	/^	RNGClass() : TclClass("RNG") {}$/;"	f	class:RNGClass
RNGClass	rng.cc	/^static class RNGClass : public TclClass {$/;"	c	file:
RNGImplementation	rng.h	/^	RNGImplementation(long seed = 1L) {$/;"	f	class:RNGImplementation
RNGImplementation	rng.h	/^class RNGImplementation {$/;"	c
RNGSources	rng.h	/^	enum RNGSources { RAW_SEED_SOURCE, PREDEF_SEED_SOURCE, HEURISTIC_SEED_SOURCE };$/;"	g	class:RNG
RNGTest	rng.cc	/^RNGTest::RNGTest()$/;"	f	class:RNGTest
RNGTest	rng.h	/^class RNGTest {$/;"	c
ROUTEMAXAGE	routing.cpp	39;"	d	file:
ROUTE_RREPLY	routing.h	34;"	d
ROUTE_RREQUEST	routing.h	33;"	d
ROUTINGTTL	routing.cpp	38;"	d	file:
ROUTING_H	routing.h	2;"	d
Read_scenario	tsm_v4_TOJ.pl	/^sub Read_scenario {$/;"	s
Repel	mobility.h	/^typedef struct Repel$/;"	s
Repel	mobility.h	/^} Repel;$/;"	t	typeref:struct:Repel
Reshape	main.cpp	/^static void Reshape(int awidth, int aheight)$/;"	f	file:
Reshape	test.c	/^static void Reshape(int width, int height)$/;"	f	file:
ReshapeHierarchy	watcher.cpp	/^static void ReshapeHierarchy(int awidth, int aheight)$/;"	f	file:
ReshapeManet	watcher.cpp	/^static void ReshapeManet(int awidth, int aheight)$/;"	f	file:
Route	routingdetector.c	/^typedef struct Route$/;"	s	file:
Route	routingdetector.c	/^} Route;$/;"	t	typeref:struct:Route	file:
SET_BIT	apisupport.c	480;"	d	file:
SHOW_API	infrasniff.cpp	99;"	d	file:
SHOW_API_PAYLOAD	infrasniff.cpp	100;"	d	file:
SHOW_CLUSTERING	infrasniff.cpp	97;"	d	file:
SHOW_OTHER	infrasniff.cpp	98;"	d	file:
SIMOBJ	Makefile	/^SIMOBJ=$(BASEOBJ) $(MODULEOBJ) main.o libidsCommunications.a $/;"	m
SIMULATION_H	simulation.h	2;"	d
SIZEOFGIDPACKET	gmcluster.cpp	89;"	d	file:
SPEED	watcher.cpp	168;"	d	file:
STATEVEC_VERSION	apisupport.c	477;"	d	file:
STATIC	amroute.h	77;"	d
ScaleAndShiftUpdate	watcher.cpp	/^typedef enum ScaleAndShiftUpdate$/;"	g	file:
ScaleAndShiftUpdateAlways	watcher.cpp	/^    ScaleAndShiftUpdateAlways,$/;"	e	enum:ScaleAndShiftUpdate	file:
ScaleAndShiftUpdateOnChange	watcher.cpp	/^    ScaleAndShiftUpdateOnChange,$/;"	e	enum:ScaleAndShiftUpdate	file:
SignData	transformSign.c	/^struct SignData$/;"	s	file:
SignData	untransformSign.c	/^struct SignData$/;"	s	file:
SignTransformData	transformSign.c	/^struct SignTransformData$/;"	s	file:
SignUntransformData	untransformSign.c	/^struct SignUntransformData$/;"	s	file:
State	demosigningaggregator.c	/^} State;$/;"	t	typeref:struct:__anon9	file:
State	demosigningdetector.c	/^} State;$/;"	t	typeref:struct:__anon7	file:
State	demoverifiedalertreader.c	/^} State;$/;"	t	typeref:struct:__anon56	file:
State	livenetwork.cpp	/^} State;$/;"	t	typeref:struct:__anon63	file:
TESTHELLO_H	testhello.h	2;"	d
TESTTRAFFIC_H	testtraffic.h	2;"	d
TEST_BIT	apisupport.c	479;"	d	file:
TEXT_SCALE	graphics.cpp	647;"	d	file:
TEXT_SCALE	test.c	43;"	d	file:
TEXT_SCALE	watcher.cpp	977;"	d	file:
TEXT_SCALE_ZOOM_FACTOR	watcher.cpp	978;"	d	file:
TIME_HELLO	bft.h	19;"	d
TIME_HELLO	graphcluster.h	24;"	d
TIME_HELLO	hello.h	18;"	d
TIME_HELLO	simulation.h	36;"	d
TIME_HELLO_TIMEOUT	bft.h	20;"	d
TIME_HELLO_TIMEOUT	graphcluster.h	25;"	d
TIME_HELLO_TIMEOUT	hello.h	19;"	d
TIME_HELLO_TIMEOUT	simulation.h	37;"	d
TIME_INITTREE	graphcluster.h	21;"	d
TIME_TERM	graphcluster.h	23;"	d
TIME_TREE	bft.h	18;"	d
TIME_TREEREXMIT	graphcluster.h	22;"	d
TOGGLE	watcher.cpp	167;"	d	file:
TRANSDUO_H_FILE	transDuo.h	7;"	d
TRANSFORM	transDuo.c	/^    TRANSFORM,$/;"	e	enum:__anon20	file:
TRANSFORM_COPY_AND_AMEND	transform.h	/^    TRANSFORM_COPY_AND_AMEND$/;"	e	enum:TransformCopyType
TRANSFORM_COPY_STRAIGHT	transform.h	/^    TRANSFORM_COPY_STRAIGHT,$/;"	e	enum:TransformCopyType
TRANSFORM_H_FILE	transform.h	7;"	d
TRANSFORM_NULL_H_FILE	transformNull.h	5;"	d
TRANSFORM_SIGN_H_FILE	transformSign.h	5;"	d
TREEINIT	bft.h	41;"	d
TREEINIT	graphcluster.cpp	/^typedef enum {NOTREEYET,FLOATINGROOT,TREEINIT,WAITCLUSTER,WAITTERM,HIERARCHYINIT,HIERARCHYREADY} clusterState;$/;"	e	enum:__anon52	file:
TREENEIGHBOR	amroute.h	39;"	d
TREEREADY	bft.h	43;"	d
TREE_STATUS	neighborlist.cpp	/^struct TREE_STATUS {$/;"	s	file:
TYPE	transDuo.c	56;"	d	file:
TYPE	transDuo.c	58;"	d	file:
TYPE	transDuo.c	59;"	d	file:
TYPE	transDuo.c	61;"	d	file:
TYPE	transDuo.c	71;"	d	file:
TYPE	transDuo.c	73;"	d	file:
TYPE	transformNull.c	20;"	d	file:
TYPE	transformNull.c	22;"	d	file:
TYPE	transformSign.c	29;"	d	file:
TYPE	transformSign.c	31;"	d	file:
TYPE	untransformNull.c	20;"	d	file:
TYPE	untransformNull.c	22;"	d	file:
TYPE	untransformSign.c	30;"	d	file:
TYPE	untransformSign.c	32;"	d	file:
TYPE	untransformSign.c	41;"	d	file:
TYPE	untransformSign.c	43;"	d	file:
TYPE	ut_TransDuo.c	15;"	d	file:
TYPE	ut_TransDuo.c	17;"	d	file:
TYPE_NAME	demosigningaggregator.c	32;"	d	file:
TYPE_NAME	demoverifiedalertreader.c	37;"	d	file:
TransDuo	transDuo.c	/^struct TransDuo$/;"	s	file:
TransDuoManager	transDuo.c	/^struct TransDuoManager$/;"	s	file:
Transform	transform.h	/^typedef struct Transform$/;"	s
Transform	transform.h	/^} Transform;$/;"	t	typeref:struct:Transform
TransformCopyType	transform.h	/^typedef enum TransformCopyType$/;"	g
TransformCopyType	transform.h	/^} TransformCopyType;$/;"	t	typeref:enum:TransformCopyType
TransformDataHandle	transform.h	/^typedef struct TransformDataHandleData *TransformDataHandle;$/;"	t	typeref:struct:TransformDataHandleData
TupPriv	packetProtection.cpp	/^typedef struct TupPriv$/;"	s	file:
TupPriv	packetProtection.cpp	/^} TupPriv;$/;"	t	typeref:struct:TupPriv	file:
TupPrivSeq	packetProtection.cpp	/^static nnp_sequence_number_t TupPrivSeq(TupPriv *tp)$/;"	f	file:
TupPub	packetProtection.cpp	/^typedef struct TupPub$/;"	s	file:
TupPub	packetProtection.cpp	/^} TupPub;$/;"	t	typeref:struct:TupPub	file:
U01	rng.cc	/^double RNG::U01 () $/;"	f	class:RNG
U01d	rng.cc	/^double RNG::U01d () $/;"	f	class:RNG
UINT32_FROM_BUFFER	transDuo.c	20;"	d	file:
UINT32_TO_BUFFER	transDuo.c	13;"	d	file:
UNMARSHALBUFFERLONG	marshal.h	98;"	d
UNMARSHALBYTE	marshal.h	54;"	d
UNMARSHALBYTEREV	data.cpp	775;"	d	file:
UNMARSHALLONG	marshal.h	50;"	d
UNMARSHALLONGLONG	marshal.h	48;"	d
UNMARSHALLONGREV	data.cpp	767;"	d	file:
UNMARSHALNETWORK	marshal.h	150;"	d
UNMARSHALNETWORKLONG	marshal.h	160;"	d
UNMARSHALNETWORKSHORT	marshal.h	161;"	d
UNMARSHALSHORT	marshal.h	52;"	d
UNMARSHALSTRINGMEDIUM	marshal.h	124;"	d
UNMARSHALSTRINGMEDIUMLENGET	marshal.h	136;"	d
UNMARSHALSTRINGSHORT	marshal.h	74;"	d
UNTRANSFORM	transDuo.c	/^    UNTRANSFORM$/;"	e	enum:__anon20	file:
UNTRANSFORM_H_FILE	untransform.h	7;"	d
UNTRANSFORM_NULL_H_FILE	untransformNull.h	5;"	d
UNTRANSFORM_SIGN_H_FILE	untransformSign.h	5;"	d
UNTRANSFORM_SIGN_RESULT_TEXT	untransformSign.h	27;"	d
USE_PF_PACKET	infrasniff.cpp	26;"	d	file:
Untransform	untransform.h	/^typedef struct Untransform$/;"	s
Untransform	untransform.h	/^} Untransform;$/;"	t	typeref:struct:Untransform
UntransformDataHandle	untransform.h	/^typedef struct UntransformDataHandleData *UntransformDataHandle;$/;"	t	typeref:struct:UntransformDataHandleData
UntransformSignInternalError	untransformSign.h	/^    UntransformSignInternalError$/;"	e	enum:__anon30
UntransformSignNoPeer	untransformSign.h	/^    UntransformSignNoPeer,$/;"	e	enum:__anon30
UntransformSignReplay	untransformSign.h	/^    UntransformSignReplay,$/;"	e	enum:__anon30
UntransformSignResult	untransformSign.h	/^} UntransformSignResult;$/;"	t	typeref:enum:__anon30
UntransformSignVerificationFailure	untransformSign.h	/^    UntransformSignVerificationFailure,$/;"	e	enum:__anon30
UntransformSignVerified	untransformSign.h	/^    UntransformSignVerified,$/;"	e	enum:__anon30
Usage	tsm_v4_TOJ.pl	/^Usage: tsm [-dfv] <identity> <scenario file> <mobility rate>$/;"	l
VERSION_MASK	livenetwork.cpp	427;"	d	file:
WAITCLUSTER	graphcluster.cpp	/^typedef enum {NOTREEYET,FLOATINGROOT,TREEINIT,WAITCLUSTER,WAITTERM,HIERARCHYINIT,HIERARCHYREADY} clusterState;$/;"	e	enum:__anon52	file:
WAITTERM	graphcluster.cpp	/^typedef enum {NOTREEYET,FLOATINGROOT,TREEINIT,WAITCLUSTER,WAITTERM,HIERARCHYINIT,HIERARCHYREADY} clusterState;$/;"	e	enum:__anon52	file:
WALKNEXT	goodwincreate.c	26;"	d	file:
WALKOVER	goodwincreate.c	25;"	d	file:
WATCHERGPSPAYLOADSIZE	watcherGPS.cpp	10;"	d	file:
WATCHERGPS_H	watcherGPS.h	7;"	d
WATCHERGRAPH_H	watcherGraph.h	2;"	d
WATCHERMOVEMENT_H	watchermovement.h	7;"	d
WATCHER_H	watcher.h	2;"	d
WatcherGPS	watcherGPS.h	/^typedef struct WatcherGPS$/;"	s
WatcherGPS	watcherGPS.h	/^} WatcherGPS;$/;"	t	typeref:struct:WatcherGPS
XYWorldZToWorldXWorldY	graphics.h	/^typedef struct XYWorldZToWorldXWorldY$/;"	s
XYWorldZToWorldXWorldY	graphics.h	/^} XYWorldZToWorldXWorldY;$/;"	t	typeref:struct:XYWorldZToWorldXWorldY
ZLIB_FREE_FUNC	apisupport.h	400;"	d
_BSD_SOURCE	infrasniff.cpp	2;"	d	file:
_SVID_SOURCE	test.c	27;"	d	file:
__FAVOR_BSD	infrasniff.cpp	4;"	d	file:
__GLIBC_MINOR	infrasniff.cpp	30;"	d	file:
_hashbucket	hashtable.h	/^typedef struct _hashbucket$/;"	s
_hastable	hashtable.h	/^typedef struct _hastable$/;"	s
_rng_h_	rng.h	59;"	d
a	idsCommunications-sanitized.h	/^    ManetAddr a,b;$/;"	m	struct:CommunicationsGraphEdge
a	idsCommunications.h	/^    ManetAddr a,b;$/;"	m	struct:CommunicationsGraphEdge
a1	ut_transformSign.c	/^static ManetAddr a1;$/;"	v	file:
a12	rng.cc	/^	const double a12 = 1403580.0; $/;"	v
a13n	rng.cc	/^	const double a13n = 810728.0; $/;"	v
a2	ut_transformSign.c	/^static ManetAddr a2;$/;"	v	file:
a21	rng.cc	/^	const double a21 = 527612.0; $/;"	v
a23n	rng.cc	/^	const double a23n = 1370589.0; $/;"	v
a3	ut_transformSign.c	/^static ManetAddr a3;$/;"	v	file:
ac	goodwinmerge.c	/^	ApiCommand *ac[MAXBUFF];$/;"	m	struct:__anon8	file:
acceptTree	bft.cpp	/^static void acceptTree(manetNode *us, neighbor *n,packet *p)$/;"	f	file:
acceptTree	graphcluster.cpp	/^static void acceptTree(manetNode *us, neighbor *n, packet *p)$/;"	f	file:
acceptTreeUp	amroute.cpp	/^STATIC void acceptTreeUp(manetNode *us, ManetAddr addr, int hops)$/;"	f
acceptableLET	gmcluster.cpp	/^	double acceptableLET; 	\/\/ minimum acceptable LET for neighbors. $/;"	m	struct:groupClusterState	file:
access	apisupport.h	/^	CommunicationsMessageAccess access;	\/* is this a blocking or nonblocking client?   *\/$/;"	m	struct:MessageTypeNode
access	apisupport.h	/^	CommunicationsMessageAccess access;$/;"	m	struct:MessageHandlerRequest
accumulated	demoaggregator.c	/^    xmlDocPtr accumulated;$/;"	m	struct:detector	file:
accumulated	demoresponder.c	/^	xmlDocPtr accumulated;$/;"	m	struct:detector	file:
accumulated	demosigningaggregator.c	/^    xmlDocPtr accumulated;$/;"	m	struct:__anon9	file:
acktimeout	data.cpp	/^	destime acktimeout;$/;"	m	struct:InFlight	file:
acktype	data.h	/^	DataAckType acktype;$/;"	m	struct:PacketData
addNeighbor	neighborlist.cpp	/^void addNeighbor(int ntype, manetNode *us, int index)$/;"	f
addr	des.h	/^	ManetAddr addr, bcastaddr, netmask;   \/* our address *\/$/;"	m	struct:manetNode
addr	des.h	/^        ManetAddr addr;          \/* these two fields are the key  *\/$/;"	m	struct:neighbor
addr	goodwinmerge.c	/^	ManetAddr addr;$/;"	m	struct:__anon8	file:
addr	hierarchy2text.cpp	/^    ManetAddr addr;$/;"	m	class:MatchAddr	file:
addr	hierarchy2text.cpp	/^    ManetAddr addr;$/;"	m	class:Node	file:
addr	idsCommunications-sanitized.h	/^    ManetAddr addr;				\/* the neighbor's address *\/$/;"	m	struct:CommunicationsNeighbor
addr	idsCommunications-sanitized.h	/^    ManetAddr addr;$/;"	m	struct:CommunicationsDestination
addr	idsCommunications-sanitized.h	/^    ManetAddr addr;$/;"	m	struct:CommunicationsPositionWeight
addr	idsCommunications.h	/^    ManetAddr addr;				\/* the neighbor's address *\/$/;"	m	struct:CommunicationsNeighbor
addr	idsCommunications.h	/^    ManetAddr addr;$/;"	m	struct:CommunicationsDestination
addr	idsCommunications.h	/^    ManetAddr addr;$/;"	m	struct:CommunicationsPositionWeight
addr	packetProtection.cpp	/^	ManetAddr addr;$/;"	m	struct:TupPriv	file:
addr	packetProtection.cpp	/^	ManetAddr addr;$/;"	m	struct:TupPub	file:
addr	pgraphwatcher.c	/^	ManetAddr *addr;$/;"	m	struct:detector	file:
addr	transformSign.c	/^    struct in_addr addr;$/;"	m	struct:SignTransformData	typeref:struct:SignTransformData::in_addr	file:
addr	untransformSign.c	/^    struct in_addr addr;$/;"	m	struct:peer_entry	typeref:struct:peer_entry::in_addr	file:
addr	ut_BufferPair.c	/^static ManetAddr addr;$/;"	v	file:
addr	ut_TransDuo.c	/^static ManetAddr addr[sizeof(key)\/sizeof(key[0])];$/;"	v	file:
addrToIndex	neighborlist.cpp	/^int addrToIndex(manet *m, ManetAddr addr)$/;"	f
addressList	interim2.cpp	/^        ManetAddr addressList[400];$/;"	m	struct:__anon57	file:
address_syntax	tsm_v4_TOJ.pl	/^sub address_syntax {$/;"	s
addresslist	bft.h	/^        ManetAddr addresslist[40];$/;"	m	struct:__anon2
addresslist	graphcluster.cpp	/^        ManetAddr addresslist[40];$/;"	m	struct:__anon47	file:
addresslist	hello.cpp	/^        ManetAddr *addresslist;$/;"	m	struct:__anon59	file:
addresslist	simulation.h	/^	ManetAddr addresslist[40];$/;"	m	struct:__anon31
addrlist	testtraffic.cpp	/^ManetAddr addrlist[]={$/;"	v
advance_state	rng.cc	/^void RNG::advance_state (long e, long c) $/;"	f	class:RNG
aggregatorSend	demosigningaggregator.c	/^static void aggregatorSend(State *state)$/;"	f	file:
alt	watcherGPS.h	/^	double lat, lon, alt;$/;"	m	struct:WatcherGPS
amrouteInit	amroute.cpp	/^STATIC void amrouteInit(manet *m)$/;"	f
amroutePacketType	amroute.h	/^    } amroutePacketType;$/;"	t	typeref:struct:__anon27
amroutePacketTypeStats	amroute.h	/^    } amroutePacketTypeStats;$/;"	t	typeref:struct:__anon26
amroutePacketTypes	amroute.cpp	/^static amroutePacketType *amroutePacketTypes[] = {&joinReq, &joinAck, &joinNak,$/;"	v	file:
amrouteSend	amroute.cpp	/^void amrouteSend(manetNode *us, packet *data)$/;"	f
angleX	main.cpp	/^float angleX = 0.0, angleY = 0.0, angleZ = 0.0;$/;"	v
angleX	test.c	/^float angleX = 0.0, angleY = 0.0, angleZ = 0.0;$/;"	v
angleX	watcher.cpp	/^    float angleX;$/;"	m	struct:__anon4	file:
angleY	main.cpp	/^float angleX = 0.0, angleY = 0.0, angleZ = 0.0;$/;"	v
angleY	test.c	/^float angleX = 0.0, angleY = 0.0, angleZ = 0.0;$/;"	v
angleY	watcher.cpp	/^    float angleY;$/;"	m	struct:__anon4	file:
angleZ	main.cpp	/^float angleX = 0.0, angleY = 0.0, angleZ = 0.0;$/;"	v
angleZ	test.c	/^float angleX = 0.0, angleY = 0.0, angleZ = 0.0;$/;"	v
angleZ	watcher.cpp	/^    float angleZ;$/;"	m	struct:__anon4	file:
antennaRadius	gmcluster.cpp	/^	int antennaRadius; $/;"	m	struct:groupClusterState	file:
anti_	rng.h	/^	bool anti_, inc_prec_; $/;"	m	class:RNG
api	apisupport.h	/^	struct ApiSession *api;			\/* ApiSession which this MessageTypeNode belongs to *\/$/;"	m	struct:MessageTypeNode	typeref:struct:MessageTypeNode::ApiSession
apiAccept	packetapi.cpp	/^static void apiAccept(manetNode *us, void *data)$/;"	f	file:
apiApplicationRoute	packetapi.cpp	/^static void apiApplicationRoute(manetNode *us, packet *p, MessageInfo *mi, ApiSession *as)$/;"	f	file:
apiCommandConcatenate	apisupport.c	/^ApiCommand *apiCommandConcatenate(ApiCommand *first, ApiCommand *second)$/;"	f
apiCommandCopy	apisupport.c	/^ApiCommand *apiCommandCopy(ApiCommand *oac)$/;"	f
apiCommandFree	apisupport.c	/^void apiCommandFree(ApiCommand *ac)$/;"	f
apiCommandHandle	idsCommunications.c	/^static int apiCommandHandle(ApiCommand *ac, CommunicationsState *cs)$/;"	f	file:
apiCommandMalloc	apisupport.c	/^ApiCommand *apiCommandMalloc(ApiCommandType type,int len)$/;"	f
apiCommandRead	apisupport.c	/^ApiCommand *apiCommandRead($/;"	f
apiCommandWriteOrSend	apisupport.c	/^int apiCommandWriteOrSend(int fd, const ApiCommand *ac, int useSendMsg)$/;"	f
apiDelete	packetapi.cpp	/^static void apiDelete(PacketApiNodeState *st, ApiSession *as)$/;"	f	file:
apiFD	goodwin.cpp	/^	int apiFD;$/;"	m	struct:detector	file:
apiInitMarshal	apisupport.c	/^ApiCommand *apiInitMarshal(const ApiInit *in)$/;"	f
apiInitUnmarshal	apisupport.c	/^ApiInit *apiInitUnmarshal(const ApiCommand *ac)$/;"	f
apiNameFree	apisupport.c	/^void apiNameFree(ApiName *an)$/;"	f
apiNameMarshal	apisupport.c	/^ApiCommand *apiNameMarshal(const ApiName *name)$/;"	f
apiNameUnmarshal	apisupport.c	/^ApiName *apiNameUnmarshal(const ApiCommand *ac)$/;"	f
apiOriginated	apisupport.h	/^	int apiOriginated;	\/* if true, then this MI was created in the API, to go out, as opposed to *\/$/;"	m	struct:MessageInfo
apiReadable	packetapi.cpp	/^static void apiReadable(manetNode *us, void *data)$/;"	f	file:
apiStatusMarshal	apisupport.c	/^ApiCommand *apiStatusMarshal(const ApiStatus *as)$/;"	f
apiStatusUnmarshal	apisupport.c	/^ApiStatus *apiStatusUnmarshal(const ApiCommand *ac)$/;"	f
apiVersion	apisupport.h	/^	int apiVersion;$/;"	m	struct:ApiInit
apiWrite	packetapi.cpp	/^static void apiWrite(ApiSession *as, ApiCommand *ac)$/;"	f	file:
apiWriteAll	packetapi.cpp	/^static void apiWriteAll(ApiSession *as, ApiCommand *ac)$/;"	f	file:
apiWriteable	packetapi.cpp	/^static void apiWriteable(manetNode *us, void *data)$/;"	f	file:
apiacceptfd	packetapi.cpp	/^	int apiacceptfd;	\/* FD for incoming API connection requests  *\/$/;"	m	struct:PacketApiNodeState	file:
applyTo	mobility.h	/^	int *applyTo;     \/* if NULL, apply to all nodes.  otherwise, list of node indexes, terminated with a -1 *\/$/;"	m	struct:MobilityConstraint
aradius	des.h	/^	int aradius;    \/* antenna radius *\/$/;"	m	struct:manetNode
arrowZoomIn	watcher.cpp	/^static void arrowZoomIn(void)$/;"	f	file:
arrowZoomOut	watcher.cpp	/^static void arrowZoomOut(void)$/;"	f	file:
arrowZoomReset	watcher.cpp	/^static void arrowZoomReset(void)$/;"	f	file:
assignedList	interim2.cpp	/^	neighbor **assignedList;$/;"	m	struct:clusteringState	file:
asymmetric	neighborlist.cpp	/^    int cyclic, asymmetric;$/;"	m	struct:TREE_STATUS	file:
attemptOpen	hierarchy2text.cpp	/^void Node::attemptOpen()$/;"	f	class:Node
avg	amroute.cpp	582;"	d	file:
avgBuildDelay	amroute.cpp	/^static int avgBuildDelay = 1000;$/;"	v	file:
b	idsCommunications-sanitized.h	/^    ManetAddr a,b;$/;"	m	struct:CommunicationsGraphEdge
b	idsCommunications.h	/^    ManetAddr a,b;$/;"	m	struct:CommunicationsGraphEdge
bcastRecByte	idsCommunications-sanitized.h	/^    long long int bcastRecByte,origBcastXmitByte, repBcastXmitByte;$/;"	m	struct:ApiPacketCount
bcastRecByte	idsCommunications.h	/^    long long int bcastRecByte,origBcastXmitByte, repBcastXmitByte;$/;"	m	struct:ApiPacketCount
bcastRecCount	idsCommunications-sanitized.h	/^    long long int bcastRecCount,origBcastXmitCount, repBcastXmitCount;$/;"	m	struct:ApiPacketCount
bcastRecCount	idsCommunications.h	/^    long long int bcastRecCount,origBcastXmitCount, repBcastXmitCount;$/;"	m	struct:ApiPacketCount
bcastaddr	des.h	/^	ManetAddr addr, bcastaddr, netmask;   \/* our address *\/$/;"	m	struct:manetNode
begintime	watcher.cpp	/^static destime curtime = 0, begintime = 0;$/;"	v	file:
bgcolor	idsCommunications-sanitized.h	/^    unsigned char bgcolor[4],fgcolor[4]; \/* background & foreground colors *\/$/;"	m	struct:FloatingLabel
bgcolor	idsCommunications-sanitized.h	/^    unsigned char bgcolor[4],fgcolor[4]; \/* background & foreground colors *\/$/;"	m	struct:NodeLabel
bgcolor	idsCommunications.h	/^    unsigned char bgcolor[4],fgcolor[4]; \/* background & foreground colors *\/$/;"	m	struct:FloatingLabel
bgcolor	idsCommunications.h	/^    unsigned char bgcolor[4],fgcolor[4]; \/* background & foreground colors *\/$/;"	m	struct:NodeLabel
bit	watcher.cpp	/^    int bit;$/;"	m	struct:__anon5	file:
buck	hashtable.h	/^	hashbucket **buck;$/;"	m	struct:_hastable
bucket	des.h	/^	eventnode *bucket;		\/* first eventnode in linked list of eventnodes for this bucket *\/$/;"	m	struct:eventbucket
bucket	des.h	/^	struct eventbucket *bucket;	\/* time bucket which this event belongs to *\/$/;"	m	struct:eventnode	typeref:struct:eventnode::eventbucket
buf	bufferPair.c	/^    uint8_t buf[0];$/;"	m	struct:BufferPair	file:
buffer	transDuo.c	/^    uint8_t *buffer;$/;"	m	struct:TransDuo	file:
bufferInit	transDuo.c	/^static void bufferInit(struct TransDuo *td)$/;"	f	file:
bufferInitFromData	transDuo.c	/^static void bufferInitFromData($/;"	f	file:
bufferInitFromTransform	transDuo.c	/^static void bufferInitFromTransform(struct TransDuo *td)$/;"	f	file:
bufferInitFromUntransform	transDuo.c	/^static void bufferInitFromUntransform(struct TransDuo *td)$/;"	f	file:
bufferLength	transDuo.c	/^    size_t bufferLength;$/;"	m	struct:TransDuo	file:
bufferPairDestroy	bufferPair.c	/^void bufferPairDestroy(struct BufferPair *toDestroy)$/;"	f
bufferPairFirst	bufferPair.c	/^void const *bufferPairFirst(struct BufferPair const *toGet)$/;"	f
bufferPairFirstDup	bufferPair.c	/^void *bufferPairFirstDup(struct BufferPair const *toGet)$/;"	f
bufferPairFirstLength	bufferPair.c	/^size_t bufferPairFirstLength(struct BufferPair const *toGet)$/;"	f
bufferPairFromBuffers	bufferPair.c	/^struct BufferPair *bufferPairFromBuffers($/;"	f
bufferPairFromMarshaled	bufferPair.c	/^struct BufferPair *bufferPairFromMarshaled($/;"	f
bufferPairFromTransDuo	bufferPair.c	/^struct BufferPair *bufferPairFromTransDuo(struct TransDuo *td)$/;"	f
bufferPairMarshal	bufferPair.c	/^void const *bufferPairMarshal(struct BufferPair const *toMarshal)$/;"	f
bufferPairMarshalDup	bufferPair.c	/^void *bufferPairMarshalDup(struct BufferPair const *toMarshal)$/;"	f
bufferPairMarshalLength	bufferPair.c	/^size_t bufferPairMarshalLength(struct BufferPair const *toMarshal)$/;"	f
bufferPairSecond	bufferPair.c	/^void const *bufferPairSecond(struct BufferPair const *toGet)$/;"	f
bufferPairSecondDup	bufferPair.c	/^void *bufferPairSecondDup(struct BufferPair const *toGet)$/;"	f
bufferPairSecondLength	bufferPair.c	/^size_t bufferPairSecondLength(struct BufferPair const *toGet)$/;"	f
bufflen	goodwinmerge.c	/^	int bufflen, buffpos;$/;"	m	struct:__anon8	file:
buffpos	goodwinmerge.c	/^	int bufflen, buffpos;$/;"	m	struct:__anon8	file:
buildMessage	demosigningdetector.c	/^static int buildMessage(State *state, int messageId, void **msg_ret, size_t *msglen_ret)$/;"	f	file:
bytes	packetstats.cpp	/^	unsigned long long bytes;$/;"	m	struct:PacketCounts	file:
callback	des.h	/^	eventCallback *callback;	\/* valid only if type == EVENT_TIMER or type == EVENT_TICK *\/$/;"	m	struct:eventnode
callbackList	des.h	/^	ManetPacketCallback *callbackList[256];$/;"	m	struct:manet
chCallback	hello.cpp	/^	helloCH *chCallback;$/;"	m	struct:helloState	file:
chainApi	apisupport.h	/^	struct ApiSession *chainApi;		\/* set by demon, client whose pending list this MI is in   *\/$/;"	m	struct:MessageInfo	typeref:struct:MessageInfo::ApiSession
chainIncoming	packetapi.cpp	/^	MessageTypeNode *chainIncoming;	\/* chain of messageTypes for incoming messages  *\/$/;"	m	struct:PacketApiNodeState	file:
chainOutgoing	packetapi.cpp	/^	MessageTypeNode *chainOutgoing; \/* chain of messageTypes for outgoing messages *\/$/;"	m	struct:PacketApiNodeState	file:
checkIO	main.cpp	/^void checkIO(int arg)$/;"	f
checkIOGoodwin	watcher.cpp	/^void checkIOGoodwin(int arg)$/;"	f
checkIOLive	watcher.cpp	/^void checkIOLive(int arg)$/;"	f
checkRootGroupMembership	interim2.cpp	/^static int checkRootGroupMembership(manetNode *us)$/;"	f	file:
checkStats	infrasniff.cpp	/^void checkStats(struct timeval now)$/;"	f
chflag	graphcluster.cpp	/^	int chflag;     \/* if set, means we're a CH  *\/$/;"	m	struct:clusteringState	file:
chflag	graphcluster.cpp	/^	int chflag;$/;"	m	struct:__anon51	file:
childAdd	demoaggregator.c	/^static void childAdd(xmlNodePtr nod, xmlNodePtr incoming)    \/* copy all the children of incoming to child node  *\/$/;"	f	file:
childAdd	demosigningaggregator.c	/^static void childAdd(State *state, xmlNodePtr node, xmlNodePtr child)   $/;"	f	file:
childAdd	demoverifiedalertreader.c	/^static void childAdd(State *state, xmlNodePtr node, xmlNodePtr child)   $/;"	f	file:
childParse	demoaggregator.c	/^static void childParse(FILE *fd, xmlNodePtr cur,int distance)$/;"	f	file:
childParse	demoresponder.c	/^static void childParse(FILE *fd, xmlNodePtr cur,int distance)$/;"	f	file:
childParse	demorewriter.c	/^static void childParse(FILE *fd, xmlNodePtr cur,int distance)$/;"	f	file:
childParse	demosigningaggregator.c	/^static void childParse(FILE *fd, xmlNodePtr cur, int distance)$/;"	f	file:
class_rng	rng.cc	/^} class_rng;$/;"	v	typeref:class:RNGClass	file:
clear	packetstats.cpp	/^	void clear()$/;"	f	class:PacketStats
clearStats	packetstats.cpp	/^void clearStats(struct PacketStats *stats)$/;"	f
client	packetapi.cpp	/^	ApiSession *client;	\/* linked list of connected clients *\/$/;"	m	struct:PacketApiNodeState	file:
clockdelta	goodwinmerge.c	/^	destime clockdelta;			\/* difference between GPS clock and node clock *\/$/;"	m	struct:__anon8	file:
closestNode	graphics.cpp	/^manetNode *closestNode(manet *m, int x, int y, unsigned int r, unsigned int *dist_ret)$/;"	f
closestNode	graphics.h	72;"	d
cluster	des.h	/^	struct clusteringNeighbor *cluster;$/;"	m	struct:neighbor	typeref:struct:neighbor::clusteringNeighbor
cluster	des.h	/^	struct clusteringState *cluster;    \/* clustering stuff *\/$/;"	m	struct:manetNode	typeref:struct:manetNode::clusteringState
clusterKids	graphcluster.cpp	/^static void clusterKids(manetNode *us)$/;"	f	file:
clusterReset	bft.cpp	/^static void clusterReset(manetNode *us)$/;"	f	file:
clusterReset	graphcluster.cpp	/^static void clusterReset(manetNode *us,ManetAddr rootid, int root_seqnum)$/;"	f	file:
clusterState	graphcluster.cpp	/^typedef enum {NOTREEYET,FLOATINGROOT,TREEINIT,WAITCLUSTER,WAITTERM,HIERARCHYINIT,HIERARCHYREADY} clusterState;$/;"	t	typeref:enum:__anon52	file:
clusterhead	amroute.h	/^    neighbor clusterhead;		\/* used for graphics *\/$/;"	m	struct:clusteringState
clusterhead	bft.h	/^	ManetAddr clusterhead;$/;"	m	struct:__anon2
clusterhead	des.h	/^	neighbor *clusterhead;		\/* our clusterhead.  Its a pointer into the neighbor list.  Thus CH must be a neighbor right now *\/$/;"	m	struct:manetNode
clusterhead	des.h	/^        ManetAddr clusterhead;         \/* the CH this neighbor is using. ==NODE_BROADCAST means none  *\/$/;"	m	struct:neighbor
clusterhead	graphcluster.cpp	/^	ManetAddr clusterhead;$/;"	m	struct:__anon51	file:
clusterhead	graphcluster.cpp	/^	ManetAddr clusterhead;$/;"	m	struct:clusteringNeighbor	file:
clusterhead	graphcluster.cpp	/^	neighbor clusterhead;    \/* note this is not a pointer *\/$/;"	m	struct:clusteringState	file:
clusterhead	graphcluster.cpp	/^        ManetAddr clusterhead;$/;"	m	struct:__anon47	file:
clusterhead	simulation.h	/^	int clusterhead;$/;"	m	struct:__anon31
clusterheadflag	des.h	/^	int clusterheadflag;           \/* set if this neighbor is a clusterhead  (may not actually be known)  *\/$/;"	m	struct:neighbor
clusterheadflag	graphcluster.cpp	/^	int clusterheadflag;$/;"	m	struct:clusteringNeighbor	file:
clusterheadroute	graphcluster.cpp	/^	ManetAddr clusterheadroute[MAXKIDS];$/;"	m	struct:__anon49	file:
clusterheadroute	graphcluster.cpp	/^	ManetAddr clusterheadroute[MAXKIDS];$/;"	m	struct:__anon51	file:
clusterheadroute	graphcluster.cpp	/^	ManetAddr clusterheadroute[MAXKIDS];$/;"	m	struct:clusteringState	file:
clusterheadroutelen	graphcluster.cpp	/^	int clusterheadroutelen;$/;"	m	struct:__anon49	file:
clusterheadroutelen	graphcluster.cpp	/^	int clusterheadroutelen;$/;"	m	struct:__anon51	file:
clusterheadroutelen	graphcluster.cpp	/^	int clusterheadroutelen;$/;"	m	struct:clusteringState	file:
clusteringData	idsCommunications-sanitized.h	/^    void *clusteringData;$/;"	m	struct:__anon37
clusteringData	idsCommunications.h	/^    void *clusteringData;$/;"	m	struct:__anon15
clusteringDataLen	idsCommunications-sanitized.h	/^    unsigned short clusteringDataLen;$/;"	m	struct:__anon37
clusteringDataLen	idsCommunications.h	/^    unsigned short clusteringDataLen;$/;"	m	struct:__anon15
clusteringNeighbor	bft.cpp	/^typedef struct clusteringNeighbor$/;"	s	file:
clusteringNeighbor	bft.cpp	/^} clusteringNeighbor;$/;"	t	typeref:struct:clusteringNeighbor	file:
clusteringNeighbor	graphcluster.cpp	/^typedef struct clusteringNeighbor$/;"	s	file:
clusteringNeighbor	graphcluster.cpp	/^} clusteringNeighbor;$/;"	t	typeref:struct:clusteringNeighbor	file:
clusteringNeighbor	interim2.cpp	/^typedef struct clusteringNeighbor$/;"	s	file:
clusteringNeighbor	interim2.cpp	/^} clusteringNeighbor;$/;"	t	typeref:struct:clusteringNeighbor	file:
clusteringNeighbor	nopcluster.cpp	/^typedef struct clusteringNeighbor$/;"	s	file:
clusteringNeighbor	nopcluster.cpp	/^} clusteringNeighbor;$/;"	t	typeref:struct:clusteringNeighbor	file:
clusteringState	amroute.h	/^typedef struct clusteringState {$/;"	s
clusteringState	amroute.h	/^    } clusteringState;$/;"	t	typeref:struct:clusteringState
clusteringState	bft.h	/^typedef struct clusteringState$/;"	s
clusteringState	bft.h	/^} clusteringState;$/;"	t	typeref:struct:clusteringState
clusteringState	graphcluster.cpp	/^typedef struct clusteringState$/;"	s	file:
clusteringState	graphcluster.cpp	/^} clusteringState;$/;"	t	typeref:struct:clusteringState	file:
clusteringState	interim.cpp	/^typedef struct clusteringState$/;"	s	file:
clusteringState	interim.cpp	/^} clusteringState;$/;"	t	typeref:struct:clusteringState	file:
clusteringState	interim2.cpp	/^typedef struct clusteringState$/;"	s	file:
clusteringState	interim2.cpp	/^} clusteringState;$/;"	t	typeref:struct:clusteringState	file:
clusteringState	nopcluster.cpp	/^typedef struct clusteringState$/;"	s	file:
clusteringState	nopcluster.cpp	/^} clusteringState;$/;"	t	typeref:struct:clusteringState	file:
clusteringState	testhello.cpp	/^typedef struct clusteringState$/;"	s	file:
clusteringState	testhello.cpp	/^} clusteringState;$/;"	t	typeref:struct:clusteringState	file:
clusteringState	watcher.h	/^typedef struct clusteringState$/;"	s
clusteringState	watcher.h	/^} clusteringState;$/;"	t	typeref:struct:clusteringState
cmd_accept	tsm_v4_TOJ.pl	/^sub cmd_accept {$/;"	s
cmd_define	tsm_v4_TOJ.pl	/^sub cmd_define {$/;"	s
cmd_deny	tsm_v4_TOJ.pl	/^sub cmd_deny {$/;"	s
cmd_drop	tsm_v4_TOJ.pl	/^sub cmd_drop {$/;"	s
cmd_echoout	tsm_v4_TOJ.pl	/^sub cmd_echoout{$/;"	s
cmd_echotimetologfile	tsm_v4_TOJ.pl	/^sub cmd_echotimetologfile{$/;"	s
cmd_exit	tsm_v4_TOJ.pl	/^sub cmd_exit {$/;"	s
cmd_goto	tsm_v4_TOJ.pl	/^sub cmd_goto {$/;"	s
cmd_on	tsm_v4_TOJ.pl	/^sub cmd_on {$/;"	s
cmd_position	tsm_v4_TOJ.pl	/^sub cmd_position {$/;"	s
cmd_send	tsm_v4_TOJ.pl	/^sub cmd_send {$/;"	s
cmd_shellout	tsm_v4_TOJ.pl	/^sub cmd_shellout{$/;"	s
cmd_use	tsm_v4_TOJ.pl	/^sub cmd_use {$/;"	s
cmd_wait	tsm_v4_TOJ.pl	/^sub cmd_wait {$/;"	s
color	des.h	/^	 unsigned char *color;   \/* array of 4 chars...  or NULL to use default coloring *\/$/;"	m	struct:manetNode
color	idsCommunications-sanitized.h	/^    unsigned char color[4];$/;"	m	struct:NodeEdge
color	idsCommunications.h	/^    unsigned char color[4];$/;"	m	struct:NodeEdge
color	watcher.h	/^	unsigned char color[4];$/;"	m	struct:clusteringState
command	rng.cc	/^RNG::command(int argc, const char*const* argv)$/;"	f	class:RNG
communicationsApiCommandSend	idsCommunications.c	/^void communicationsApiCommandSend(CommunicationsStatePtr cs, ApiCommand *ac)$/;"	f
communicationsAttemptOpen	idsCommunications.c	/^static int communicationsAttemptOpen(CommunicationsStatePtr cs)$/;"	f	file:
communicationsClose	apisupport.c	/^void communicationsClose(CommunicationsStatePtr cs)$/;"	f
communicationsDestimeGet	idsCommunications.c	/^destime communicationsDestimeGet(CommunicationsStatePtr cs)$/;"	f
communicationsDestinationType2Str	idsCommunications.c	/^char const *communicationsDestinationType2Str(CommunicationsDestinationType t)$/;"	f
communicationsHostnameLookup	apisupport.c	/^ManetAddr communicationsHostnameLookup(const char *nam)$/;"	f
communicationsInit	idsCommunications.c	/^CommunicationsState *communicationsInit(ManetAddr host)$/;"	f
communicationsIntNeighborFlush	apisupport.c	/^void communicationsIntNeighborFlush(CommunicationsNeighbor **list)$/;"	f
communicationsIntNeighborListFree	packetapi.cpp	/^static void communicationsIntNeighborListFree(CommunicationsNeighbor *tmplist)$/;"	f	file:
communicationsIntNeighborMalloc	apisupport.c	/^CommunicationsNeighbor *communicationsIntNeighborMalloc(ManetAddr addr,CommunicationsNeighborType type, int distance)$/;"	f
communicationsIntNeighborSearch	apisupport.c	/^CommunicationsNeighbor *communicationsIntNeighborSearch(CommunicationsNeighbor **neighborlist, ManetAddr addr)$/;"	f
communicationsIntNeighborUpdate	apisupport.c	/^void communicationsIntNeighborUpdate(CommunicationsNeighbor **list, CommunicationsNeighbor *n)$/;"	f
communicationsLastEventTimeGet	idsCommunications.c	/^destime communicationsLastEventTimeGet(CommunicationsStatePtr cs)$/;"	f
communicationsLinkup	idsCommunications.c	/^int communicationsLinkup(CommunicationsStatePtr cs)$/;"	f
communicationsLogApiCommandRead	apisupport.c	/^ApiCommand *communicationsLogApiCommandRead(int fd, destime *tim, ManetAddr *localid)$/;"	f
communicationsLogApiCommandWrite	apisupport.c	/^int communicationsLogApiCommandWrite(int fd, ApiCommand *ac,destime tim, ManetAddr localid)$/;"	f
communicationsLogClose	idsCommunications.c	/^void communicationsLogClose(CommunicationsLogStatePtr cl)$/;"	f
communicationsLogDebugDefaultSet	idsCommunications.c	/^void communicationsLogDebugDefaultSet(void (*dlog)(char const *fmt, ...))$/;"	f
communicationsLogDebugSet	idsCommunications.c	/^void communicationsLogDebugSet($/;"	f
communicationsLogEnable	idsCommunications.c	/^void communicationsLogEnable(CommunicationsState *cs, int fd)$/;"	f
communicationsLogErrorDefaultSet	idsCommunications.c	/^void communicationsLogErrorDefaultSet(void (*elog)(char const *fmt, ...))$/;"	f
communicationsLogErrorSet	idsCommunications.c	/^void communicationsLogErrorSet($/;"	f
communicationsLogLoad	idsCommunications.c	/^CommunicationsLogStatePtr communicationsLogLoad(int fd)$/;"	f
communicationsLogMessage	idsCommunications.c	/^void communicationsLogMessage(CommunicationsStatePtr cs, int type, unsigned char *payload, int payloadlen)$/;"	f
communicationsLogNextEventTimeGet	idsCommunications.c	/^destime communicationsLogNextEventTimeGet(CommunicationsLogStatePtr cl)$/;"	f
communicationsLogNodesGet	idsCommunications.c	/^CommunicationsStatePtr const *communicationsLogNodesGet(CommunicationsLogStatePtr cl)$/;"	f
communicationsLogSearch	idsCommunications.c	/^static CommunicationsStatePtr communicationsLogSearch(CommunicationsStatePtr *list, ManetAddr addr)$/;"	f	file:
communicationsLogStateGet	idsCommunications.c	/^CommunicationsLogStatePtr communicationsLogStateGet(CommunicationsStatePtr cs)$/;"	f
communicationsLogStep	idsCommunications.c	/^long communicationsLogStep(CommunicationsLogState *cl, int step, destime *callercurtime)$/;"	f
communicationsLogStepSingle	idsCommunications.c	/^static long communicationsLogStepSingle(CommunicationsLogState *cl, destime *callercurtime)$/;"	f	file:
communicationsLogTimeGet	idsCommunications.c	/^destime communicationsLogTimeGet(CommunicationsLogStatePtr cl)$/;"	f
communicationsLogWarnDefaultSet	idsCommunications.c	/^void communicationsLogWarnDefaultSet(void (*wlog)(char const *fmt, ...))$/;"	f
communicationsLogWarnSet	idsCommunications.c	/^void communicationsLogWarnSet($/;"	f
communicationsLostConnection	idsCommunications.c	/^static void communicationsLostConnection(CommunicationsStatePtr cs)$/;"	f	file:
communicationsMessageTypeSearch	apisupport.c	/^CommunicationsMessageType *communicationsMessageTypeSearch(MessageType type)$/;"	f
communicationsNameGet	idsCommunications.c	/^void communicationsNameGet(CommunicationsStatePtr cs)$/;"	f
communicationsNameHandlerSet	idsCommunications.c	/^void communicationsNameHandlerSet(CommunicationsStatePtr cs, void *nameHandlerData, NameHandler cb)$/;"	f
communicationsNameSet	idsCommunications.c	/^void communicationsNameSet(CommunicationsStatePtr cs, const char *name, const char *key)$/;"	f
communicationsNeighborList	idsCommunications.c	/^CommunicationsNeighbor *communicationsNeighborList(CommunicationsStatePtr cs)$/;"	f
communicationsNeighborMakeCurrent	packetapi.cpp	/^static CommunicationsNeighbor *communicationsNeighborMakeCurrent(manetNode *us)$/;"	f	file:
communicationsNeighborMarshal	apisupport.c	/^ApiCommand *communicationsNeighborMarshal(const CommunicationsNeighbor *cn)$/;"	f
communicationsNeighborRegister	idsCommunications.c	/^void communicationsNeighborRegister(CommunicationsStatePtr cs, CommunicationsNeighborUpdateProc communicationsNeighborUpdateProc, void *communicationsNeighborUpdateProcData)$/;"	f
communicationsNeighborSearch	idsCommunications.c	/^CommunicationsNeighbor *communicationsNeighborSearch($/;"	f
communicationsNeighborState2Str	idsCommunications.c	/^char const *communicationsNeighborState2Str(CommunicationsNeighborState st)$/;"	f
communicationsNeighborUnmarshal	apisupport.c	/^CommunicationsNeighbor *communicationsNeighborUnmarshal(const ApiCommand *ac)$/;"	f
communicationsNodeAddress	idsCommunications.c	/^ManetAddr communicationsNodeAddress(CommunicationsStatePtr cs)$/;"	f
communicationsNodeMask	idsCommunications.c	/^ManetAddr communicationsNodeMask(CommunicationsStatePtr cs)$/;"	f
communicationsPositionWeightAdd	idsCommunications.c	/^void communicationsPositionWeightAdd(CommunicationsStatePtr cs,const CommunicationsPositionWeight *list)$/;"	f
communicationsPositionWeightGet	idsCommunications.c	/^const CommunicationsPositionWeight *communicationsPositionWeightGet(CommunicationsStatePtr cs)$/;"	f
communicationsPositionWeightInsert	apisupport.c	/^CommunicationsPositionWeight *communicationsPositionWeightInsert(CommunicationsPositionWeight **list,const CommunicationsPositionWeight *entry)$/;"	f
communicationsPositionWeightLoad	apisupport.c	/^void communicationsPositionWeightLoad(char const *weightfile,CommunicationsPositionWeight **list)$/;"	f
communicationsPositionWeightMarshal	apisupport.c	/^ApiCommand *communicationsPositionWeightMarshal(const CommunicationsPositionWeight *cpw)$/;"	f
communicationsPositionWeightRemove	apisupport.c	/^void communicationsPositionWeightRemove(CommunicationsPositionWeight **list,const CommunicationsPositionWeight *entry)$/;"	f
communicationsPositionWeightSearch	idsCommunications.c	/^const CommunicationsPositionWeight *communicationsPositionWeightSearch(CommunicationsStatePtr cs, CommunicationsPositionWeight *position)$/;"	f
communicationsPositionWeightSearchList	idsCommunications.c	/^CommunicationsPositionWeight *communicationsPositionWeightSearchList(CommunicationsPositionWeight *list, const CommunicationsPositionWeight *position)$/;"	f
communicationsPositionWeightSub	idsCommunications.c	/^void communicationsPositionWeightSub(CommunicationsStatePtr cs,CommunicationsPositionWeight *list)$/;"	f
communicationsPositionWeightUnmarshal	apisupport.c	/^CommunicationsPositionWeight *communicationsPositionWeightUnmarshal(const ApiCommand *ac)$/;"	f
communicationsReadReady	idsCommunications.c	/^int communicationsReadReady(CommunicationsState *cs)$/;"	f
communicationsReturnFD	idsCommunications.c	/^int communicationsReturnFD(CommunicationsState *cs)$/;"	f
communicationsStatusRegister	idsCommunications.c	/^void communicationsStatusRegister(CommunicationsStatePtr cs, int period, CommunicationsStatusUpdateProc communicationsStatusUpdateProc, void *communicationsStatusUpdateProcData)$/;"	f
communicationsTagHash	idsCommunications.c	/^int communicationsTagHash(char *str)$/;"	f
communicationsTimevalGet	idsCommunications.c	/^void communicationsTimevalGet(CommunicationsStatePtr cs, struct timeval *tv)$/;"	f
communicationsWatcherColor	idsCommunications.c	/^void communicationsWatcherColor(CommunicationsStatePtr cs, ManetAddr node, unsigned char *color)$/;"	f
communicationsWatcherEdge	idsCommunications.c	/^void communicationsWatcherEdge(CommunicationsStatePtr cs, NodeEdge *edge)$/;"	f
communicationsWatcherEdgeRemove	idsCommunications.c	/^void communicationsWatcherEdgeRemove(CommunicationsStatePtr cs, int bitmap, ManetAddr head, ManetAddr tail, int family, int priority, int tag)$/;"	f
communicationsWatcherFloatingLabel	idsCommunications.c	/^void communicationsWatcherFloatingLabel(CommunicationsStatePtr cs, FloatingLabel *lab)$/;"	f
communicationsWatcherFloatingLabelMarshal	apisupport.c	/^unsigned char *communicationsWatcherFloatingLabelMarshal(unsigned char *hp, const FloatingLabel *lab)$/;"	f
communicationsWatcherFloatingLabelRemove	idsCommunications.c	/^void communicationsWatcherFloatingLabelRemove(CommunicationsStatePtr cs,int bitmap, FloatingLabel *lab)$/;"	f
communicationsWatcherFloatingLabelUnmarshal	apisupport.c	/^unsigned char *communicationsWatcherFloatingLabelUnmarshal(unsigned char *hp, FloatingLabel *lab)$/;"	f
communicationsWatcherLabel	idsCommunications.c	/^void communicationsWatcherLabel(CommunicationsStatePtr cs, NodeLabel *lab)$/;"	f
communicationsWatcherLabelMarshal	apisupport.c	/^unsigned char *communicationsWatcherLabelMarshal(unsigned char *hp, const NodeLabel *lab)$/;"	f
communicationsWatcherLabelRemove	idsCommunications.c	/^void communicationsWatcherLabelRemove(CommunicationsStatePtr cs, int bitmap, NodeLabel *lab)$/;"	f
communicationsWatcherLabelUnmarshal	apisupport.c	/^unsigned char *communicationsWatcherLabelUnmarshal(unsigned char *hp, NodeLabel *lab)$/;"	f
componentsTime	neighborlist.cpp	/^static int componentsTime;		\/* divide by m->curtime for average *\/$/;"	v	file:
compressDistance	watcher.cpp	/^static void compressDistance()$/;"	f	file:
conf	des.h	/^	Config *conf;                \/* config file structure *\/$/;"	m	struct:manet
conf	livenetwork.cpp	/^	Config *conf;$/;"	m	struct:__anon63	file:
configDir	config.c	/^	char configDir[PATH_MAX];$/;"	m	struct:Config	file:
configFree	config.c	/^void configFree(Config *conf)$/;"	f
configGetPathname	config.c	/^int configGetPathname(Config const *conf, const char *path, $/;"	f
configLoad	config.c	/^Config *configLoad(const char *fname)$/;"	f
configSearchDouble	config.c	/^double configSearchDouble(Config const *conf, char const *name)$/;"	f
configSearchInt	config.c	/^int configSearchInt(Config const *conf, char const *name)$/;"	f
configSearchStr	config.c	/^char const *configSearchStr(Config const *conf, char const *name)$/;"	f
configSetDouble	config.c	/^double configSetDouble(Config const *conf, char const *var, double def)$/;"	f
configSetInt	config.c	/^int configSetInt(Config const *conf, char const *var, int def)$/;"	f
confignodeSearch	config.c	/^static ConfigNode *confignodeSearch(ConfigNode *c, char const *name)$/;"	f	file:
constraint	mobility.h	/^	MobilityConstraint *constraint[MOBILITY_MAXCONSTRAINT];   \/* end of list indicated by NULL ptr  *\/$/;"	m	struct:mobilityState
constraintCheck	mobility.cpp	/^static int constraintCheck(manetNode *us)$/;"	f	file:
constraintList	mobility.h	/^	MobilityConstraint *constraintList;$/;"	m	struct:mobilityManetState
controladdr	watcher.h	/^	ManetAddr controladdr;$/;"	m	struct:clusteringState
controlfd	watchermovement.cpp	/^	int controlfd;$/;"	m	struct:__anon55	file:
coordinator	hello.cpp	/^	neighbor *coordinator,*desiredCoordinator;$/;"	m	struct:helloState	file:
coordinator	hello.cpp	/^        ManetAddr coordinator,desiredCoordinator;$/;"	m	struct:__anon59	file:
coordinator	interim2.cpp	/^	ManetAddr coordinator;$/;"	m	struct:clusteringNeighbor	file:
coordinator	interim2.cpp	/^        ManetAddr coordinator,desiredCoordinator;$/;"	m	struct:__anon57	file:
coordinatorFlag	hello.cpp	/^	int coordinatorFlag;$/;"	m	struct:__anon59	file:
coordinatorFlag	hello.cpp	/^	int coordinatorFlag;$/;"	m	struct:helloState	file:
copiesForwarded	amroute.h	/^    int originated, copiesSent, copiesForwarded;$/;"	m	struct:__anon27
copiesSent	amroute.h	/^    int originated, copiesSent, copiesForwarded;$/;"	m	struct:__anon27
copy	transform.h	/^    int (*copy)($/;"	m	struct:Transform
copy	transformNull.c	/^static int copy($/;"	f	file:
copy	transformSign.c	/^static int copy($/;"	f	file:
cost	neighborlist.cpp	/^    int cost;$/;"	m	struct:TREE_STATUS	file:
costTime	neighborlist.cpp	/^static destime costTime;		\/* divide by m->curtime for average *\/$/;"	v	file:
count	routingdetector.c	/^	int count;                        \/* number of expected routes on the manet network (or 0 to disable counting) *\/$/;"	m	struct:DetectorInit	file:
count	routingdetector.c	/^	int count;                        \/* number of expected routes on the manet network (or 0 to disable counting) *\/$/;"	m	struct:detector	file:
create	rng.cc	/^	TclObject* create(int, const char*const*) {$/;"	f	class:RNGClass
createStats	packetstats.cpp	/^struct PacketStats *createStats()$/;"	f
crossProduct	watcher.cpp	/^static void crossProduct(double *c, double a[3], double b[3])$/;"	f	file:
cs	apisupport.h	/^	struct CommunicationsState *cs;   \/* used by the API, to point to its state info  *\/$/;"	m	struct:MessageInfo	typeref:struct:MessageInfo::CommunicationsState
cs	demoaggregator.c	/^    CommunicationsStatePtr cs;$/;"	m	struct:detector	file:
cs	demodetector.c	/^	CommunicationsStatePtr cs;$/;"	m	struct:detector	file:
cs	demoresponder.c	/^	CommunicationsStatePtr cs;$/;"	m	struct:detector	file:
cs	demorewriter.c	/^	CommunicationsStatePtr cs;$/;"	m	struct:detector	file:
cs	demosigningaggregator.c	/^    CommunicationsStatePtr cs;$/;"	m	struct:__anon9	file:
cs	demosigningdetector.c	/^    CommunicationsStatePtr cs;$/;"	m	struct:__anon7	file:
cs	demoverifiedalertreader.c	/^    CommunicationsStatePtr cs;$/;"	m	struct:__anon56	file:
cs	goodwin.cpp	/^	CommunicationsStatePtr cs;$/;"	m	struct:detector	file:
cs	hierarchy2text.cpp	/^    CommunicationsStatePtr cs; $/;"	m	class:Node	file:
cs	idsCommunications-sanitized.h	/^    CommunicationsStatePtr cs;$/;"	m	struct:__anon38
cs	idsCommunications.h	/^    CommunicationsStatePtr cs;$/;"	m	struct:__anon16
cs	pgraphwatcher.c	/^	CommunicationsStatePtr *cs;$/;"	m	struct:detector	file:
cs	positionweight.c	/^	CommunicationsStatePtr cs;$/;"	m	struct:detector	file:
cs	routingdetector.c	/^	CommunicationsStatePtr cs;$/;"	m	struct:detector	file:
cs	watcher.h	/^	CommunicationsState *cs;$/;"	m	struct:clusteringState
curGid	gmcluster.cpp	/^	unsigned short curGid;   	\/\/ current group id. $/;"	m	struct:groupClusterState	file:
curGid	gmcluster.cpp	/^	unsigned short curGid; $/;"	m	struct:groupClusteringNeighbor	file:
curGidSeqno	gmcluster.cpp	/^	unsigned short curGidSeqno; $/;"	m	struct:groupClusterState	file:
curRouteHopCnt	gmcluster.cpp	/^	int curRouteHopCnt;		\/\/ filled in by nodeGetHopAndNbrCount() every routeHopCntComputeInterval seconds. $/;"	m	struct:groupClusterState	file:
curRouteNbrCnt	gmcluster.cpp	/^	int curRouteNbrCnt; 		\/\/ filled in by nodeGetHopAndNbrCount() every routeHopCntComputeInterval seconds.$/;"	m	struct:groupClusterState	file:
curname	watchermovement.cpp	/^	char curname[1024];$/;"	m	struct:__anon55	file:
curpersec	watcher.h	/^	ApiPacketCount curpersec;$/;"	m	struct:clusteringState
currentPositionState	packetapi.cpp	/^	IDSPositionStatus currentPositionState[COORDINATOR_MAXVAL];$/;"	m	struct:PacketApiNodeState	file:
current_port	infrasniff.cpp	/^	unsigned int current_port;  \/* port of the current packet *\/$/;"	m	struct:__anon61	file:
current_proto	infrasniff.cpp	/^	PacketProto current_proto; \/* proto of the current packet *\/$/;"	m	struct:__anon61	file:
curtime	apisupport.h	/^	destime curtime;	\/* time of the last command processed, or some time between then an nextCmdTime if we've done communicationsLogStep() with too short a 'step' time.  *\/$/;"	m	struct:CommunicationsLogState
curtime	des.h	/^	destime starttime,curtime;$/;"	m	struct:manet
curtime	goodwincreate.c	/^destime curtime;$/;"	v
curtime	watcher.cpp	/^static destime curtime = 0, begintime = 0;$/;"	v	file:
cyclic	neighborlist.cpp	/^    int cyclic, asymmetric;$/;"	m	struct:TREE_STATUS	file:
data	amroute.h	/^    packet *data;			\/* data traffic payload *\/$/;"	m	struct:packet_amroute_s
data	des.h	/^	struct dataState *data;               \/* reliable data packet stuff *\/$/;"	m	struct:manetNode	typeref:struct:manetNode::dataState
data	des.h	/^	void *data;$/;"	m	struct:packet
data	des.h	/^	} data;$/;"	m	struct:eventnode	typeref:union:eventnode::__anon46
data	hashtable.h	/^	void *data;$/;"	m	struct:_hashbucket
data	mobility.h	/^	} data;$/;"	m	struct:MobilityConstraint	typeref:union:MobilityConstraint::__anon43
data	transformNull.c	/^    void *data;$/;"	m	struct:NullData	file:
data	untransformNull.c	/^    void *data;$/;"	m	struct:NullData	file:
dataAck	data.cpp	/^static void dataAck(manetNode *us, packet *p)$/;"	f	file:
dataData	data.cpp	/^static void dataData(manetNode *us, packet *p)$/;"	f	file:
dataFailover	data.cpp	/^	int dataFailover;	\/* If true, then when a msg is not acked, try again using flood routing  *\/$/;"	m	struct:dataState	file:
dataHandleCreate	transform.h	/^    TransformDataHandle (*dataHandleCreate)(struct Transform *);$/;"	m	struct:Transform
dataHandleCreate	transformNull.c	/^static TransformDataHandle dataHandleCreate(struct Transform *t)$/;"	f	file:
dataHandleCreate	transformSign.c	/^static TransformDataHandle dataHandleCreate(struct Transform *t)$/;"	f	file:
dataHandleCreate	untransform.h	/^    UntransformDataHandle (*dataHandleCreate)(struct Untransform *);$/;"	m	struct:Untransform
dataHandleCreate	untransformNull.c	/^static UntransformDataHandle dataHandleCreate(struct Untransform *u)$/;"	f	file:
dataHandleCreate	untransformSign.c	/^static UntransformDataHandle dataHandleCreate(struct Untransform *u)$/;"	f	file:
dataHandleDestroy	transform.h	/^    void (*dataHandleDestroy)(TransformDataHandle handle);$/;"	m	struct:Transform
dataHandleDestroy	transformNull.c	/^static void dataHandleDestroy(TransformDataHandle handle)$/;"	f	file:
dataHandleDestroy	transformSign.c	/^static void dataHandleDestroy(TransformDataHandle handle)$/;"	f	file:
dataHandleDestroy	untransform.h	/^    void (*dataHandleDestroy)(UntransformDataHandle handle);$/;"	m	struct:Untransform
dataHandleDestroy	untransformNull.c	/^static void dataHandleDestroy(UntransformDataHandle handle)$/;"	f	file:
dataHandleDestroy	untransformSign.c	/^static void dataHandleDestroy(UntransformDataHandle handle)$/;"	f	file:
dataId	apisupport.h	/^	MessageID dataId;	\/* set by data module, used by the demon.  (recycling data structure)  *\/$/;"	m	struct:MessageInfo
dataInit	data.cpp	/^void dataInit(manetNode *us)$/;"	f
dataInit	packetProtection.cpp	/^void dataInit(manetNode*) { return; }$/;"	f
dataLength	transformNull.c	/^    size_t dataLength;$/;"	m	struct:NullData	file:
dataLength	untransformNull.c	/^    size_t dataLength;$/;"	m	struct:NullData	file:
dataPacketAckMarshal	data.cpp	/^static packet *dataPacketAckMarshal(manetNode *us, InFlight *inf)$/;"	f	file:
dataPacketAckUnmarshal	data.cpp	/^DataPacketAck *dataPacketAckUnmarshal(const packet *p)$/;"	f
dataPacketInsert	data.cpp	/^static InFlight *dataPacketInsert(manetNode *us, packet *p, PacketData *pd)$/;"	f	file:
dataPacketRemove	data.cpp	/^static void dataPacketRemove(manetNode *us, InFlight *d)$/;"	f	file:
dataPacketSearch	data.cpp	/^static InFlight *dataPacketSearch(manetNode *us, ManetAddr src, unsigned int id)$/;"	f	file:
dataRexmit	data.cpp	/^	int dataRexmit;		\/* How long we will wait beteen rexmit attempts *\/$/;"	m	struct:dataState	file:
dataSend	data.cpp	/^void dataSend(manetNode *us, packet *p,DataRoute route, DataAckType ack, unsigned int *id)$/;"	f
dataSendMulti	data.cpp	/^void dataSendMulti(manetNode *us, packet *p, ManetAddr *destinationList, int destinationCount, DataRoute route, DataAckType ack, unsigned int *id)$/;"	f
dataState	data.cpp	/^typedef struct dataState$/;"	s	file:
dataState	data.cpp	/^} dataState;$/;"	t	typeref:struct:dataState	file:
dataTimeout	data.cpp	/^	int dataTimeout;	\/* How long we will try to retransmit a packet *\/$/;"	m	struct:dataState	file:
dataTimeout	data.cpp	/^static void dataTimeout(manetNode *us, void *data)$/;"	f	file:
dataTimeoutEntry	data.cpp	/^	int dataTimeoutEntry;	\/* How long we will remember a specific payload *\/$/;"	m	struct:dataState	file:
dataTimeoutInFlight	data.cpp	/^static void dataTimeoutInFlight(char *key,$/;"	f	file:
dataTraffic	amroute.cpp	/^static amroutePacketType dataTraffic = $/;"	v	file:
datavalid	watcher.h	/^	int datavalid;$/;"	m	struct:clusteringState
debuglist	des.cpp	/^static packet *debuglist=NULL;$/;"	v	file:
debugnext	des.h	/^	struct packet *debugprev,*debugnext;$/;"	m	struct:packet	typeref:struct:packet::
debugprev	des.h	/^	struct packet *debugprev,*debugnext;$/;"	m	struct:packet	typeref:struct:packet::packet
defaultDebugLog	idsCommunications.c	/^static CommunicationsErrorFunction defaultDebugLog = defaultLogFunction;$/;"	v	file:
defaultErrorLog	idsCommunications.c	/^static CommunicationsErrorFunction defaultErrorLog = defaultLogFunction;$/;"	v	file:
defaultLogFunction	idsCommunications.c	/^static void defaultLogFunction(char const *fmt, ...)$/;"	f	file:
defaultMove	mobility.h	/^	MobilityList *defaultMove;$/;"	m	struct:mobilityManetState
defaultWarnLog	idsCommunications.c	/^static CommunicationsErrorFunction defaultWarnLog = defaultLogFunction;$/;"	v	file:
default_	rng.cc	/^RNG* RNG::default_ = NULL;$/;"	m	class:RNG	file:
default_	rng.h	/^	static RNG* default_;$/;"	m	class:RNG
defaultrng	rng.h	/^	inline static RNG* defaultrng() { return (default_); }$/;"	f	class:RNG
deleteFlag	demorewriter.c	/^	int deleteFlag;$/;"	m	struct:detector	file:
deleteNeighbor	neighborlist.cpp	/^void deleteNeighbor(int ntype, manetNode *us, int index)$/;"	f
demonId	apisupport.h	/^	MessageID demonId;	\/* set by the demon *\/$/;"	m	struct:MessageInfo
desGotPacket	des.cpp	/^void desGotPacket(manetNode *us, packet *p)$/;"	f
desireList	interim2.cpp	/^	neighbor **desireList;$/;"	m	struct:clusteringState	file:
desiredCoordinator	hello.cpp	/^	neighbor *coordinator,*desiredCoordinator;$/;"	m	struct:helloState	file:
desiredCoordinator	hello.cpp	/^        ManetAddr coordinator,desiredCoordinator;$/;"	m	struct:__anon59	file:
desiredCoordinator	interim2.cpp	/^	ManetAddr desiredCoordinator;$/;"	m	struct:clusteringNeighbor	file:
desiredCoordinator	interim2.cpp	/^	neighbor *desiredCoordinator;$/;"	m	struct:clusteringState	file:
desiredCoordinator	interim2.cpp	/^        ManetAddr coordinator,desiredCoordinator;$/;"	m	struct:__anon57	file:
dest	apisupport.h	/^	CommunicationsDestination dest;$/;"	m	struct:MessageInfo
destime	des.h	/^typedef long long int destime;  \/\/ epoch milliseconds$/;"	t
destime	idsCommunications-sanitized.h	/^typedef long long int destime;$/;"	t
destime	idsCommunications.h	/^typedef long long int destime;$/;"	t
destinationAck	data.h	/^	DataAck *destinationAck;$/;"	m	struct:DataPacketAck
destinationAck	data.h	/^	DataAck *destinationAck;$/;"	m	struct:PacketData
destinationCount	data.h	/^	int destinationCount;$/;"	m	struct:DataPacketAck
destinationCount	data.h	/^	int destinationCount;$/;"	m	struct:PacketData
destinationList	data.h	/^	ManetAddr *destinationList;$/;"	m	struct:DataPacketAck
destinationList	data.h	/^	ManetAddr *destinationList;$/;"	m	struct:PacketData
destroyStats	packetstats.cpp	/^void destroyStats(struct PacketStats *stats)$/;"	f
desttype	packetapi.h	/^	CommunicationsDestinationType desttype;     \/* current API application routing type.  *\/$/;"	m	struct:__anon41
detector	demoaggregator.c	/^typedef struct detector$/;"	s	file:
detector	demoaggregator.c	/^} detector;$/;"	t	typeref:struct:detector	file:
detector	demodetector.c	/^typedef struct detector$/;"	s	file:
detector	demodetector.c	/^} detector;$/;"	t	typeref:struct:detector	file:
detector	demoresponder.c	/^typedef struct detector$/;"	s	file:
detector	demoresponder.c	/^} detector;$/;"	t	typeref:struct:detector	file:
detector	demorewriter.c	/^typedef struct detector$/;"	s	file:
detector	demorewriter.c	/^} detector;$/;"	t	typeref:struct:detector	file:
detector	goodwin.cpp	/^typedef struct detector$/;"	s	file:
detector	goodwin.cpp	/^} detector;$/;"	t	typeref:struct:detector	file:
detector	pgraphwatcher.c	/^typedef struct detector$/;"	s	file:
detector	pgraphwatcher.c	/^} detector;$/;"	t	typeref:struct:detector	file:
detector	positionweight.c	/^typedef struct detector$/;"	s	file:
detector	positionweight.c	/^} detector;$/;"	t	typeref:struct:detector	file:
detector	routingdetector.c	/^typedef struct detector$/;"	s	file:
detector	routingdetector.c	/^} detector;$/;"	t	typeref:struct:detector	file:
detectorCommsInit	demolib.c	/^CommunicationsStatePtr detectorCommsInit(ManetAddr us, $/;"	f
detectorDestroy	demoaggregator.c	/^static void detectorDestroy(detector *st)$/;"	f	file:
detectorDestroy	demoresponder.c	/^static void detectorDestroy(detector *st)$/;"	f	file:
detectorDirectiveArrive	demoaggregator.c	/^static void detectorDirectiveArrive(void *data,const struct MessageInfo *mi)$/;"	f	file:
detectorHierarchyDump	pgraphwatcher.c	/^static void detectorHierarchyDump(detector *dt)$/;"	f	file:
detectorInit	demoaggregator.c	/^static detector *detectorInit(ManetAddr us, const char *readlog, const char *writelog, CommunicationsMessageDirection direction, unsigned int position, CommunicationsMessageAccess mode, MessageType type)$/;"	f	file:
detectorInit	demodetector.c	/^static detector *detectorInit(ManetAddr us, int reportperiod)$/;"	f	file:
detectorInit	demoresponder.c	/^static detector *detectorInit(ManetAddr us, const char *readlog, const char *writelog, CommunicationsMessageDirection direction, unsigned int position, CommunicationsMessageAccess mode, MessageType type)$/;"	f	file:
detectorInit	demorewriter.c	/^static detector *detectorInit(ManetAddr us)$/;"	f	file:
detectorInit	goodwin.cpp	/^detector *detectorInit(ManetAddr us, int logfd, int watcherMovementEnable)$/;"	f
detectorInit	pgraphwatcher.c	/^static detector *detectorInit(int numnodes, ManetAddr *node)$/;"	f	file:
detectorInit	routingdetector.c	/^static detector *detectorInit(ManetAddr us, DetectorInit *detinit)$/;"	f	file:
detectorMessageArrive	demoaggregator.c	/^static void detectorMessageArrive(void *data,const struct MessageInfo *mi)$/;"	f	file:
detectorMessageArrive	demoresponder.c	/^static void detectorMessageArrive(void *data,const struct MessageInfo *mi)$/;"	f	file:
detectorMessageArrive	demorewriter.c	/^static void detectorMessageArrive(void *data,struct MessageInfo *mi)$/;"	f	file:
detectorMessageStatus	demolib.c	/^void detectorMessageStatus(const struct MessageInfo *mi, void *messageStatusHandlerData,MessageStatus status)$/;"	f
detectorMessageStatus	positionweight.c	/^void detectorMessageStatus(const struct MessageInfo *mi, void *messageStatusHandlerData,MessageStatus status)$/;"	f
detectorNeighborUpdate	demolib.c	/^void detectorNeighborUpdate(void *data, CommunicationsNeighbor *cn)$/;"	f
detectorNeighborUpdate	pgraphwatcher.c	/^static void detectorNeighborUpdate(void *data, CommunicationsNeighbor *cn)$/;"	f	file:
detectorNeighborUpdate	positionweight.c	/^void detectorNeighborUpdate(void *data, CommunicationsNeighbor *cn)$/;"	f
detectorNeighborUpdate	watcher.cpp	/^static void detectorNeighborUpdate(void *data, CommunicationsNeighbor *cn)$/;"	f	file:
detectorParse	demoaggregator.c	/^static void detectorParse(FILE *fd, xmlDocPtr doc)$/;"	f	file:
detectorParse	demoresponder.c	/^static void detectorParse(FILE *fd, xmlDocPtr doc)$/;"	f	file:
detectorParse	demorewriter.c	/^static void detectorParse(FILE *fd, xmlDocPtr doc)$/;"	f	file:
detectorParse	demosigningaggregator.c	/^static void detectorParse(FILE *fd, xmlDocPtr doc)$/;"	f	file:
detectorPositionUpdate	demolib.c	/^void detectorPositionUpdate(void *data, IDSPositionType position, IDSPositionStatus status)$/;"	f
detectorPositionUpdate	goodwintest.c	/^static void detectorPositionUpdate(void *data, IDSPositionType position, IDSPositionStatus status)$/;"	f	file:
detectorPositionUpdate	watcher.cpp	/^static void detectorPositionUpdate(void *data, IDSPositionType pos, IDSPositionStatus stat)$/;"	f	file:
detectorSend	demoaggregator.c	/^static void detectorSend(detector *st)$/;"	f	file:
detectorSend	demodetector.c	/^static void detectorSend(detector *st)$/;"	f	file:
detectorSend	goodwin.cpp	/^static void detectorSend(detector *dt)$/;"	f	file:
detectorSend	pgraphwatcher.c	/^static void detectorSend(detector *st)$/;"	f	file:
detectorSend	routingdetector.c	/^static void detectorSend(detector *st)$/;"	f	file:
detectorStatusUpdate	goodwin.cpp	/^static void detectorStatusUpdate(void *data,ApiStatus *as)$/;"	f	file:
detectorStatusUpdate	watcher.cpp	/^static void detectorStatusUpdate(void *data, ApiStatus *as)$/;"	f	file:
dictionary	apisupport.c	1554;"	d	file:
dictionary	idmef-message.dtd.c	10;"	d	file:
dictionary	idsCommunicationsMessages.h	/^	const void *dictionary;$/;"	m	struct:CommunicationsMessageType
dictionarylen	idsCommunicationsMessages.h	/^	int dictionarylen;$/;"	m	struct:CommunicationsMessageType
direction	apisupport.h	/^	CommunicationsMessageDirection direction;$/;"	m	struct:MessageHandlerRequest
direction	apisupport.h	/^	CommunicationsMessageDirection direction;$/;"	m	struct:MessageTypeNode
direction	transDuo.c	/^    Direction direction;$/;"	m	struct:TransDuo	file:
distance	idsCommunications-sanitized.h	/^    int distance;              \/* the neighbor's distance in hops.  $/;"	m	struct:CommunicationsNeighbor
distance	idsCommunications.h	/^    int distance;              \/* the neighbor's distance in hops.  $/;"	m	struct:CommunicationsNeighbor
dlog	apisupport.h	/^	CommunicationsErrorFunction dlog; \/* debug log *\/$/;"	m	struct:CommunicationsState
doCompression	packetapi.cpp	/^	int doCompression;     \/* if true, we will compress payloads *\/$/;"	m	struct:PacketApiNodeState	file:
do_protection_flag	packetProtection.cpp	/^    int do_protection_flag;$/;"	m	struct:PacketProtection	file:
dptr	transDuo.c	/^typedef struct TransDuo *dptr;$/;"	t	typeref:struct:TransDuo	file:
drawArrow	graphics.cpp	/^void drawArrow(GLdouble x1, GLdouble y1, GLdouble x2,GLdouble y2, GLdouble width)$/;"	f
drawArrow	graphics.h	76;"	d
drawCircle	graphics.cpp	/^void drawCircle( GLdouble x, GLdouble y, GLdouble z, GLdouble radius)$/;"	f
drawCircle	graphics.h	74;"	d
drawDisk	graphics.cpp	/^void drawDisk( GLdouble x, GLdouble y, GLdouble z, GLdouble radius)$/;"	f
drawFrownyCircle	graphics.cpp	/^void drawFrownyCircle(GLdouble x, GLdouble y, GLdouble z, GLdouble radius)$/;"	f
drawGraph	graphics.cpp	/^void drawGraph(manet *m, int *graph,GLdouble scale, int drawlens)$/;"	f
drawGraph	graphics.h	81;"	d
drawHeavyArrow	graphics.cpp	/^void drawHeavyArrow(GLdouble x1, GLdouble y1, GLdouble z1, GLdouble x2, GLdouble y2,GLdouble z2, GLdouble width)$/;"	f
drawHeavyArrow	graphics.h	77;"	d
drawHierarchy	graphics.cpp	/^void drawHierarchy(manet *m,NodeDisplayStatus const *dispStat)$/;"	f
drawHierarchy	graphics.h	85;"	d
drawHierarchy	watcher.cpp	/^static void drawHierarchy(void)$/;"	f	file:
drawHierarchyrecurse	graphics.cpp	/^static int drawHierarchyrecurse($/;"	f	file:
drawManet	watcher.cpp	/^static void drawManet(void)$/;"	f	file:
drawNeighbors	graphics.h	80;"	d
drawNodes	graphics.cpp	/^void drawNodes($/;"	f
drawNodes	graphics.h	82;"	d
drawText	graphics.cpp	/^void drawText( GLdouble x, GLdouble y, GLdouble z, GLdouble scale, char *text)$/;"	f
drawText	graphics.h	75;"	d
drawTextHeight	graphics.cpp	/^GLfloat drawTextHeight(char *text)$/;"	f
drawTextWidth	graphics.cpp	/^GLfloat drawTextWidth(char *text)$/;"	f
drawWrap	graphics.cpp	/^int drawWrap(points p[], int N)$/;"	f
drawWrap	graphics.h	78;"	d
dst	des.h	/^	ManetAddr dst;$/;"	m	struct:packet
dst	interim2.cpp	/^	ManetAddr dst;$/;"	m	struct:__anon58	file:
dst	routing.h	/^	ManetAddr dst;        \/* to get to dest...   *\/$/;"	m	struct:routingNode
dst	routing.h	/^	ManetAddr src,dst;                  \/* src, dst and seqnum are the key  *\/$/;"	m	struct:routingRequest
dst	routing.h	/^	ManetAddr src,dst;     \/* destination on RREQUEST...  *\/$/;"	m	struct:__anon24
dst	routingdetector.c	/^	ManetAddr dst;$/;"	m	struct:Route	file:
dst	testapi.c	/^CommunicationsDestination dst;$/;"	v
dstType	demosigningdetector.c	/^    CommunicationsDestinationType dstType;$/;"	m	struct:__anon7	file:
dummyManetNode	packetProtection.cpp	/^static manetNode dummyManetNode(char const *addrstr)$/;"	f	file:
dummyUs1	packetProtection.cpp	/^static manetNode dummyUs1 = dummyManetNode(ADDR1);$/;"	v	file:
dummyUs2	packetProtection.cpp	/^static manetNode dummyUs2 = dummyManetNode(ADDR2);$/;"	v	file:
dummyUs3	packetProtection.cpp	/^static manetNode dummyUs3 = dummyManetNode(ADDR3);$/;"	v	file:
dummyUs4	packetProtection.cpp	/^static manetNode dummyUs4 = dummyManetNode(ADDR4);$/;"	v	file:
dummyUs5	packetProtection.cpp	/^static manetNode dummyUs5 = dummyManetNode(ADDR5);$/;"	v	file:
dump	demoverifiedalertreader.c	/^static void dump(char const *title, uint8_t const *buf, size_t len)$/;"	f	file:
dump	packetstats.cpp	/^	void dump(FILE *f) const$/;"	f	class:PacketStats
dumpStats	packetstats.cpp	/^void dumpStats(const struct PacketStats *stats, FILE *f)$/;"	f
dupcount	testapi.c	/^int dupcount;		\/* number of duplicate messages to send, for load-testing *\/$/;"	v
dupfile	des.h	/^	char *dupfile;$/;"	m	struct:packet
dupline	des.h	/^	int dupline;$/;"	m	struct:packet
duptime	des.h	/^	destime duptime;$/;"	m	struct:packet
duration	routingdetector.c	/^	int duration;			  \/* Time to run (in seconds) or 0 to run until broken *\/$/;"	m	struct:DetectorInit	file:
duration	routingdetector.c	/^	int duration;			  \/* Time to run (in seconds) or 0 to run until broken *\/$/;"	m	struct:detector	file:
dx	mobility.h	/^	double dx, dy, dz;    \/* current vector  *\/$/;"	m	struct:mobilityState
dy	mobility.h	/^	double dx, dy, dz;    \/* current vector  *\/$/;"	m	struct:mobilityState
dz	mobility.h	/^	double dx, dy, dz;    \/* current vector  *\/$/;"	m	struct:mobilityState
eligability	idsCommunications-sanitized.h	646;"	d
eligability	idsCommunications.h	654;"	d
eligibility	idsCommunications-sanitized.h	/^    IDSPositionStatus eligibility;$/;"	m	struct:IDSPosition
eligibility	idsCommunications.h	/^    IDSPositionStatus eligibility;$/;"	m	struct:IDSPosition
elog	apisupport.h	/^	CommunicationsErrorFunction elog; \/* error log *\/$/;"	m	struct:CommunicationsState
elog	livenetwork.cpp	/^static void elog(char const *format, ...)$/;"	f	file:
elog	packetapi.cpp	/^static void elog(char const *format, ...) $/;"	f	file:
enrouteCHEnable	interim2.cpp	/^	int enrouteCHEnable;$/;"	m	struct:clusteringState	file:
entry	watcher.cpp	/^    int entry;$/;"	m	struct:__anon5	file:
entrytimeout	data.cpp	/^	destime entrytimeout;$/;"	m	struct:InFlight	file:
evaluateTree	neighborlist.cpp	/^STATIC void evaluateTree(manet *m, struct TREE_STATUS *ts)$/;"	f
eventCallback	des.h	/^typedef void eventCallback(struct manetNode *, void *data);$/;"	t
eventFileClose	des.cpp	/^void eventFileClose(manetNode *us, int fd)$/;"	f
eventFileRead	des.cpp	/^eventnode *eventFileRead(manetNode *us, int fd, eventCallback *cd, void *rawptr)$/;"	f
eventFileWrite	des.cpp	/^eventnode *eventFileWrite(manetNode *us, int fd, eventCallback *cd, void *rawptr)$/;"	f
eventbucket	des.h	/^typedef struct eventbucket$/;"	s
eventbucket	des.h	/^} eventbucket;$/;"	t	typeref:struct:eventbucket
eventbucketFree	des.cpp	/^static void eventbucketFree(eventbucket *en)$/;"	f	file:
eventbucketMalloc	des.cpp	/^static eventbucket *eventbucketMalloc(void)$/;"	f	file:
eventbucketfree	des.cpp	/^eventbucket *eventbucketfree=NULL;$/;"	v
eventlist	des.h	/^	eventbucket *eventlist;     \/* list of events to be executed *\/$/;"	m	struct:manet
eventlistfree	des.cpp	/^eventnode *eventlistfree=NULL;$/;"	v
eventnode	des.h	/^typedef struct eventnode$/;"	s
eventnode	des.h	/^} eventnode;$/;"	t	typeref:struct:eventnode
eventnodeDelete	des.cpp	/^void eventnodeDelete(manet *m, eventnode *en)$/;"	f
eventnodeDequeue	des.cpp	/^static  eventnode *eventnodeDequeue(manet *m)$/;"	f	file:
eventnodeEnqueue	des.cpp	/^static void eventnodeEnqueue(manet *m, eventnode *en)$/;"	f	file:
eventnodeFree	des.cpp	/^void eventnodeFree(eventnode *en)$/;"	f
eventnodeHead	des.cpp	/^static eventnode *eventnodeHead(manet *m)$/;"	f	file:
eventnodeMalloc	des.cpp	/^static eventnode *eventnodeMalloc(void)$/;"	f	file:
eventnodeNextPacket	des.cpp	/^eventnode *eventnodeNextPacket(manet *m)$/;"	f
eventnodeNextTimer	des.cpp	/^eventnode *eventnodeNextTimer(manet *m)$/;"	f
eventnodeNumPackets	des.cpp	/^int eventnodeNumPackets(manet *m)$/;"	f
eventnodeWalkReReceive	des.cpp	/^void eventnodeWalkReReceive(manet *m)$/;"	f
exitFlag	livenetwork.cpp	/^	int exitFlag;$/;"	m	struct:__anon63	file:
expandDistance	watcher.cpp	/^static void expandDistance()$/;"	f	file:
expiration	idsCommunications-sanitized.h	/^    destime expiration;    \/* set to 0 to never expire   (Milliseconds)  *\/$/;"	m	struct:FloatingLabel
expiration	idsCommunications-sanitized.h	/^    destime expiration;    \/* set to 0 to never expire   (Milliseconds)  *\/$/;"	m	struct:NodeLabel
expiration	idsCommunications-sanitized.h	/^    destime expiration;    \/* set to 0 to never expire  *\/$/;"	m	struct:NodeEdge
expiration	idsCommunications.h	/^    destime expiration;    \/* set to 0 to never expire   (Milliseconds)  *\/$/;"	m	struct:FloatingLabel
expiration	idsCommunications.h	/^    destime expiration;    \/* set to 0 to never expire   (Milliseconds)  *\/$/;"	m	struct:NodeLabel
expiration	idsCommunications.h	/^    destime expiration;    \/* set to 0 to never expire  *\/$/;"	m	struct:NodeEdge
expiretime	routing.h	/^	destime expiretime;$/;"	m	struct:routingNode
exponential	rng.h	/^	inline double exponential()$/;"	f	class:RNG
exponential	rng.h	/^	inline double exponential(double r)$/;"	f	class:RNG
fact	rng.cc	/^	const double fact = 5.9604644775390625e-8; \/* 1 \/ 2^24 *\/ $/;"	v
failoverList	packetapi.cpp	/^	char const *failoverList;	\/* list of message types to do failover routing on *\/$/;"	m	struct:PacketApiNodeState	file:
fakeCH	watcher.h	/^	neighbor fakeCH;          \/* the us->clusterhead pointer will point to this when we have a CH.  *\/$/;"	m	struct:clusteringState
family	idsCommunications-sanitized.h	/^    int family;$/;"	m	struct:FloatingLabel
family	idsCommunications-sanitized.h	/^    int family;$/;"	m	struct:NodeEdge
family	idsCommunications-sanitized.h	/^    int family;$/;"	m	struct:NodeLabel
family	idsCommunications.h	/^    int family;$/;"	m	struct:FloatingLabel
family	idsCommunications.h	/^    int family;$/;"	m	struct:NodeEdge
family	idsCommunications.h	/^    int family;$/;"	m	struct:NodeLabel
familyBitmap	idsCommunications-sanitized.h	/^    int familyBitmap;$/;"	m	struct:__anon40
familyBitmap	idsCommunications.h	/^    int familyBitmap;$/;"	m	struct:__anon19
fd	apisupport.h	/^	int fd;				\/* file descriptor to demon process *\/$/;"	m	struct:CommunicationsState
fd	apisupport.h	/^	int fd;$/;"	m	struct:CommunicationsLogState
fd	des.h	/^	int fd;				\/* valid only if type == EVENT_READFD or EVENT_WRITEFD *\/$/;"	m	struct:eventnode
fd	goodwinmerge.c	/^	int fd;$/;"	m	struct:__anon8	file:
fd	infrasniff.cpp	/^	FILE *fd;$/;"	m	struct:__anon61	file:
fd	packetapi.cpp	/^	int fd;				\/* FD of TCP session to this client *\/$/;"	m	struct:ApiSession	file:
fdlist	des.h	/^	eventnode *fdlist;        \/* list of file descriptor events *\/$/;"	m	struct:manet
fgcolor	idsCommunications-sanitized.h	/^    unsigned char bgcolor[4],fgcolor[4]; \/* background & foreground colors *\/$/;"	m	struct:FloatingLabel
fgcolor	idsCommunications-sanitized.h	/^    unsigned char bgcolor[4],fgcolor[4]; \/* background & foreground colors *\/$/;"	m	struct:NodeLabel
fgcolor	idsCommunications.h	/^    unsigned char bgcolor[4],fgcolor[4]; \/* background & foreground colors *\/$/;"	m	struct:FloatingLabel
fgcolor	idsCommunications.h	/^    unsigned char bgcolor[4],fgcolor[4]; \/* background & foreground colors *\/$/;"	m	struct:NodeLabel
fileWriteable	packetapi.cpp	/^	int fileWriteable;              \/* If true, then we've already scheduled the FD event for this ApiSession...  *\/$/;"	m	struct:ApiSession	file:
finalMessageStatistics	amroute.cpp	/^STATIC void finalMessageStatistics(void)$/;"	f
finalStatus	data.cpp	/^	DataStatus finalStatus;$/;"	m	struct:InFlight	file:
finalTreeStatistics	neighborlist.cpp	/^void finalTreeStatistics(manet *m)$/;"	f
finaldest	amroute.h	/^    ManetAddr finaldest;$/;"	m	struct:packet_amroute_s
find	hierarchy2text.cpp	/^static bool find(ManetAddr addr,$/;"	f	file:
findCH	bft.cpp	/^static int findCH(manetNode *us)$/;"	f	file:
findNeighborEnRoute	interim2.cpp	/^findNeighborEnRoute(manetNode *us, neighbor* n, $/;"	f	file:
findParent	graphcluster.cpp	/^static int findParent(manetNode *us)$/;"	f	file:
finddeglist	getresults	/^finddeglist()$/;"	f
firstBuild	amroute.cpp	/^static int firstBuild = 1000;$/;"	v	file:
firstLength	bufferPair.c	/^    uint32_t firstLength; \/\/ network byte order$/;"	m	struct:BufferPair	file:
firstStep	des.cpp	/^void firstStep(manet *m, int moduleinit)$/;"	f
first_n	rng.cc	/^RNGTest::first_n(RNG::RNGSources source, long seed, int n)$/;"	f	class:RNGTest
first_n_mil	rng.cc	/^RNGTest::first_n_mil(RNG::RNGSources source, long seed, int n, FILE *outfile)$/;"	f	class:RNGTest
firstheard	des.h	/^        destime firstheard;$/;"	m	struct:neighbor
firsttermrec	graphcluster.cpp	/^	destime lasttreerec,lastinittreesent,firsttermrec;$/;"	m	struct:clusteringState	file:
flag	idsCommunications-sanitized.h	/^    unsigned int flag:1;$/;"	m	struct:__anon37
flags	des.h	/^        unsigned int flags;$/;"	m	struct:neighbor
floatingLabelAdd	floatinglabel.cpp	/^void floatingLabelAdd(FloatingLabel **list, FloatingLabel *lab, destime curtime)$/;"	f
floatingLabelDraw	floatinglabel.cpp	/^void floatingLabelDraw(FloatingLabel **list, NodeDisplayType dispType, NodeDisplayStatus *dispStat, destime curtime)$/;"	f
floatingLabelList	watcher.cpp	/^static FloatingLabel *floatingLabelList = NULL;$/;"	v	file:
floatingLabelNuke	floatinglabel.cpp	/^void floatingLabelNuke(FloatingLabel **g)      \/* remove all edges  *\/$/;"	f
floatingLabelRemove	floatinglabel.cpp	/^void floatingLabelRemove(FloatingLabel **g, int bitmap, FloatingLabel *nw)$/;"	f
floatingLabelRemoveFamily	floatinglabel.cpp	/^void floatingLabelRemoveFamily(FloatingLabel **g,int family)$/;"	f
floatingroot	hello.cpp	/^	int floatingroot;$/;"	m	struct:helloState	file:
floatingrootflag	interim2.cpp	/^	int floatingrootflag;$/;"	m	struct:clusteringState	file:
flood	des.h	/^	struct floodState *flood;             \/* flood routing algorithm stuff *\/$/;"	m	struct:manetNode	typeref:struct:manetNode::floodState
floodEntry	flood.h	/^typedef struct floodEntry$/;"	s
floodEntry	flood.h	/^} floodEntry;$/;"	t	typeref:struct:floodEntry
floodInit	flood.cpp	/^void floodInit(manetNode *us)$/;"	f
floodInit	packetProtection.cpp	/^void floodInit(manetNode*) { return; }$/;"	f
floodPacket	flood.cpp	/^void floodPacket(manetNode *us, packet *p)$/;"	f
floodPacketInsert	flood.cpp	/^static floodEntry *floodPacketInsert(manetNode *us, ManetAddr src, int id)$/;"	f	file:
floodPacketSearch	flood.cpp	/^static floodEntry *floodPacketSearch(manetNode *us, ManetAddr src, int id)$/;"	f	file:
floodSend	flood.cpp	/^void floodSend(manetNode *us, packet *p)$/;"	f
floodState	flood.h	/^typedef struct floodState$/;"	s
floodState	flood.h	/^} floodState;$/;"	t	typeref:struct:floodState
flyonly	mobility.h	/^		struct FlyonlyRect flyonly;$/;"	m	union:MobilityConstraint::__anon43	typeref:struct:MobilityConstraint::__anon43::FlyonlyRect
fname	ut_TransDuo.c	/^static char const *fname = "tranDuoUnitTest.tmp";$/;"	v	file:
fname	ut_transformSign.c	/^static char const *fname = "transformSignUnitTest.tmp";$/;"	v	file:
forwardToNeighbors	amroutesend.cpp	/^void forwardToNeighbors(int ntype, manetNode *us, packet_amroute *pamr,$/;"	f
func	mobility.h	/^	MobilityCallback *func;$/;"	m	struct:__anon44
getAddr	packetProtection.cpp	/^ManetAddr getAddr(char *addr, const char *fname, size_t lineno)$/;"	f
getByteCount	packetstats.cpp	/^unsigned long long getByteCount(const struct PacketStats *stats,$/;"	f
getByteCountTotal	packetstats.cpp	/^unsigned long long getByteCountTotal(const struct PacketStats *stats)$/;"	f
getCounts	packetstats.cpp	/^	void getCounts(PacketProto proto, unsigned int port, $/;"	f	class:PacketStats
getGraphNeighbors	gmclusterTest.cpp	/^void getGraphNeighbors(const int &root, GroupRow &nbrs)$/;"	f
getInformationFromNodes	hierarchy2text.cpp	/^static void getInformationFromNodes(int msec)$/;"	f	file:
getMilliTime	apisupport.c	/^destime getMilliTime(void) $/;"	f
getPacketCount	packetstats.cpp	/^unsigned long long getPacketCount(const struct PacketStats *stats,$/;"	f
getPacketCountTotal	packetstats.cpp	/^unsigned long long getPacketCountTotal(const struct PacketStats *stats)$/;"	f
getPathFromPing	showPath	/^sub getPathFromPing$/;"	s
getShiftAmount	watcher.cpp	/^static void getShiftAmount(GLdouble &x_ret, GLdouble &y_ret)$/;"	f	file:
getTotals	packetstats.cpp	/^	void getTotals(PacketCounts *outCounts)$/;"	f	class:PacketStats
getWidth	graphics.cpp	/^static void getWidth(manet *m, ManetAddr nod, int level, int *levels)$/;"	f	file:
get_state	rng.cc	/^void RNG::get_state (unsigned long seedvalue[6]) const $/;"	f	class:RNG
getheavymachine	runexperiment.pl	/^sub getheavymachine$/;"	s
getlightmachine	runexperiment.pl	/^sub getlightmachine$/;"	s
getmedmachine	runexperiment.pl	/^sub getmedmachine$/;"	s
gid	gmcluster.cpp	/^	unsigned short gid; $/;"	m	struct:gidPacket	file:
gidHeartbeatInterval	gmcluster.cpp	/^	int gidHeartbeatInterval; 	\/\/ how often we send or expect to recv a gid packet. $/;"	m	struct:groupClusterState	file:
gidPacket	gmcluster.cpp	/^typedef struct gidPacket$/;"	s	file:
gidPacket	gmcluster.cpp	/^} gidPacket; $/;"	t	typeref:struct:gidPacket	file:
gidPacketRecv	gmcluster.cpp	/^void gidPacketRecv(manetNode *us, packet *thePacket)$/;"	f
glInit	watcher.cpp	/^static void glInit()$/;"	f	file:
globalAutoCenterNodesFlag	watcher.cpp	/^static int globalAutoCenterNodesFlag = 0; $/;"	v	file:
globalDispStat	watcher.cpp	/^static NodeDisplayStatus globalDispStat;$/;"	v	file:
globalDoMetricsFlag	watcher.cpp	/^static int globalDoMetricsFlag;$/;"	v	file:
globalExitAtEofFlag	watcher.cpp	/^int globalExitAtEofFlag = 0;$/;"	v
globalGoodwin	watcher.cpp	/^static CommunicationsLogStatePtr globalGoodwin;$/;"	v	file:
globalGpsValidFlag	watcher.cpp	/^static int globalGpsValidFlag[MAXNODE];$/;"	v	file:
globalGraph	hierarchy2text.cpp	/^static Graph globalGraph;$/;"	v	file:
globalGraphHierarchy	watcher.cpp	/^static int *globalGraphHierarchy;$/;"	v	file:
globalGraphManet	watcher.cpp	/^static float *globalGraphManet = NULL;$/;"	v	file:
globalGraphScaleManet	watcher.cpp	/^static float globalGraphScaleManet;$/;"	v	file:
globalHierarchyAdj	watcher.cpp	/^    globalHierarchyAdj, $/;"	v	typeref:struct:__anon4	file:
globalHierarchyAdjInit	watcher.cpp	/^    globalHierarchyAdjInit = { 0.0, 0.0, .02, .02, .1, 1.0, 0.0, 0.0, 0.0 };$/;"	v	typeref:struct:__anon4	file:
globalJustKeepSwimming	demosigningaggregator.c	/^static int globalJustKeepSwimming = !0;$/;"	v	file:
globalJustKeepSwimming	demosigningdetector.c	/^static int globalJustKeepSwimming = 1; $/;"	v	file:
globalJustKeepSwimming	demoverifiedalertreader.c	/^static int globalJustKeepSwimming = !0;$/;"	v	file:
globalLastMetricsTick	watcher.cpp	/^static destime globalLastMetricsTick;$/;"	v	file:
globalLastUpdate	hierarchy2text.cpp	/^destime globalLastUpdate = 0;$/;"	v
globalMagic	bufferPair.c	/^static char const * const globalMagic = "BufferPair";$/;"	v	file:
globalMagic	transDuo.c	/^static const char const *globalMagic = "TransDuo";$/;"	v	file:
globalMagic	transformNull.c	/^static const char const *globalMagic = "transformNull";$/;"	v	file:
globalMagic	transformSign.c	/^static const char const *globalMagic = "transformSign";$/;"	v	file:
globalMagic	untransformNull.c	/^static const char const *globalMagic = "untransformNull";$/;"	v	file:
globalMagic	untransformSign.c	/^static const char const *globalMagic = "untransformSign";$/;"	v	file:
globalManager	transDuo.c	/^static mptr_vec globalManager = { 0, 0, 0 };$/;"	v	file:
globalManet	watcher.cpp	/^static manet *globalManet;$/;"	v	file:
globalManetAdj	watcher.cpp	/^} globalManetAdj, $/;"	v	typeref:struct:__anon4	file:
globalManetAdjInit	watcher.cpp	/^    globalManetAdjInit = { 0.0, 0.0, 0.0, .02, .02, .1, 0.0, 0.0, 0.0 }, $/;"	v	typeref:struct:__anon4	file:
globalMarshalOffset	bufferPair.c	/^static size_t const globalMarshalOffset = $/;"	v	file:
globalNeighborColors	watcher.cpp	/^static unsigned char globalNeighborColors[][4] = $/;"	v	file:
globalPopupMenuHandle	watcher.cpp	/^static int globalPopupMenuHandle;$/;"	v	file:
globalReplay	watcher.cpp	/^} globalReplay = { 0, 0, 0, 0, 0, 0 };$/;"	v	typeref:struct:__anon3	file:
globalSelectedNode	watcher.cpp	/^static manetNode *globalSelectedNode = 0;$/;"	v	file:
globalSelectedNodeDeltaX	watcher.cpp	/^static double globalSelectedNodeDeltaX;$/;"	v	file:
globalSelectedNodeDeltaY	watcher.cpp	/^static double globalSelectedNodeDeltaY;$/;"	v	file:
globalSelectedNodeScreenX	watcher.cpp	/^static int globalSelectedNodeScreenX;$/;"	v	file:
globalSelectedNodeScreenY	watcher.cpp	/^static int globalSelectedNodeScreenY;$/;"	v	file:
globalShowPositionFlag	watcher.cpp	/^int globalShowPositionFlag = 0;$/;"	v
globalTransDuoManagerMagic	transDuo.c	/^static const char const *globalTransDuoManagerMagic = "TransDuo Handle";$/;"	v	file:
globalTransformSignTag	transformSign.c	/^static const int globalTransformSignTag = 2;$/;"	v	file:
globalUntransformSignTag	untransformSign.c	/^static const int globalUntransformSignTag = 2;$/;"	v	file:
globalWatcherMovementEnableFlag	watcher.cpp	/^static int globalWatcherMovementEnableFlag = 0;$/;"	v	file:
globalWatcherMovementState	watcher.cpp	/^static void *globalWatcherMovementState;$/;"	v	file:
globalWindowHierarchy	watcher.cpp	/^static int globalWindowHierarchy;$/;"	v	file:
globalWindowManet	watcher.cpp	/^static int globalWindowManet;$/;"	v	file:
global_pp_magic	packetProtection.cpp	/^static char const * const global_pp_magic = "PacketProtection";$/;"	v	file:
gmClusterEnable	interim2.cpp	/^	int gmClusterEnable;$/;"	m	struct:clusteringState	file:
gmClusterTTL	interim2.cpp	/^	int gmClusterTTL;$/;"	m	struct:clusteringState	file:
gmclusterInMyGroup	gmcluster.cpp	/^int gmclusterInMyGroup(const manetNode *us, const neighbor *n)$/;"	f
gmclusterNodeFree	gmcluster.cpp	/^void gmclusterNodeFree(manetNode *n)$/;"	f
gmclusterNodeInit	gmcluster.cpp	/^void gmclusterNodeInit(manetNode *us)$/;"	f
goodTree	neighborlist.cpp	234;"	d	file:
gotAPI	infrasniff.cpp	/^void gotAPI(packet *p)$/;"	f
gotCH	justneighbors.cpp	/^static void gotCH(manetNode *us, int present)$/;"	f	file:
gotCH	testhello.cpp	/^static void gotCH(manetNode *us, int present)$/;"	f	file:
gotCluster	graphcluster.cpp	/^static void gotCluster(manetNode *us, packet *p)$/;"	f	file:
gotDaddy	graphcluster.cpp	/^static void gotDaddy(manetNode *us, packet *p)$/;"	f	file:
gotData	infrasniff.cpp	/^void gotData(packet *p)$/;"	f
gotFlood	infrasniff.cpp	/^void gotFlood(packet *p)$/;"	f
gotHello	gmcluster.cpp	/^void gotHello(manetNode *us, neighbor *ch, neighbor *src, const unsigned char *payload, int payloadLen)$/;"	f
gotHello	interim.cpp	/^void gotHello(manetNode *us, packet *p)$/;"	f
gotHello	justneighbors.cpp	/^static void gotHello(manetNode *us,neighbor *ch, neighbor *src, const unsigned char *payload, int payloadLen)$/;"	f	file:
gotHello	testhello.cpp	/^static void gotHello(manetNode *us, neighbor *ch, neighbor *src, const unsigned char *payload, int payloadLen)$/;"	f	file:
gotLive	infrasniff.cpp	/^void gotLive(const unsigned char *payload, int len, struct ip const * iph)$/;"	f
gotMessage	goodwin.cpp	/^void gotMessage(void *data,const struct MessageInfo *mi)$/;"	f
gotMessage	goodwintest.c	/^static void gotMessage(void *data,const struct MessageInfo *mi)$/;"	f	file:
gotMessageColor	watcher.cpp	/^void gotMessageColor(void *data, const struct MessageInfo *mi)$/;"	f
gotMessageEdge	watcher.cpp	/^void gotMessageEdge(void *data, const struct MessageInfo *mi)$/;"	f
gotMessageEdgeRemove	watcher.cpp	/^void gotMessageEdgeRemove(void *data, const struct MessageInfo *mi)$/;"	f
gotMessageFloatingLabel	watcher.cpp	/^void gotMessageFloatingLabel(void *data, const struct MessageInfo *mi)$/;"	f
gotMessageFloatingLabelRemove	watcher.cpp	/^void gotMessageFloatingLabelRemove(void *data, const struct MessageInfo *mi)$/;"	f
gotMessageGPS	goodwintest.c	/^static void gotMessageGPS(void *data, const struct MessageInfo *mi)$/;"	f	file:
gotMessageGPS	watcher.cpp	/^void gotMessageGPS(void *data, const struct MessageInfo *mi)$/;"	f
gotMessageGraph	watcher.cpp	/^void gotMessageGraph(void *data, const struct MessageInfo *mi)$/;"	f
gotMessageGraphEdge	watcher.cpp	/^void gotMessageGraphEdge(void *data, const struct MessageInfo *mi)$/;"	f
gotMessageLabel	goodwintest.c	/^static void gotMessageLabel(void *data, const struct MessageInfo *mi)$/;"	f	file:
gotMessageLabel	watcher.cpp	/^void gotMessageLabel(void *data, const struct MessageInfo *mi)$/;"	f
gotMessageLabelRemove	watcher.cpp	/^void gotMessageLabelRemove(void *data, const struct MessageInfo *mi)$/;"	f
gotNeighbor	justneighbors.cpp	/^static void gotNeighbor(manetNode *us, neighbor *n,int present)$/;"	f	file:
gotNeighbor	testhello.cpp	/^static void gotNeighbor(manetNode *us, neighbor *n,int present)$/;"	f	file:
gotPacket	infrasniff.cpp	/^void gotPacket(packet *p)$/;"	f
gotTerm	graphcluster.cpp	/^static void gotTerm(manetNode *us, packet *p)$/;"	f	file:
gotTree	bft.cpp	/^static void gotTree(manetNode *us, packet *p)$/;"	f	file:
gotTree	graphcluster.cpp	/^static void gotTree(manetNode *us, packet *p)$/;"	f	file:
gotmsg	testapi.c	/^static void gotmsg(void *data,const struct MessageInfo *mi)$/;"	f	file:
gpsDataFD	mobility.h	/^	FILE *gpsDataFD;  		\/* If you're not GPS mobility, you probably don't want to mess with this. *\/ $/;"	m	struct:mobilityState
gpsPacketArrive	gmcluster.cpp	/^void gpsPacketArrive(manetNode *us, packet *p)$/;"	f
graphAggregationCompute	node.cpp	/^double graphAggregationCompute(manet *m, int *hierarchygraph,int *physicalgraphminpath,int numphysicalpartitions,double *aggregation)$/;"	f
graphAnd	node.cpp	/^void graphAnd(manet *m, int *a, int *b)$/;"	f
graphComputeLevels	node.cpp	/^int *graphComputeLevels(manet *m, int *hierarchygraph)$/;"	f
graphDump	node.cpp	/^void graphDump(manet *m, char *label,int *graph, FILE *fd)$/;"	f
graphMakeBidirectional	node.cpp	/^void graphMakeBidirectional(manet *m, int *graph)$/;"	f
graphMarshal	idsCommunications.c	/^void graphMarshal(const float *graph, int numnodes, unsigned char **buffer, int *len)$/;"	f
graphMinPath	node.cpp	/^void graphMinPath(manet *m, int *distance)$/;"	f
graphMultiply	node.cpp	/^void graphMultiply(manet *m, int *a, int *b)$/;"	f
graphNodeDegree	node.cpp	/^int *graphNodeDegree(int *a, int num)$/;"	f
graphNumPartitions	node.cpp	/^int graphNumPartitions(manet *m,int *g)$/;"	f
graphSend	idsCommunications.c	/^void graphSend(CommunicationsStatePtr cs, float *graph, int numnodes)$/;"	f
graphSendEdge	idsCommunications.c	/^void graphSendEdge(CommunicationsStatePtr cs, CommunicationsGraphEdge *graph, int numnodes)$/;"	f
graphTransitiveClosure	node.cpp	/^void graphTransitiveClosure(manet *m, int *distance)$/;"	f
graphUnmarshal	idsCommunications.c	/^void graphUnmarshal(float *graph, int numnodes, const unsigned char *buffer)$/;"	f
groupBuild	gmcluster.cpp	/^void groupBuild(manetNode *us, void *data)$/;"	f
groupCluster	des.h	/^	struct groupClusterState *groupCluster; \/* Does not belong here really. *\/$/;"	m	struct:manetNode	typeref:struct:manetNode::groupClusterState
groupCluster	des.h	/^	struct groupClusteringNeighbor *groupCluster;$/;"	m	struct:neighbor	typeref:struct:neighbor::groupClusteringNeighbor
groupClusterState	gmcluster.cpp	/^typedef struct groupClusterState$/;"	s	file:
groupClusterState	gmcluster.cpp	/^} groupClusterState;$/;"	t	typeref:struct:groupClusterState	file:
groupClusteringNeighbor	gmcluster.cpp	/^typedef struct groupClusteringNeighbor$/;"	s	file:
groupClusteringNeighbor	gmcluster.cpp	/^} groupClusteringNeighbor;$/;"	t	typeref:struct:groupClusteringNeighbor	file:
groupIdDisplay	gmcluster.cpp	/^void groupIdDisplay(manetNode *us)$/;"	f
groupIdFD	gmcluster.cpp	/^	int groupIdFD; 		\/\/ Used to talk to group displayer, will go away when Tommy fixes API. $/;"	m	struct:groupClusterState	file:
h	transDuo.c	/^            TransformDataHandle h;$/;"	m	struct:TransDuo::__anon21::__anon22	file:
h	transDuo.c	/^            UntransformDataHandle h;$/;"	m	struct:TransDuo::__anon21::__anon23	file:
handleSIGINT	demosigningaggregator.c	/^static void handleSIGINT(int sig)$/;"	f	file:
handleSIGINT	demosigningdetector.c	/^static void handleSIGINT(int sig)$/;"	f	file:
handleSIGINT	demoverifiedalertreader.c	/^static void handleSIGINT(int sig)$/;"	f	file:
handler	apisupport.h	/^        MessageHandler handler;		\/* used in the API to hold which callback to call when this message type is received  *\/$/;"	m	struct:MessageTypeNode
handler	mobility.h	/^	MobilityConstraintCallback *handler;$/;"	m	struct:MobilityConstraint
handler	mobility.h	/^	MobilityMoveCallback *handler;$/;"	m	struct:MobilityMove
handlerData	apisupport.h	/^        void *handlerData;$/;"	m	struct:MessageTypeNode
hash	hashtable.c	/^static ub4 hash(ub1 *k,ub4 length,ub4 initval)$/;"	f	file:
hashbucket	hashtable.h	/^} hashbucket;$/;"	t	typeref:struct:_hashbucket
hashfunc	hashtable.h	/^	hashtablecompare hashfunc;$/;"	m	struct:_hastable
hashmask	hashtable.c	154;"	d	file:
hashsize	hashtable.c	153;"	d	file:
hashtable	hashtable.h	/^} hashtable;$/;"	t	typeref:struct:_hastable
hashtablecompare	hashtable.h	/^typedef int (*hashtablecompare)(char *k, int keylen, int nbuck);$/;"	t
hashtabledelete	hashtable.c	/^void hashtabledelete(hashtable *t,char *key, int keylen)$/;"	f
hashtablefree	hashtable.c	/^void hashtablefree(hashtable *t)$/;"	f
hashtablehash	hashtable.c	/^int hashtablehash(char *k, int keylen, int nbuck)$/;"	f
hashtableinit	hashtable.c	/^hashtable *hashtableinit(int nbucket,hashtablecompare hashfunc)$/;"	f
hashtableinsert	hashtable.c	/^void hashtableinsert(hashtable *t,char *key, int keylen,void *dat)$/;"	f
hashtableitem	hashtable.h	/^typedef void (*hashtableitem)(char *k, void *data);$/;"	t
hashtablesearch	hashtable.c	/^void *hashtablesearch(hashtable *t,char *key,int keylen)$/;"	f
hashtabletraverse	hashtable.c	/^void hashtabletraverse(hashtable *t,hashtableitem itemfunc)$/;"	f
head	idsCommunications-sanitized.h	/^    ManetAddr head, tail;$/;"	m	struct:NodeEdge
head	idsCommunications.h	/^    ManetAddr head, tail;$/;"	m	struct:NodeEdge
heartbeatTimeoutFactor	gmcluster.cpp	/^	int heartbeatTimeoutFactor;     \/\/ factor * interval == when we reset the gid. $/;"	m	struct:groupClusterState	file:
height	mobility.h	/^	double x,y,width,height;$/;"	m	struct:NoflyRect
hello	des.h	/^	struct helloState *hello;$/;"	m	struct:manetNode	typeref:struct:manetNode::helloState
helloCH	hello.h	/^typedef void helloCH(manetNode *us, int present);$/;"	t
helloCallback	hello.cpp	/^	helloHello *helloCallback;$/;"	m	struct:helloState	file:
helloCallback	interim2.cpp	/^	helloHello *helloCallback;$/;"	m	struct:clusteringState	file:
helloCoordinator	des.h	/^	ManetAddr helloCoordinator;         \/* hello module fields  *\/$/;"	m	struct:neighbor
helloCoordinatorFlag	des.h	/^	int helloCoordinatorFlag;$/;"	m	struct:neighbor
helloCount	testhello.cpp	/^	int helloCount;$/;"	m	struct:clusteringState	file:
helloDegree	des.h	/^	int helloDegree;$/;"	m	struct:neighbor
helloDesiredCoordinator	des.h	/^	ManetAddr helloDesiredCoordinator;$/;"	m	struct:neighbor
helloFree	hello.cpp	/^void helloFree(manetNode *us)$/;"	f
helloFree	interim2.cpp	/^static void helloFree(packetHello *p)$/;"	f	file:
helloHello	hello.h	/^typedef void helloHello(manetNode *us,neighbor *ch, neighbor *src, const unsigned char *payload, int payloadLen);$/;"	t
helloInit	hello.cpp	/^void helloInit(manetNode *us, helloNeighbor *neighborCallback, helloCH *chCallback, helloHello *helloCallback)$/;"	f
helloMarshal	hello.cpp	/^static packet *helloMarshal(manetNode *us, packetHello *hp)$/;"	f	file:
helloMarshal	interim.cpp	/^static packet *helloMarshal(manetNode *us, packet_hello *p)$/;"	f	file:
helloMarshal	interim2.cpp	/^static packet *helloMarshal(manetNode *us, packetHello *p)$/;"	f	file:
helloNeighbor	hello.h	/^typedef void helloNeighbor(manetNode *us, neighbor *n,int present);$/;"	t
helloOptionsMarshal	interim2.cpp	/^static unsigned int helloOptionsMarshal(manetNode *us, const packetHello *p,$/;"	f	file:
helloOptionsUnmarshal	interim2.cpp	/^static int helloOptionsUnmarshal(manetNode *us, packetHello *p,$/;"	f	file:
helloPacket	bft.cpp	/^static void helloPacket(manetNode *us, packet *p)$/;"	f	file:
helloPacket	graphcluster.cpp	/^static void helloPacket(manetNode *us, packet *p)$/;"	f	file:
helloPacket	hello.cpp	/^void helloPacket(manetNode *us, packet *p)$/;"	f
helloPacketData	gmcluster.cpp	/^	unsigned char helloPacketData[HELLOGPSDATALEN + HELLOGIDDATALEN];  \/\/ lat=4, lon=4, alt=4, timestamp=(4*2), gid=2. $/;"	m	struct:groupClusterState	file:
helloPayload	interim2.cpp	/^	unsigned char *helloPayload; \/* extra data to insert in HELLOs *\/$/;"	m	struct:__anon57	file:
helloPayload	interim2.cpp	/^	unsigned char *helloPayload;$/;"	m	struct:clusteringState	file:
helloPayload	testhello.cpp	/^	char helloPayload[128];$/;"	m	struct:clusteringState	file:
helloPayloadLen	interim2.cpp	/^	int helloPayloadLen;$/;"	m	struct:__anon57	file:
helloPayloadLen	interim2.cpp	/^	int helloPayloadLen;$/;"	m	struct:clusteringState	file:
helloPayloadMalloced	interim2.cpp	/^	int helloPayloadMalloced;    \/* if nonzero, payload should be freed *\/$/;"	m	struct:__anon57	file:
helloPayloadSet	hello.cpp	/^void helloPayloadSet(manetNode *us, unsigned char *payload, int payloadLen)$/;"	f
helloRec	interim2.cpp	/^static void helloRec(manetNode *us, packet *p)$/;"	f	file:
helloSend	bft.cpp	/^static void helloSend(manetNode *us, void *data)$/;"	f	file:
helloSend	graphcluster.cpp	/^static void helloSend(manetNode *us,void *data)$/;"	f	file:
helloSend	hello.cpp	/^static void helloSend(manetNode *us, void *data)$/;"	f	file:
helloSend	interim2.cpp	/^static void helloSend(manetNode *us, void *data)$/;"	f	file:
helloState	hello.cpp	/^typedef struct helloState$/;"	s	file:
helloState	hello.cpp	/^} helloState;$/;"	t	typeref:struct:helloState	file:
helloTimeout	bft.cpp	/^static void helloTimeout(manetNode *us, void *data)$/;"	f	file:
helloTimeout	graphcluster.cpp	/^void helloTimeout(manetNode *us,void *data)$/;"	f
helloTimeout	hello.cpp	/^static void helloTimeout(manetNode *us,void *data)$/;"	f	file:
helloTimeout	interim2.cpp	/^static void helloTimeout(manetNode *us, void *data)$/;"	f	file:
helloUnmarshal	hello.cpp	/^static packetHello *helloUnmarshal(packet *p)$/;"	f	file:
helloUnmarshal	interim.cpp	/^static packet_hello *helloUnmarshal(packet *np)$/;"	f	file:
helloUnmarshal	interim2.cpp	/^static packetHello *helloUnmarshal(manetNode *us, packet *np)$/;"	f	file:
hellocount	interim.cpp	/^	int hellocount[MAXLEVEL];              \/* number of HELLOs we've sent  *\/$/;"	m	struct:clusteringState	file:
helloseqnum	hello.cpp	/^	int helloseqnum;$/;"	m	struct:helloState	file:
hellosequencenum	bft.h	/^	int hellosequencenum;$/;"	m	struct:clusteringState
hellosequencenum	graphcluster.cpp	/^	int hellosequencenum;$/;"	m	struct:clusteringState	file:
hellosequencenum	interim.cpp	/^	int hellosequencenum;$/;"	m	struct:clusteringState	file:
hexpayload	testapi.c	/^int hexpayload;		\/* if set, dump payload in hex instead of ASCII  *\/$/;"	v
hierarchyWindowInit	watcher.cpp	/^static void hierarchyWindowInit()$/;"	f	file:
hierarchygraph	des.h	/^	int *hierarchygraph;    \/* if not NULL, then this is valid, otherwise compute from linklayer graph.  *\/$/;"	m	struct:manet
hopCountNum	interim2.cpp	/^	int hopCountNum;$/;"	m	struct:clusteringNeighbor	file:
hopCountPos	interim2.cpp	/^	int hopCountPos;$/;"	m	struct:clusteringNeighbor	file:
hopCountWindow	interim2.cpp	/^	int *hopCountWindow;$/;"	m	struct:clusteringNeighbor	file:
hopCountWindowSize	interim2.cpp	/^	int hopCountWindowSize;$/;"	m	struct:clusteringState	file:
hopcount	des.h	/^	int hopcount;  \/* inited to 0, incremented by forwarding code *\/$/;"	m	struct:packet
hopcount	des.h	/^	int hopcount;$/;"	m	struct:neighbor
hopcount	routing.h	/^	int hopcount;$/;"	m	struct:routingRequest
hops	routing.h	/^	ManetAddr hops[40];$/;"	m	struct:__anon24
hopsSinceLastSent	amroute.h	/^    int hopsSinceLastSent;$/;"	m	struct:packet_amroute_s
hopsSinceLastSent	amroute.h	/^    long long int hopsSinceOrig, hopsSinceLastSent;$/;"	m	struct:__anon26
hopsSinceOrig	amroute.h	/^    int hopsSinceOrig;$/;"	m	struct:packet_amroute_s
hopsSinceOrig	amroute.h	/^    long long int hopsSinceOrig, hopsSinceLastSent;$/;"	m	struct:__anon26
host	apisupport.h	/^	ManetAddr host;			\/* Address that we connect to the demon with *\/$/;"	m	struct:CommunicationsState
id	data.cpp	/^	int id;$/;"	m	struct:InFlightKey	file:
id	data.h	/^	unsigned int id;        \/* assigned by data module.   *\/$/;"	m	struct:PacketData
id	data.h	/^	unsigned int id;$/;"	m	struct:DataPacketAck
id	data.h	/^	unsigned int id;$/;"	m	struct:PacketDataAck
id	flood.h	/^	int id;$/;"	m	struct:floodEntry
id	flood.h	/^	int id;$/;"	m	struct:packetFlood
id	testtraffic.h	/^        int id;$/;"	m	struct:__anon10
idmefPrint	idmefPrint.c	/^void idmefPrint(FILE *fil, xmlDocPtr messagedoc)$/;"	f
idsPosition2Str	idsCommunications.c	/^char const *idsPosition2Str(IDSPositionType position)$/;"	f
idsPositionCheck	packetapi.cpp	/^static void idsPositionCheck(manetNode *us,void *data)$/;"	f	file:
idsPositionCurrent	idsCommunications.c	/^IDSPosition *idsPositionCurrent(CommunicationsStatePtr cs)$/;"	f
idsPositionDelete	apisupport.c	/^void idsPositionDelete(IDSPosition **list, IDSPositionType position)$/;"	f
idsPositionInsert	apisupport.c	/^IDSPosition *idsPositionInsert(IDSPosition **list, IDSPositionType position, IDSPositionStatus eligibility, IDSPositionUpdateProc update, void *data)$/;"	f
idsPositionMarshal	apisupport.c	/^ApiCommand *idsPositionMarshal(IDSPositionType position,IDSPositionStatus positionstatus)$/;"	f
idsPositionRegister	idsCommunications.c	/^int idsPositionRegister($/;"	f
idsPositionSearch	apisupport.c	/^IDSPosition *idsPositionSearch(IDSPosition **list,IDSPositionType position)$/;"	f
idsPositionSend	packetapi.cpp	/^static void idsPositionSend(manetNode *us, IDSPositionType position,IDSPositionStatus stat)$/;"	f	file:
idsPositionStatus2Str	idsCommunications.c	/^char const *idsPositionStatus2Str(IDSPositionStatus idsPositionStatus)$/;"	f
idsPositionUnmarshal	apisupport.c	/^void idsPositionUnmarshal(const ApiCommand *ac,IDSPositionType *position, IDSPositionStatus *positionstatus)$/;"	f
iface	routingdetector.c	/^	char *iface;$/;"	m	struct:DetectorInit	file:
iface	routingdetector.c	/^	char *iface;$/;"	m	struct:detector	file:
iface	routingdetector.c	/^	char iface[16];$/;"	m	struct:Route	file:
ignored	amroute.h	/^    amroutePacketTypeStats received, ignored;$/;"	m	struct:__anon27
inbound_packet_filter	tsm_v4_TOJ.pl	/^sub inbound_packet_filter {$/;"	s
inc_prec_	rng.h	/^	bool anti_, inc_prec_; $/;"	m	class:RNG
includesNeighbor	neighborlist.cpp	/^int includesNeighbor(int ntype, manetNode *us, int index)$/;"	f
increased_precis	rng.cc	/^void RNG::increased_precis (bool incp) $/;"	f	class:RNG
incrementTypeStats	amroute.cpp	/^STATIC void incrementTypeStats(const packet_amroute *pamr, destime curtime,$/;"	f
index	des.h	/^	int index;        \/* our index in the manet array.  *\/$/;"	m	struct:manetNode
inflight	apisupport.h	/^	int inflight;           \/* some node(s) may have inflight messages that need to be failed *\/$/;"	m	struct:CommunicationsLogState
inflight	apisupport.h	/^	struct MessageInfo *inflight;				\/* list of outgoing messages which we are awaiting ACKs for *\/$/;"	m	struct:CommunicationsState	typeref:struct:CommunicationsState::MessageInfo
inflight	data.cpp	/^	hashtable *inflight;		\/* list of data packets which have been sent, but not ACKed   *\/$/;"	m	struct:dataState	file:
inflight	packetapi.cpp	/^	MessageInfo *inflight;		\/* list of MI's for messages sent by this client, which are transmitted and awaiting ACKs  *\/$/;"	m	struct:ApiSession	file:
init	rng.cc	/^void RNG::init()$/;"	f	class:RNG
init	tealabcontrol.c	/^static state *init(int steptime, int stepstart, int stepend, int run, char *tag)$/;"	f	file:
initAMRoute	amroute.h	/^    int initAMRoute;$/;"	m	struct:clusteringState
initNodes	hierarchy2text.cpp	/^static bool initNodes(char const *prog, Config *conf)$/;"	f	file:
initflag	apisupport.h	/^	int initflag;						\/* set after the init ApiCommand has been received.  *\/$/;"	m	struct:CommunicationsState
initflag	hello.cpp	/^	int initflag;$/;"	m	struct:helloState	file:
intCommunicationsInit	idsCommunications.c	/^static CommunicationsState *intCommunicationsInit(ManetAddr host)$/;"	f	file:
intDataSend	data.cpp	/^static void intDataSend(manetNode *us, packet *p,DataRoute routetype, int origflag)$/;"	f	file:
intDataSendData	data.cpp	/^static void intDataSendData(manetNode *us, InFlight *inf, int origflag)$/;"	f	file:
intListLoad	mobility.cpp	/^static int *intListLoad(Config *conf, char *var)$/;"	f	file:
intListSearch	mobility.cpp	/^static int intListSearch(int *list, int key)$/;"	f	file:
intRouteSend	routing.cpp	/^static void intRouteSend(manetNode *us, packet *p)$/;"	f	file:
interim2PayloadCallbackSet	interim2.cpp	/^void interim2PayloadCallbackSet(manetNode *us, helloHello *helloCallback)$/;"	f
interim2PayloadSet	interim2.cpp	/^void interim2PayloadSet(manetNode *us, unsigned char *payload, int payloadLen)$/;"	f
invert4x4	graphics.cpp	/^void invert4x4(GLdouble dst[16], GLdouble const src[16])$/;"	f
ipPacketGot	infrasniff.cpp	/^void ipPacketGot(const struct pcap_pkthdr *pheader, const unsigned char *etherpkt)$/;"	f
isNeighbor	amroute.h	/^    int isNeighbor[NEIGHBORTYPES];$/;"	m	struct:__anon28
isNeighborhood	hierarchy2text.cpp	/^    bool isNeighborhood;$/;"	m	class:Node	file:
isRegional	hierarchy2text.cpp	/^    bool isRegional;$/;"	m	class:Node	file:
isRoot	hierarchy2text.cpp	/^    bool isRoot;$/;"	m	class:Node	file:
isRootGroup	hierarchy2text.cpp	/^    bool isRootGroup;$/;"	m	class:Node	file:
isRootGroupEligible	interim2.cpp	/^static int isRootGroupEligible(manetNode *us, ManetAddr addr)$/;"	f	file:
isdec	mallocreadline.h	/^static inline int isdec(char const *buf)$/;"	f
ishex	mallocreadline.h	/^static inline int ishex(char const *buf)$/;"	f
iteratekids	testapi.c	/^int iteratekids;	\/* if true, walk through all the children, and send them each a msg  *\/$/;"	v
joinAck	amroute.cpp	/^static amroutePacketType joinAck = $/;"	v	file:
joinAckReceived	amroute.h	/^    int joinAckReceived;$/;"	m	struct:clusteringState
joinAckWait	amroute.cpp	/^static int joinAckWait = 500;$/;"	v	file:
joinNak	amroute.cpp	/^static amroutePacketType joinNak =$/;"	v	file:
joinReq	amroute.cpp	/^static amroutePacketType joinReq = $/;"	v	file:
joinReqInterval	amroute.cpp	/^static int joinReqInterval = 5000;$/;"	v	file:
key	hashtable.h	/^	char *key;$/;"	m	struct:_hashbucket
key	idsCommunications-sanitized.h	/^    char *key;              \/* This client's key  *\/$/;"	m	struct:ApiName
key	idsCommunications.h	/^    char *key;              \/* This client's key  *\/$/;"	m	struct:ApiName
key	transformSign.c	/^    rsa_private_key key;$/;"	m	struct:SignTransformData	file:
key	untransformSign.c	/^    rsa_public_key key;$/;"	m	struct:peer_entry	file:
key	ut_BufferPair.c	/^static char const *key = $/;"	v	file:
key	ut_TransDuo.c	/^static char const *key[] = $/;"	v	file:
key1	ut_transformSign.c	/^static char const *key1 = $/;"	v	file:
key2	ut_transformSign.c	/^static char const *key2 = $/;"	v	file:
key3	ut_transformSign.c	/^static char const *key3 = $/;"	v	file:
keylen	hashtable.h	/^	int keylen;$/;"	m	struct:_hashbucket
keystr	packetProtection.cpp	/^static char const *keystr =$/;"	v	file:
labelClockError	watcher.h	/^	NodeLabel *labelClockError;   \/* our label for the clock error indication  *\/$/;"	m	struct:clusteringState
labelHead	idsCommunications-sanitized.h	/^    NodeLabel labelHead, labelMiddle, labelTail;$/;"	m	struct:NodeEdge
labelHead	idsCommunications.h	/^    NodeLabel labelHead, labelMiddle, labelTail;$/;"	m	struct:NodeEdge
labelList	des.h	/^	NodeLabel *labelList;    \/* labels which have been applied to this node *\/$/;"	m	struct:manetNode
labelMiddle	idsCommunications-sanitized.h	/^    NodeLabel labelHead, labelMiddle, labelTail;$/;"	m	struct:NodeEdge
labelMiddle	idsCommunications.h	/^    NodeLabel labelHead, labelMiddle, labelTail;$/;"	m	struct:NodeEdge
labelTail	idsCommunications-sanitized.h	/^    NodeLabel labelHead, labelMiddle, labelTail;$/;"	m	struct:NodeEdge
labelTail	idsCommunications.h	/^    NodeLabel labelHead, labelMiddle, labelTail;$/;"	m	struct:NodeEdge
labelsClear	watcher.cpp	/^static void labelsClear(manet *m)$/;"	f	file:
lastDesiredTime	interim2.cpp	/^	destime lastDesiredTime;$/;"	m	struct:clusteringState	file:
lastEventTime	apisupport.h	/^	destime lastEventTime;					\/* time of last received ApiCommand *\/$/;"	m	struct:CommunicationsState
lastGidHeartbeat	gmcluster.cpp	/^	time_t lastGidHeartbeat; 	\/\/ last time we heard or sent a gid packet. $/;"	m	struct:groupClusterState	file:
lastOpenAttempt	hierarchy2text.cpp	/^    destime lastOpenAttempt;$/;"	m	class:Node	file:
lastPromotionTime	interim2.cpp	/^	destime lastPromotionTime;$/;"	m	struct:clusteringState	file:
lastSendTime	amroute.h	/^    destime lastSendTime;$/;"	m	struct:packet_amroute_s
lastSeqNoJoinReq	amroute.h	/^    int lastSeqNoJoinReq;		\/* received *\/$/;"	m	struct:__anon28
lastSeqNoTreeCreate	amroute.h	/^    int lastSeqNoTreeCreate;		\/* received *\/$/;"	m	struct:__anon28
lastStep	des.cpp	/^void lastStep(manet *m)$/;"	f
lastTreeCreate	amroute.h	/^    destime lastTreeCreate;		\/* sent or received *\/$/;"	m	struct:clusteringState
lastcluster	graphcluster.cpp	/^	destime lastcluster;     \/* Time last cluster packet was sent.   *\/$/;"	m	struct:clusteringState	file:
lastdesiredtime	hello.cpp	/^	destime lastdesiredtime;$/;"	m	struct:helloState	file:
lastheard	des.h	/^        destime lastheard;$/;"	m	struct:neighbor
lastheard	flood.h	/^	floodEntry lastheard[FLOODMAXLASTHEARD];$/;"	m	struct:floodState
lastinittreesent	graphcluster.cpp	/^	destime lasttreerec,lastinittreesent,firsttermrec;$/;"	m	struct:clusteringState	file:
lastopen	watcher.h	/^	destime lastopen;           \/* timestamp from watcher CPU   *\/$/;"	m	struct:clusteringState
lastsender	amroute.h	/^    ManetAddr lastsender;$/;"	m	struct:packet_amroute_s
lastsequencenum	interim2.cpp	/^	int lastsequencenum;$/;"	m	struct:clusteringNeighbor	file:
lastterm	graphcluster.cpp	/^	destime lastterm;$/;"	m	struct:clusteringState	file:
lasttime	watcher.h	/^	long long int lasttime;      \/* timestamp from node CPU *\/$/;"	m	struct:clusteringState
lasttimewatcher	watcher.h	/^	long long int lasttimewatcher;   \/* watcher CPU timestamp of when the lasttime timestamp was observed.  *\/$/;"	m	struct:clusteringState
lasttreerec	bft.h	/^	destime lasttreerec,lasttreesent;$/;"	m	struct:clusteringState
lasttreerec	graphcluster.cpp	/^	destime lasttreerec,lastinittreesent,firsttermrec;$/;"	m	struct:clusteringState	file:
lasttreesent	bft.h	/^	destime lasttreerec,lasttreesent;$/;"	m	struct:clusteringState
lat	watcherGPS.h	/^	double lat, lon, alt;$/;"	m	struct:WatcherGPS
leafscale	interim2.cpp	/^	int leafscale;$/;"	m	struct:clusteringState	file:
leaves	hierarchy2text.cpp	/^static vector<graph_traits<Graph>::vertex_descriptor> leaves()$/;"	f	file:
len	apisupport.h	/^	size_t len;$/;"	m	struct:ApiCommand
len	data.h	/^	int len;                \/* length of the marshaled packetData.  filled in by packetDataUnmarshal.  *\/$/;"	m	struct:PacketData
len	des.h	/^	int len;       \/* size of buffer pointed to by data *\/$/;"	m	struct:packet
length	routing.h	/^	int length;      \/* length of route, for recognizing the shortest one...  *\/$/;"	m	struct:routingNode
level	bft.cpp	/^	int level;$/;"	m	struct:__anon60	file:
level	bft.cpp	/^	int level;$/;"	m	struct:clusteringNeighbor	file:
level	des.h	/^	int level;			\/* which level we're at in the hierarchy  *\/$/;"	m	struct:manetNode
level	des.h	/^	int level;$/;"	m	struct:neighbor
level	graphcluster.cpp	/^	int level;$/;"	m	struct:clusteringNeighbor	file:
level	graphcluster.cpp	/^        int level;$/;"	m	struct:__anon49	file:
level	hierarchy2text.cpp	/^    int level;$/;"	m	class:Node	file:
level	idsCommunications-sanitized.h	/^    int level;$/;"	m	struct:ApiStatus
level	idsCommunications.h	/^    int level;$/;"	m	struct:ApiStatus
level	interim2.cpp	/^	int level;$/;"	m	struct:__anon57	file:
level	interim2.cpp	/^	int level;$/;"	m	struct:clusteringNeighbor	file:
level	simulation.h	/^	int level;                     \/* hierarchy level  *\/$/;"	m	struct:__anon31
lineParse	goodwincreate.c	/^static ApiCommand *lineParse(char *line)$/;"	f	file:
lineScale	idsCommunications-sanitized.h	/^    float lineScale;$/;"	m	struct:__anon40
linklayergraph	des.h	/^	int *linklayergraph;$/;"	m	struct:manet
linkup	apisupport.h	/^	int linkup;			\/* true if we have current telemetry.  (separate from fd for playback support) *\/$/;"	m	struct:CommunicationsState
list	config.c	/^	ConfigNode *list;$/;"	m	struct:Config	file:
list	graphcluster.cpp	/^	ManetAddr list[MAXKIDS];     \/* first subtreesize entrys are the kids.  rest are the neighbors  *\/$/;"	m	struct:__anon50	file:
listEvaluate	interim2.cpp	/^static neighbor *listEvaluate(manetNode *us, neighbor *list[], int len)$/;"	f	file:
listsearch	interim2.cpp	/^static neighbor *listsearch(neighbor *list[], int len, ManetAddr key)$/;"	f	file:
loadDataAndEdges	hierarchy2text.cpp	/^static void loadDataAndEdges()$/;"	f	file:
loadTransformed	transDuo.c	/^static int loadTransformed($/;"	f	file:
loadkey	packetProtection.cpp	/^static int loadkey($/;"	f	file:
loadkeys	packetProtection.cpp	/^static int loadkeys($/;"	f	file:
localGroup	gmcluster.cpp	/^	unsigned char localGroup[MAX_GM_NODES\/8]; \/\/ nbrs who are LET acceptable$/;"	m	struct:groupClusterState	file:
localaddr	livenetwork.cpp	/^	ManetAddr localaddr;	\/* our manet address, for putting in the src field for outgoing packets *\/$/;"	m	struct:__anon63	file:
localaddr	tealabcontrol.c	/^	unsigned int localaddr,localbcast;$/;"	m	struct:__anon1	file:
localbcast	livenetwork.cpp	/^	ManetAddr localbcast[MAXINTERFACE];	\/* manet address, for putting in the src field for outgoing broadcast packets *\/$/;"	m	struct:__anon63	file:
localbcast	tealabcontrol.c	/^	unsigned int localaddr,localbcast;$/;"	m	struct:__anon1	file:
localbcastmask	livenetwork.cpp	/^	ManetAddr localbcastmask[MAXINTERFACE];$/;"	m	struct:__anon63	file:
localid	apisupport.h	/^	ManetAddr localid;		\/* our manet address (generally not the same as host) *\/$/;"	m	struct:CommunicationsState
localid	apisupport.h	/^	ManetAddr localid;	\/* this node's manet addr  *\/$/;"	m	struct:ApiInit
localid	goodwincreate.c	/^ManetAddr  localid=NODE_BROADCAST;$/;"	v
localmask	apisupport.h	/^	ManetAddr localmask;		\/* manet network netmask *\/$/;"	m	struct:CommunicationsState
localmask	goodwincreate.c	/^ManetAddr  localmask=0;$/;"	v
localmask	livenetwork.cpp	/^	ManetAddr localmask;	\/* manet network netmask  *\/$/;"	m	struct:__anon63	file:
lock	idsCommunications-sanitized.h	/^    unsigned int lock;		\/* after applying new state, lock in position *\/$/;"	m	struct:__anon38
lock	idsCommunications.h	/^    unsigned int lock;		\/* after applying new state, lock in position *\/$/;"	m	struct:__anon16
locked	interim2.cpp	/^	int locked;             \/* parent, root, and rootgroup state locked *\/$/;"	m	struct:clusteringState	file:
logFD	apisupport.h	/^	int logFD;						\/* File to log apiCommands to *\/$/;"	m	struct:CommunicationsState
logFD	goodwin.cpp	/^	int logFD;$/;"	m	struct:detector	file:
logLocalGroup	gmcluster.cpp	/^void logLocalGroup(manetNode *us, ostringstream &logStr)$/;"	f
logOnly	demosigningaggregator.c	/^    int logOnly;$/;"	m	struct:__anon9	file:
logicalCore	amroute.h	/^    ManetAddr logicalCore;$/;"	m	struct:clusteringState
lognormal	rng.h	/^	inline double lognormal(double avg, double std) { $/;"	f	class:RNG
lon	watcherGPS.h	/^	double lat, lon, alt;$/;"	m	struct:WatcherGPS
loseTreeConnectivity	amroute.cpp	/^STATIC void loseTreeConnectivity(manetNode *us)$/;"	f
lossMode	main.cpp	/^	manetLossMode lossMode;$/;"	m	struct:ManetRFModelState	file:
lossPER	main.cpp	/^	double lossPER;$/;"	m	struct:ManetRFModelState	file:
lostroutecolor	routingdetector.c	/^	unsigned char lostroutecolor[4];$/;"	m	struct:DetectorInit	file:
lostroutecolor	routingdetector.c	/^	unsigned char lostroutecolor[4];$/;"	m	struct:detector	file:
m	demosigningaggregator.c	/^    struct TransDuoManager *m;$/;"	m	struct:__anon9	typeref:struct:__anon9::TransDuoManager	file:
m	demosigningdetector.c	/^    struct TransDuoManager *m;$/;"	m	struct:__anon7	typeref:struct:__anon7::TransDuoManager	file:
m	ut_BufferPair.c	/^static struct TransDuoManager *m = 0;$/;"	v	typeref:struct:TransDuoManager	file:
m	ut_TransDuo.c	/^static struct TransDuoManager *m = 0;$/;"	v	typeref:struct:TransDuoManager	file:
m1	rng.cc	/^	const double m1 = 4294967087.0; $/;"	v
m2	rng.cc	/^	const double m2 = 4294944443.0; $/;"	v
magic	bufferPair.c	/^    char const * magic;$/;"	m	struct:BufferPair	file:
magic	packetProtection.cpp	/^    char const *magic;$/;"	m	struct:PacketProtection	file:
magic	transDuo.c	/^    const char const *magic;$/;"	m	struct:TransDuo	file:
magic	transDuo.c	/^    const char const *magic;$/;"	m	struct:TransDuoManager	file:
magic	transformNull.c	/^    const char const *magic;$/;"	m	struct:NullData	file:
magic	transformNull.c	/^    const char const *magic;$/;"	m	struct:NullTransformData	file:
magic	transformSign.c	/^    const char const *magic;$/;"	m	struct:SignData	file:
magic	transformSign.c	/^    const char const *magic;$/;"	m	struct:SignTransformData	file:
magic	untransformNull.c	/^    const char const *magic;$/;"	m	struct:NullData	file:
magic	untransformNull.c	/^    const char const *magic;$/;"	m	struct:NullUntransformData	file:
magic	untransformSign.c	/^    const char const *magic;$/;"	m	struct:SignData	file:
magic	untransformSign.c	/^    const char const *magic;$/;"	m	struct:SignUntransformData	file:
main	demoaggregator.c	/^int main(int argc, char *argv[])$/;"	f
main	demodetector.c	/^int main(int argc, char *argv[])$/;"	f
main	demoresponder.c	/^int main(int argc, char *argv[])$/;"	f
main	demorewriter.c	/^int main(int argc, char *argv[])$/;"	f
main	demosigningaggregator.c	/^int main(int argc, char *argv[])$/;"	f
main	demosigningdetector.c	/^int main(int argc, char *argv[])$/;"	f
main	demoverifiedalertreader.c	/^int main(int argc, char *argv[])$/;"	f
main	edgetest.c	/^int main(int argc, char *argv[])$/;"	f
main	floatinglabeltest.c	/^int main(int argc, char *argv[])$/;"	f
main	glancer.c	/^int main(int argc, char *argv[])$/;"	f
main	gmclusterTest.cpp	/^int main()$/;"	f
main	goodwin.cpp	/^int main(int argc, char *argv[])$/;"	f
main	goodwincreate.c	/^int main(int argc, char *argv[])$/;"	f
main	goodwinmerge.c	/^int main(int argc, char *argv[])$/;"	f
main	goodwintest.c	/^int main(int argc, char *argv[])$/;"	f
main	hierarchy2text.cpp	/^int main(int argc, char **argv)$/;"	f
main	infrasniff.cpp	/^int main(int argc, char *argv[])$/;"	f
main	labeltest.c	/^int main(int argc, char *argv[])$/;"	f
main	livenetwork.cpp	/^int main(int argc, char *argv[])$/;"	f
main	main.cpp	/^int main(int argc, char **argv)$/;"	f
main	packetProtection.cpp	/^int main(int argc, char *argv[])$/;"	f
main	pgraphwatcher.c	/^int main(int argc, char *argv[])$/;"	f
main	positionweight.c	/^int main(int argc, char *argv[])$/;"	f
main	rng.cc	/^int main() { RNGTest test; test.verbose(); }$/;"	f
main	routingdetector.c	/^int main(int argc, char *argv[])$/;"	f
main	statetest.c	/^int main(int argc, char *argv[])$/;"	f
main	tealabcontrol.c	/^int main(int argc, char *argv[])$/;"	f
main	test.c	/^int main(int argc, char **argv)$/;"	f
main	testapi.c	/^int main(int argc, char *argv[])$/;"	f
main	watcher.cpp	/^int main(int argc, char **argv)$/;"	f
mallocfile	des.h	/^	char *mallocfile;$/;"	m	struct:packet
mallocline	des.h	/^	int mallocline;$/;"	m	struct:packet
mallocreadfirsttag	mallocreadline.h	/^static inline char *mallocreadfirsttag(FILE *fp, char const *tag)$/;"	f
mallocreadline	mallocreadline.h	/^static inline char *mallocreadline(FILE *fp)$/;"	f
mallocreadnexthex	mallocreadline.h	/^static inline char *mallocreadnexthex(FILE *fp)$/;"	f
mallocreadnextnonblank	mallocreadline.h	/^static inline char *mallocreadnextnonblank(FILE *fp)$/;"	f
mallocreadnexttag	mallocreadline.h	/^static inline char *mallocreadnexttag(FILE *fp, char const *tag)$/;"	f
malloctime	des.h	/^	destime malloctime;$/;"	m	struct:packet
manager	transDuo.c	/^    struct TransDuoManager *manager;$/;"	m	struct:TransDuo	typeref:struct:TransDuo::TransDuoManager	file:
manet	des.h	/^	struct manet *manet;           \/* manet to which this node belongs.  used for IO, and breaking abstraction (for metrics) *\/$/;"	m	struct:manetNode	typeref:struct:manetNode::manet
manet	des.h	/^typedef struct manet$/;"	s
manet	des.h	/^} manet;$/;"	t	typeref:struct:manet
manetAddr2Str	idsCommunications.c	/^char const *manetAddr2Str(ManetAddr x)$/;"	f
manetAvailability	node.cpp	/^double manetAvailability(manet *m)$/;"	f
manetDraw	graphics.cpp	/^void manetDraw(manet *m)$/;"	f
manetDraw	graphics.h	86;"	d
manetGetHierarchyGraph	node.cpp	/^int *manetGetHierarchyGraph(manet *m)$/;"	f
manetGetHierarchyLevels	node.cpp	/^int *manetGetHierarchyLevels(manet *m)$/;"	f
manetGetNeighborGraph	node.cpp	/^int *manetGetNeighborGraph(manet *m)$/;"	f
manetGetNodeNum	node.cpp	/^int manetGetNodeNum(manet *m, ManetAddr addr)$/;"	f
manetGetPhysicalGraph	node.cpp	/^int *manetGetPhysicalGraph(manet *m)$/;"	f
manetIOCheck	des.cpp	/^void manetIOCheck(manet *m)$/;"	f
manetInit	des.cpp	/^manet *manetInit(Config *conf,long long int starttime)$/;"	f
manetLossMode	main.cpp	/^} manetLossMode;$/;"	t	typeref:enum:__anon54	file:
manetNode	des.h	/^typedef struct manetNode$/;"	s
manetNode	des.h	/^} manetNode;$/;"	t	typeref:struct:manetNode
manetNodeSearchAddress	node.cpp	/^manetNode *manetNodeSearchAddress(manet *m, ManetAddr addr)$/;"	f
manetPacketHandlerSet	des.cpp	/^void manetPacketHandlerSet(manetNode *us, int type, ManetPacketCallback *cb)$/;"	f
manetRFModelDrop	main.cpp	/^int manetRFModelDrop(manet *m, packet *p)$/;"	f
manetRFModelInit	main.cpp	/^ManetRFModelState *manetRFModelInit(manet *m)$/;"	f
manetUpdateLinklayer	des.cpp	/^static void manetUpdateLinklayer(manet *m)$/;"	f	file:
manetWindowInit	watcher.cpp	/^static void manetWindowInit(void)$/;"	f	file:
manetaddr	routingdetector.c	/^	ManetAddr manetaddr;$/;"	m	struct:detector	file:
manetnetmask	routingdetector.c	/^	ManetAddr manetnetmask;$/;"	m	struct:detector	file:
manetnetwork	routingdetector.c	/^	ManetAddr manetnetwork;$/;"	m	struct:detector	file:
mask	routingdetector.c	/^	ManetAddr mask;$/;"	m	struct:Route	file:
matchNptr	transformNull.c	/^static int matchNptr(nptr const *ptr, void *check)$/;"	f	file:
matchNptr	transformSign.c	/^static int matchNptr(sptr const *ptr, void *check)$/;"	f	file:
matchNptr	untransformNull.c	/^static int matchNptr(nptr const *ptr, void *check)$/;"	f	file:
matchNptr	untransformSign.c	/^static int matchNptr(sptr const *ptr, void *check)$/;"	f	file:
matchPeerAddr	untransformSign.c	/^static int matchPeerAddr(peer_entry const *ptr, void *peer_addr)$/;"	f	file:
matchesTag	transDuo.c	/^static int matchesTag(uptr const *ptr, void *matchesDat)$/;"	f	file:
matchesTransDuo	transDuo.c	/^static int matchesTransDuo(dptr const *ptr, void *matchesDat)$/;"	f	file:
matchesTransDuoManager	transDuo.c	/^static int matchesTransDuoManager(mptr const *ptr, void *matchesDat)$/;"	f	file:
matrix	gmclusterTest.cpp	/^GroupMatrix matrix; $/;"	v
maxQueueLen	packetapi.cpp	/^	int maxQueueLen;	\/* max number of apiCommands to enqueue, before killing off the client *\/$/;"	m	struct:PacketApiNodeState	file:
maxRectangle	watcher.cpp	/^static void maxRectangle($/;"	f	file:
maxTTL	amroute.cpp	/^static int maxTTL = 5;$/;"	v	file:
maxTTL	interim.cpp	/^	int maxTTL;$/;"	m	struct:clusteringState	file:
maxTTL	interim2.cpp	/^	int maxTTL;          \/* config parameter, read from conf file in nodeInit() *\/$/;"	m	struct:clusteringState	file:
maxsamples	metric.h	/^	int maxsamples;$/;"	m	struct:__anon53
maxx	mobility.h	/^	double maxx, maxy;$/;"	m	struct:mobilityManetState
maxx	mobility.h	/^	double minx,miny,maxx,maxy;$/;"	m	struct:FlyonlyRect
maxy	mobility.h	/^	double maxx, maxy;$/;"	m	struct:mobilityManetState
maxy	mobility.h	/^	double minx,miny,maxx,maxy;$/;"	m	struct:FlyonlyRect
menuCallback	watcher.cpp	/^static void menuCallback(int val)$/;"	f	file:
menuEntry	watcher.cpp	/^} menuEntry;$/;"	t	typeref:struct:__anon5	file:
menuLayerTogglingEntryAdd	watcher.cpp	/^static menuEntry *menuLayerTogglingEntryAdd(char *layerLabel, int num, int bit)$/;"	f	file:
menuList	watcher.cpp	/^menuEntry *menuList[32];$/;"	v
menuToggle	watcher.cpp	/^static void menuToggle(menuEntry **meArray, int val)$/;"	f	file:
menuUpdate	watcher.cpp	/^static void menuUpdate(menuEntry **meArray)$/;"	f	file:
messageHandlerApiSession	packetapi.cpp	/^static void messageHandlerApiSession(void *messageHandlerData, const struct MessageInfo * mi)$/;"	f	file:
messageHandlerRequestHandle	packetapi.cpp	/^static MessageTypeNode *messageHandlerRequestHandle(manetNode *us, ApiSession *as, MessageHandlerRequest *mhr)$/;"	f	file:
messageHandlerRequestMarshal	apisupport.c	/^ApiCommand *messageHandlerRequestMarshal($/;"	f
messageHandlerRequestUnmarshal	apisupport.c	/^MessageHandlerRequest *messageHandlerRequestUnmarshal(const ApiCommand *ac)$/;"	f
messageHandlerSet	idsCommunications.c	/^int messageHandlerSet($/;"	f
messageId	demosigningaggregator.c	/^static int messageId = 0;$/;"	v	file:
messageInfoCommunicationsStateGet	idsCommunications.c	/^CommunicationsStatePtr messageInfoCommunicationsStateGet(const MessageInfo *messageInfo)$/;"	f
messageInfoCreate	idsCommunications.c	/^MessageInfoPtr messageInfoCreate($/;"	f
messageInfoDestinationGet	idsCommunications.c	/^CommunicationsDestination messageInfoDestinationGet(const struct MessageInfo *messageInfo)$/;"	f
messageInfoDestroy	idsCommunications.c	/^void messageInfoDestroy(MessageInfo *mi)$/;"	f
messageInfoInsert	idsCommunications.c	/^static void messageInfoInsert(MessageInfo *mi)$/;"	f	file:
messageInfoInsert	packetapi.cpp	/^static void messageInfoInsert(ApiSession *as, MessageInfo *mi)$/;"	f	file:
messageInfoInvokeCallbackAndDestroy	idsCommunications.c	/^static void messageInfoInvokeCallbackAndDestroy(MessageInfo *mi,$/;"	f	file:
messageInfoMarshal	apisupport.c	/^ApiCommand *messageInfoMarshal(const MessageInfo *mi)$/;"	f
messageInfoOriginatorGet	idsCommunications.c	/^ManetAddr messageInfoOriginatorGet(const struct MessageInfo *messageInfo)$/;"	f
messageInfoPayloadGet	idsCommunications.c	/^xmlDocPtr messageInfoPayloadGet(const struct MessageInfo *messageInfo)$/;"	f
messageInfoPayloadSet	idsCommunications.c	/^void messageInfoPayloadSet(MessageInfoPtr messageInfo, const xmlDoc *payload)$/;"	f
messageInfoRawPayloadGet	idsCommunications.c	/^void *messageInfoRawPayloadGet(const struct MessageInfo *messageInfo)$/;"	f
messageInfoRawPayloadLenGet	idsCommunications.c	/^size_t messageInfoRawPayloadLenGet(const struct MessageInfo *messageInfo)$/;"	f
messageInfoRawPayloadSet	idsCommunications.c	/^void messageInfoRawPayloadSet(MessageInfoPtr messageInfo,void *payload, int len)$/;"	f
messageInfoRemove	idsCommunications.c	/^static MessageInfo *messageInfoRemove(CommunicationsState *cs,$/;"	f	file:
messageInfoRemove	packetapi.cpp	/^static void messageInfoRemove(ApiSession *as,MessageInfo *mi)$/;"	f	file:
messageInfoSearch	packetapi.cpp	/^static void messageInfoSearch(PacketApiNodeState *st, MessageID dataId, MessageInfo **m, ApiSession **a)$/;"	f	file:
messageInfoSend	idsCommunications.c	/^void messageInfoSend(MessageInfoPtr messageInfo)$/;"	f
messageInfoTypeGet	idsCommunications.c	/^MessageType messageInfoTypeGet(const struct MessageInfo *messageInfo)$/;"	f
messageInfoUnmarshal	apisupport.c	/^MessageInfoPtr messageInfoUnmarshal(ApiCommand *ac)$/;"	f
messageNextChain	packetapi.cpp	/^static void messageNextChain(manetNode *us, ApiCommandType ac, MessageInfo *newmi)$/;"	f	file:
messageNextChainEnqueue	packetapi.cpp	/^MessageTypeNode *messageNextChainEnqueue(MessageTypeNode *mt, MessageInfo *mi)$/;"	f
messageType2Str	idsCommunications.c	/^char const *messageType2Str(MessageType messageType)$/;"	f
messageTypeChainDelete	packetapi.cpp	/^void messageTypeChainDelete(MessageTypeNode **list, MessageHandlerRequest *mhr, ApiSession *api)$/;"	f
messageTypeChainInsert	packetapi.cpp	/^MessageTypeNode *messageTypeChainInsert(MessageTypeNode **list, MessageHandlerRequest *mhr, ApiSession *api)$/;"	f
messageTypeHandlerDelete	apisupport.c	/^void messageTypeHandlerDelete(MessageTypeNode **list, MessageType typ)$/;"	f
messageTypeHandlerInsert	apisupport.c	/^MessageTypeNode *messageTypeHandlerInsert($/;"	f
messageTypeHandlerSearch	apisupport.c	/^MessageTypeNode *messageTypeHandlerSearch(MessageTypeNode **list, MessageType typ)$/;"	f
messageTypeList	apisupport.c	/^static CommunicationsMessageType messageTypeList[]=$/;"	v	file:
messageid	demoaggregator.c	/^static int messageid=0;$/;"	v	file:
messagesAcked	idsCommunications-sanitized.h	/^    int messagesSent, messagesAcked, messagesRec, messagesUnacked;$/;"	m	struct:ApiName
messagesAcked	idsCommunications.h	/^    int messagesSent, messagesAcked, messagesRec, messagesUnacked;$/;"	m	struct:ApiName
messagesRec	idsCommunications-sanitized.h	/^    int messagesSent, messagesAcked, messagesRec, messagesUnacked;$/;"	m	struct:ApiName
messagesRec	idsCommunications.h	/^    int messagesSent, messagesAcked, messagesRec, messagesUnacked;$/;"	m	struct:ApiName
messagesSent	idsCommunications-sanitized.h	/^    int messagesSent, messagesAcked, messagesRec, messagesUnacked;$/;"	m	struct:ApiName
messagesSent	idsCommunications.h	/^    int messagesSent, messagesAcked, messagesRec, messagesUnacked;$/;"	m	struct:ApiName
messagesUnacked	idsCommunications-sanitized.h	/^    int messagesSent, messagesAcked, messagesRec, messagesUnacked;$/;"	m	struct:ApiName
messagesUnacked	idsCommunications.h	/^    int messagesSent, messagesAcked, messagesRec, messagesUnacked;$/;"	m	struct:ApiName
metric	metric.h	/^} metric;$/;"	t	typeref:struct:__anon53
metricClear	metric.c	/^void metricClear(metric *m)$/;"	f
metricCount	metric.c	/^int metricCount(metric *m)$/;"	f
metricCreate	metric.c	/^metric *metricCreate(void)$/;"	f
metricDump	metric.c	/^void metricDump(metric *m, char *label, FILE *fil)$/;"	f
metricFree	metric.c	/^void metricFree(metric *m)$/;"	f
metricMax	metric.c	/^double metricMax(metric *m)$/;"	f
metricMean	metric.c	/^double metricMean(metric *m)$/;"	f
metricMin	metric.c	/^double metricMin(metric *m)$/;"	f
metricStdDev	metric.c	/^double metricStdDev(metric *m)$/;"	f
metricTotal	metric.c	/^double metricTotal(metric *m)$/;"	f
metricWrite	metric.c	/^void metricWrite(metric *m, double val)$/;"	f
minPriority	idsCommunications-sanitized.h	/^    int minPriority;$/;"	m	struct:__anon40
minPriority	idsCommunications.h	/^    int minPriority;$/;"	m	struct:__anon19
minSequentialCount	interim2.cpp	/^	int minSequentialCount;$/;"	m	struct:clusteringState	file:
minx	mobility.h	/^	double minx,miny,maxx,maxy;$/;"	m	struct:FlyonlyRect
miny	mobility.h	/^	double minx,miny,maxx,maxy;$/;"	m	struct:FlyonlyRect
mix	hashtable.c	182;"	d	file:
mobility	des.h	/^	struct mobilityManetState *mobility;$/;"	m	struct:manet	typeref:struct:manet::mobilityManetState
mobility	des.h	/^	struct mobilityState *mobility;$/;"	m	struct:manetNode	typeref:struct:manetNode::mobilityState
mobilityConstraintFlyonly	mobility.cpp	/^static int mobilityConstraintFlyonly(manetNode *us, MobilityConstraint *con)$/;"	f	file:
mobilityConstraintInit	mobility.cpp	/^static void mobilityConstraintInit(manetNode *us)$/;"	f	file:
mobilityConstraintLoad	mobility.cpp	/^static MobilityConstraint *mobilityConstraintLoad(Config *conf)$/;"	f	file:
mobilityConstraintNofly	mobility.cpp	/^static int mobilityConstraintNofly(manetNode *us, MobilityConstraint *con)$/;"	f	file:
mobilityConstraintRepel	mobility.cpp	/^static int mobilityConstraintRepel(manetNode *us, MobilityConstraint *con)$/;"	f	file:
mobilityInit	mobility.cpp	/^void mobilityInit(manetNode *us)$/;"	f
mobilityManetState	mobility.h	/^typedef struct mobilityManetState$/;"	s
mobilityManetState	mobility.h	/^} mobilityManetState;$/;"	t	typeref:struct:mobilityManetState
mobilityState	mobility.h	/^typedef struct mobilityState$/;"	s
mobilityState	mobility.h	/^} mobilityState;$/;"	t	typeref:struct:mobilityState
mobilityTick	mobility.cpp	/^static void mobilityTick(manetNode *us)$/;"	f	file:
moblist	mobility.cpp	/^static MobilityList moblist[]={$/;"	v	file:
mode	bft.h	/^        int mode;$/;"	m	struct:clusteringState
monochromeMode	idsCommunications-sanitized.h	/^    int monochromeMode;$/;"	m	struct:__anon40
monochromeMode	idsCommunications.h	/^    int monochromeMode;$/;"	m	struct:__anon19
mouth	routingdetector.c	/^	ManetAddr mouth[2];$/;"	m	struct:DetectorInit	file:
mouthnum	routingdetector.c	/^	int mouthnum;$/;"	m	struct:DetectorInit	file:
mptr	transDuo.c	/^typedef struct TransDuoManager *mptr;$/;"	t	typeref:struct:TransDuoManager	file:
mread	apisupport.c	/^mread(int fd, void *vptr, size_t n)$/;"	f	file:
myDetectorPositionUpdate	demoaggregator.c	/^static void myDetectorPositionUpdate(void *data, IDSPositionType position, IDSPositionStatus status)$/;"	f	file:
myDetectorPositionUpdate	demoresponder.c	/^static void myDetectorPositionUpdate(void *data, IDSPositionType position, IDSPositionStatus status)$/;"	f	file:
myDetectorPositionUpdate	demorewriter.c	/^static void myDetectorPositionUpdate(void *data, IDSPositionType position, IDSPositionStatus status)$/;"	f	file:
myDetectorPositionUpdate	demosigningaggregator.c	/^static void myDetectorPositionUpdate(void *data, IDSPositionType position, IDSPositionStatus status)$/;"	f	file:
my_inet_pton	packetProtection.cpp	/^static int my_inet_pton(int af, const char *src, void *dst)$/;"	f	file:
n	amroute.h	/^    int n;$/;"	m	struct:__anon26
nNeighbors	amroute.h	/^    int nNeighbors[NEIGHBORTYPES];$/;"	m	struct:clusteringState
nTreeCreateNak	amroute.h	/^    int nTreeCreateNak;			\/* number received *\/$/;"	m	struct:__anon28
nailedroot	interim2.cpp	/^	int nailedroot;$/;"	m	struct:clusteringState	file:
name	amroute.h	/^    char name[20];$/;"	m	struct:__anon27
name	apisupport.h	/^	ApiName *name;						\/* if client has set its name, this is it.  otherwise NULL *\/$/;"	m	struct:CommunicationsState
name	config.c	/^	char *name;$/;"	m	struct:ConfigNode	file:
name	idsCommunications-sanitized.h	/^    char *name;             \/* This client's name  *\/$/;"	m	struct:ApiName
name	idsCommunications.h	/^    char *name;             \/* This client's name  *\/$/;"	m	struct:ApiName
name	mobility.h	/^	char *name;$/;"	m	struct:__anon44
name	packetapi.cpp	/^	ApiName *name;			\/* name and key of this client, if set (NULL otherwise)  *\/$/;"	m	struct:ApiSession	file:
nameHandler	apisupport.h	/^	NameHandler nameHandler;	$/;"	m	struct:CommunicationsState
nameHandler	glancer.c	/^static void nameHandler(void *nameHandlerData, const struct ApiName * list)$/;"	f	file:
nameHandlerData	apisupport.h	/^	void *nameHandlerData;$/;"	m	struct:CommunicationsState
name_	rng.h	/^	char name_[100]; $/;"	m	class:RNG
nbuck	hashtable.h	/^	int nbuck;$/;"	m	struct:_hastable
ncomponents	neighborlist.cpp	/^    int ncomponents;$/;"	m	struct:TREE_STATUS	file:
needupdate	watcher.h	/^	int needupdate;$/;"	m	struct:clusteringState
neighbor	des.h	/^typedef struct neighbor$/;"	s
neighbor	des.h	/^} neighbor;$/;"	t	typeref:struct:neighbor
neighborCallback	hello.cpp	/^	helloNeighbor *neighborCallback;$/;"	m	struct:helloState	file:
neighborCheck	packetapi.cpp	/^static void neighborCheck(manetNode *us, void *data)$/;"	f	file:
neighborCompare	interim2.cpp	/^static int neighborCompare(const void *bp,const void *ap)$/;"	f	file:
neighborCount	node.cpp	/^int neighborCount(manetNode *us, int level)$/;"	f
neighborDelete	node.cpp	/^void neighborDelete(manetNode *us, neighbor *n)$/;"	f
neighborFree	node.cpp	/^static void neighborFree(manetNode *us, neighbor *n)$/;"	f	file:
neighborHandler	apisupport.h	/^	CommunicationsNeighborUpdateProc neighborHandler;	\/* callback for neighbor events *\/$/;"	m	struct:CommunicationsState
neighborHandlerData	apisupport.h	/^	void *neighborHandlerData;$/;"	m	struct:CommunicationsState
neighborInsert	node.cpp	/^neighbor *neighborInsert(manetNode *us, int addr, int level)$/;"	f
neighborList	apisupport.h	/^	CommunicationsNeighbor *neighborList;			\/* list of neighbors.  updated using neighbor events.  *\/$/;"	m	struct:CommunicationsState
neighborList	packetapi.cpp	/^	CommunicationsNeighbor *neighborList;$/;"	m	struct:PacketApiNodeState	file:
neighborList	packetapi.cpp	/^static ApiCommand *neighborList(PacketApiNodeState *st)$/;"	f	file:
neighborNuke	node.cpp	/^void neighborNuke(manetNode *us)$/;"	f
neighborSearch	node.cpp	/^neighbor *neighborSearch(manetNode *us, ManetAddr addr,int level)$/;"	f
neighborStr	interim2.cpp	/^static char *neighborStr(char *buf, size_t buflen, neighbor *n)$/;"	f	file:
neighborTime	amroute.h	/^    destime neighborTime[NEIGHBORTYPES];$/;"	m	struct:__anon28
neighborUpdate	goodwin.cpp	/^static void neighborUpdate(void *data, CommunicationsNeighbor *cn)$/;"	f	file:
neighborUpdate	hierarchy2text.cpp	/^void Node::neighborUpdate(void *data, CommunicationsNeighbor *cn)$/;"	f	class:Node
neighborUpdate	routingdetector.c	/^static void neighborUpdate($/;"	f	file:
neighborcolors	graphics.cpp	/^static GLfloat neighborcolors[][4] = $/;"	v	file:
neighborcolorsDark	graphics.cpp	/^static GLfloat neighborcolorsDark[][4] = $/;"	v	file:
neighborcolorsFade	graphics.cpp	/^static GLfloat neighborcolorsFade[][4] = $/;"	v	file:
neighborlist	des.h	/^	neighbor *neighborlist;$/;"	m	struct:manetNode
neighborlist	watcher.h	/^	CommunicationsNeighbor *neighborlist;$/;"	m	struct:clusteringState
netmask	apisupport.h	/^	ManetAddr netmask;	\/* netmask of the manet network *\/$/;"	m	struct:ApiInit
netmask	des.h	/^	ManetAddr addr, bcastaddr, netmask;   \/* our address *\/$/;"	m	struct:manetNode
newNeighbor	interim2.cpp	/^static neighbor* newNeighbor(manetNode *us, ManetAddr addr)$/;"	f	file:
next	apisupport.h	/^	struct ApiCommand *next;$/;"	m	struct:ApiCommand	typeref:struct:ApiCommand::ApiCommand
next	apisupport.h	/^	struct MessageInfo *next;$/;"	m	struct:MessageInfo	typeref:struct:MessageInfo::MessageInfo
next	config.c	/^	struct ConfigNode *next;$/;"	m	struct:ConfigNode	typeref:struct:ConfigNode::ConfigNode	file:
next	des.h	/^	struct eventbucket *next;$/;"	m	struct:eventbucket	typeref:struct:eventbucket::eventbucket
next	des.h	/^	struct eventnode *next;$/;"	m	struct:eventnode	typeref:struct:eventnode::eventnode
next	des.h	/^	struct packet *next;	\/* Caller: don't modify these *\/$/;"	m	struct:packet	typeref:struct:packet::packet
next	des.h	/^        struct neighbor *next;$/;"	m	struct:neighbor	typeref:struct:neighbor::neighbor
next	goodwin.cpp	/^	struct detector *next;$/;"	m	struct:detector	typeref:struct:detector::detector	file:
next	hashtable.h	/^	struct _hashbucket *next;$/;"	m	struct:_hashbucket	typeref:struct:_hashbucket::_hashbucket
next	idsCommunications-sanitized.h	/^    struct ApiName *next;$/;"	m	struct:ApiName	typeref:struct:ApiName::ApiName
next	idsCommunications-sanitized.h	/^    struct CommunicationsNeighbor *next; \/* next pointer for the linked list *\/$/;"	m	struct:CommunicationsNeighbor	typeref:struct:CommunicationsNeighbor::CommunicationsNeighbor
next	idsCommunications-sanitized.h	/^    struct CommunicationsPositionWeight *next;$/;"	m	struct:CommunicationsPositionWeight	typeref:struct:CommunicationsPositionWeight::CommunicationsPositionWeight
next	idsCommunications-sanitized.h	/^    struct FloatingLabel *next;$/;"	m	struct:FloatingLabel	typeref:struct:FloatingLabel::FloatingLabel
next	idsCommunications-sanitized.h	/^    struct IDSPosition *next;$/;"	m	struct:IDSPosition	typeref:struct:IDSPosition::IDSPosition
next	idsCommunications-sanitized.h	/^    struct NodeEdge *next;$/;"	m	struct:NodeEdge	typeref:struct:NodeEdge::NodeEdge
next	idsCommunications-sanitized.h	/^    struct NodeLabel *next;$/;"	m	struct:NodeLabel	typeref:struct:NodeLabel::NodeLabel
next	idsCommunications.h	/^    struct ApiName *next;$/;"	m	struct:ApiName	typeref:struct:ApiName::ApiName
next	idsCommunications.h	/^    struct CommunicationsNeighbor *next; \/* next pointer for the linked list *\/$/;"	m	struct:CommunicationsNeighbor	typeref:struct:CommunicationsNeighbor::CommunicationsNeighbor
next	idsCommunications.h	/^    struct CommunicationsPositionWeight *next;$/;"	m	struct:CommunicationsPositionWeight	typeref:struct:CommunicationsPositionWeight::CommunicationsPositionWeight
next	idsCommunications.h	/^    struct FloatingLabel *next;$/;"	m	struct:FloatingLabel	typeref:struct:FloatingLabel::FloatingLabel
next	idsCommunications.h	/^    struct IDSPosition *next;$/;"	m	struct:IDSPosition	typeref:struct:IDSPosition::IDSPosition
next	idsCommunications.h	/^    struct NodeEdge *next;$/;"	m	struct:NodeEdge	typeref:struct:NodeEdge::NodeEdge
next	idsCommunications.h	/^    struct NodeLabel *next;$/;"	m	struct:NodeLabel	typeref:struct:NodeLabel::NodeLabel
next	mobility.h	/^	struct MobilityConstraint *next;$/;"	m	struct:MobilityConstraint	typeref:struct:MobilityConstraint::MobilityConstraint
next	packetapi.cpp	/^	struct ApiSession *next;$/;"	m	struct:ApiSession	typeref:struct:ApiSession::ApiSession	file:
next	rng.cc	/^RNGImplementation::next()$/;"	f	class:RNGImplementation
next	rng.cc	/^long RNG::next()$/;"	f	class:RNG
next	routing.h	/^	struct routingNode *next;$/;"	m	struct:routingNode	typeref:struct:routingNode::routingNode
next	routing.h	/^	struct routingRequest *next;$/;"	m	struct:routingRequest	typeref:struct:routingRequest::routingRequest
next	routingdetector.c	/^	struct Route *next;$/;"	m	struct:Route	typeref:struct:Route::Route	file:
nextClient	apisupport.h	/^        struct MessageTypeNode *nextClient;	\/* when going down a type, this is the next client in the chain  *\/$/;"	m	struct:MessageTypeNode	typeref:struct:MessageTypeNode::MessageTypeNode
nextClientType	apisupport.h	/^	struct MessageTypeNode *nextClientType;	\/* linked list from ApiSession->typeList for a client's registered msg types  *\/$/;"	m	struct:MessageTypeNode	typeref:struct:MessageTypeNode::MessageTypeNode
nextCmd	apisupport.h	/^	ApiCommand *nextCmd;   \/* next command to process, or NULL at EOF *\/$/;"	m	struct:CommunicationsLogState
nextCmdCs	apisupport.h	/^	CommunicationsStatePtr nextCmdCs;  \/* cs ptr for nextCmd *\/$/;"	m	struct:CommunicationsLogState
nextCmdTime	apisupport.h	/^	destime nextCmdTime;   \/* time of next command *\/$/;"	m	struct:CommunicationsLogState
nextDemonId	packetapi.cpp	/^	unsigned int nextDemonId;$/;"	m	struct:PacketApiNodeState	file:
nextType	apisupport.h	/^        struct MessageTypeNode *nextType;	\/* linked list from state->incoming or state->outgoing, pointing to lists of types *\/$/;"	m	struct:MessageTypeNode	typeref:struct:MessageTypeNode::MessageTypeNode
next_double	rng.cc	/^RNGImplementation::next_double()$/;"	f	class:RNGImplementation
next_double	rng.cc	/^double RNG::next_double()$/;"	f	class:RNG
next_seed_	rng.cc	/^double RNG::next_seed_[6] = $/;"	m	class:RNG	file:
next_seed_	rng.h	/^	static double next_seed_[6]; $/;"	m	class:RNG
nexthop	routing.h	/^	ManetAddr nexthop;     \/* you send the packet to nexthop...  (and assume its paying attention) *\/$/;"	m	struct:routingNode
nexthop	routingdetector.c	/^	ManetAddr nexthop;$/;"	m	struct:Route	file:
nexthopcolor	routingdetector.c	/^	unsigned char nexthopcolor[4];$/;"	m	struct:DetectorInit	file:
nexthopcolor	routingdetector.c	/^	unsigned char nexthopcolor[4];$/;"	m	struct:detector	file:
nexthopfamily	routingdetector.c	/^	int nexthopfamily;$/;"	m	struct:DetectorInit	file:
nexthopfamily	routingdetector.c	/^	int nexthopfamily;$/;"	m	struct:detector	file:
nextid	data.cpp	/^	unsigned int nextid;		\/* next data packet ID  *\/$/;"	m	struct:dataState	file:
nextid	flood.h	/^	unsigned int nextid;             \/* next data packet ID  *\/$/;"	m	struct:floodState
nextid	testtraffic.h	/^	int nextid;$/;"	m	struct:testtrafficState
nextpos	flood.h	/^	int numheard,nextpos;$/;"	m	struct:floodState
nexttag	apisupport.h	/^	MessageID nexttag;					\/* outgoing messages are tagged, to be able to recognize them on inflight *\/$/;"	m	struct:CommunicationsState
nexttestid	flood.h	/^	unsigned int nexttestid;         \/* next test packet ID, used only for floodTest  *\/$/;"	m	struct:floodState
nlist	des.h	/^	manetNode *nlist;            \/* the nodes themselves   *\/$/;"	m	struct:manet
nnpKeyfile	infrasniff.cpp	/^int nnpKeyfile=0;$/;"	v
nod	goodwin.cpp	/^	manetNode *nod;$/;"	m	struct:detector	file:
node	idsCommunications-sanitized.h	/^    ManetAddr node;$/;"	m	struct:NodeLabel
node	idsCommunications-sanitized.h	/^    ManetAddr node;$/;"	m	struct:__anon37
node	idsCommunications.h	/^    ManetAddr node;$/;"	m	struct:NodeLabel
node	idsCommunications.h	/^    ManetAddr node;$/;"	m	struct:__anon15
node	packetapi.cpp	/^	manetNode *node;$/;"	m	struct:ApiSession	file:
nodeAttemptOpen	watcher.cpp	/^void nodeAttemptOpen(manetNode *us)$/;"	f
nodeAvailability	node.cpp	/^int nodeAvailability(manetNode *us,int *flagarray)$/;"	f
nodeColor	node.cpp	/^void nodeColor(manetNode *us, unsigned char *color)$/;"	f
nodeDraw	graphics.cpp	/^void nodeDraw($/;"	f
nodeDrawCircFn	graphics.cpp	/^static void nodeDrawCircFn($/;"	f	file:
nodeDrawFrowny	graphics.cpp	/^void nodeDrawFrowny($/;"	f
nodeDrawLabel	graphics.cpp	/^void nodeDrawLabel(manetNode *us, NodeDisplayType dispType, NodeDisplayStatus const *dispStat, GLfloat nodex, GLfloat nodey, GLfloat nodez)$/;"	f
nodeDrawLabel	graphics.h	83;"	d
nodeFindClusterheads	interim.cpp	/^static void nodeFindClusterheads(manetNode *us)$/;"	f	file:
nodeFirst	routingdetector.c	/^	ManetAddr nodeFirst;$/;"	m	struct:DetectorInit	file:
nodeFirst	routingdetector.c	/^	ManetAddr nodeFirst;$/;"	m	struct:detector	file:
nodeFree	amroute.cpp	/^void nodeFree(manetNode *us)$/;"	f
nodeFree	bft.cpp	/^void nodeFree(manetNode *n)$/;"	f
nodeFree	gmcluster.cpp	/^void nodeFree(manetNode *n)$/;"	f
nodeFree	graphcluster.cpp	/^void nodeFree(manetNode *n)$/;"	f
nodeFree	infrasniff.cpp	/^void nodeFree(manetNode *us)$/;"	f
nodeFree	interim.cpp	/^void nodeFree(manetNode *n)$/;"	f
nodeFree	interim2.cpp	/^void nodeFree(manetNode *us)$/;"	f
nodeFree	justneighbors.cpp	/^void nodeFree(manetNode *n)$/;"	f
nodeFree	nopcluster.cpp	/^void nodeFree(manetNode *n)$/;"	f
nodeFree	packetProtection.cpp	/^void nodeFree(manetNode*) { return; }$/;"	f
nodeFree	testhello.cpp	/^void nodeFree(manetNode *n)$/;"	f
nodeFree	watcher.cpp	/^void nodeFree(manetNode *us)$/;"	f
nodeGetHopAndNbrCount	gmcluster.cpp	/^void nodeGetHopAndNbrCount(manetNode *us, void *data)$/;"	f
nodeGotDataTraffic	amroute.cpp	/^STATIC void nodeGotDataTraffic(manetNode *us, packet_amroute *pamr)$/;"	f
nodeGotIt	amroute.h	/^    void (*nodeGotIt)(manetNode *, struct packet_amroute_s *);$/;"	m	struct:__anon27
nodeGotJoinAck	amroute.cpp	/^STATIC void nodeGotJoinAck(manetNode *us, packet_amroute *pamr)$/;"	f
nodeGotJoinNak	amroute.cpp	/^STATIC void nodeGotJoinNak(manetNode *us, packet_amroute *pamr)$/;"	f
nodeGotJoinReq	amroute.cpp	/^STATIC void nodeGotJoinReq(manetNode *us, packet_amroute *pamr)$/;"	f
nodeGotPacket	amroute.cpp	/^void nodeGotPacket(manetNode *us, packet *p)$/;"	f
nodeGotPacket	justneighbors.cpp	/^void nodeGotPacket(manetNode *us, packet *p)$/;"	f
nodeGotPacket	watcher.cpp	/^void nodeGotPacket(manetNode *us, packet *p)$/;"	f
nodeGotTreeCreate	amroute.cpp	/^STATIC void nodeGotTreeCreate(manetNode *us, packet_amroute *pamr)$/;"	f
nodeGotTreeCreateNak	amroute.cpp	/^STATIC void nodeGotTreeCreateNak(manetNode *us, packet_amroute *pamr)$/;"	f
nodeHead	idsCommunications-sanitized.h	/^    struct manetNode *nodeHead, *nodeTail;$/;"	m	struct:NodeEdge	typeref:struct:NodeEdge::manetNode
nodeHead	idsCommunications.h	/^    struct manetNode *nodeHead, *nodeTail;$/;"	m	struct:NodeEdge	typeref:struct:NodeEdge::manetNode
nodeHelloTimeoutTimer	interim.cpp	/^void nodeHelloTimeoutTimer(manetNode *us, void *data)$/;"	f
nodeHelloTimer	interim.cpp	/^void nodeHelloTimer(manetNode *us, void *data)$/;"	f
nodeHierarchyCountEdges	node.cpp	/^void nodeHierarchyCountEdges(manetNode *us, int schedflag)$/;"	f
nodeHierarchyCountEdgesCallback	node.cpp	/^static void nodeHierarchyCountEdgesCallback(manetNode *us, void *data)$/;"	f	file:
nodeInfo	amroute.h	/^    } nodeInfo;$/;"	t	typeref:struct:__anon28
nodeInit	amroute.cpp	/^void nodeInit(manetNode *us)$/;"	f
nodeInit	bft.cpp	/^void nodeInit(manetNode *us)$/;"	f
nodeInit	gmcluster.cpp	/^void nodeInit(manetNode *us)$/;"	f
nodeInit	graphcluster.cpp	/^void nodeInit(manetNode *us)$/;"	f
nodeInit	infrasniff.cpp	/^void nodeInit(manetNode *us)$/;"	f
nodeInit	interim.cpp	/^void nodeInit(manetNode *n)$/;"	f
nodeInit	interim2.cpp	/^void nodeInit(manetNode *us)$/;"	f
nodeInit	justneighbors.cpp	/^void nodeInit(manetNode *us)$/;"	f
nodeInit	nopcluster.cpp	/^void nodeInit(manetNode *us)$/;"	f
nodeInit	packetProtection.cpp	/^void nodeInit(manetNode*) { return; }$/;"	f
nodeInit	testhello.cpp	/^void nodeInit(manetNode *us)$/;"	f
nodeInit	watcher.cpp	/^void nodeInit(manetNode *us)$/;"	f
nodeInit2	amroute.cpp	/^STATIC void nodeInit2(manetNode *us, void *data)$/;"	f
nodeLabelApply	node.cpp	/^NodeLabel *nodeLabelApply(manetNode *us, NodeLabel *lab)$/;"	f
nodeLabelRemove	node.cpp	/^void nodeLabelRemove(manetNode *us, int bitmap, NodeLabel *n)$/;"	f
nodeLabelRemoveAll	node.cpp	/^void nodeLabelRemoveAll(manetNode *us)$/;"	f
nodeLabelRemovePtr	node.cpp	/^void nodeLabelRemovePtr(manetNode *us, NodeLabel *l)$/;"	f
nodeLabelRemoveTag	node.cpp	/^void nodeLabelRemoveTag(manetNode *us,NodeLabel *n)$/;"	f
nodeLabelTimeout	node.cpp	/^void nodeLabelTimeout(manetNode *us)$/;"	f
nodeLast	routingdetector.c	/^	ManetAddr nodeLast;$/;"	m	struct:DetectorInit	file:
nodeLast	routingdetector.c	/^	ManetAddr nodeLast;$/;"	m	struct:detector	file:
nodeList	apisupport.h	/^	CommunicationsStatePtr *nodeList;$/;"	m	struct:CommunicationsLogState
nodeMetrics	node.cpp	/^void nodeMetrics(manetNode *us,int schedflag)$/;"	f
nodeMetricsCallback	node.cpp	/^static void nodeMetricsCallback(manetNode *us, void *data)$/;"	f	file:
nodeMobilityCountEdges	mobility.cpp	/^void nodeMobilityCountEdges(manetNode *us, int schedflag)$/;"	f
nodeMobilityCountEdgesCallback	mobility.cpp	/^static void nodeMobilityCountEdgesCallback(manetNode *us, void *data)$/;"	f	file:
nodeMobilityDumpCoords	mobility.cpp	/^void nodeMobilityDumpCoords(manetNode *us, void *data)$/;"	f
nodeMobilityGPSData	mobility.cpp	/^void nodeMobilityGPSData(manetNode *us)$/;"	f
nodeMobilityGPSDataInternal	mobility.cpp	/^static void nodeMobilityGPSDataInternal(manetNode *us, void *data)$/;"	f	file:
nodeMobilityInit	mobility.cpp	/^nodeMobilityInit(manet *m)$/;"	f	file:
nodeMobilityInitFile	mobility.cpp	/^nodeMobilityInitFile(manet *m, char const *filname)$/;"	f
nodeMobilityInitRandom	mobility.cpp	/^nodeMobilityInitRandom(manet *m)$/;"	f
nodeMobilityInitRandomMinDist	mobility.cpp	/^nodeMobilityInitRandomMinDist(manet *m)$/;"	f
nodeMobilityLinear	mobility.cpp	/^nodeMobilityLinear(manetNode *us)$/;"	f
nodeMobilityRandom	mobility.cpp	/^static RNG *nodeMobilityRandom;$/;"	v	file:
nodeMobilityRandomHeading	mobility.cpp	/^void nodeMobilityRandomHeading(manetNode *us)$/;"	f
nodeMobilityRandomHeadingInternal	mobility.cpp	/^static void nodeMobilityRandomHeadingInternal(manetNode *us)$/;"	f	file:
nodeMobilityRandomWalk	mobility.cpp	/^void nodeMobilityRandomWalk(manetNode *us)$/;"	f
nodeMobilityRandomWalkInternal	mobility.cpp	/^static void nodeMobilityRandomWalkInternal(manetNode *us)$/;"	f	file:
nodeMobilityRandomWaypoint	mobility.cpp	/^void nodeMobilityRandomWaypoint(manetNode *us)$/;"	f
nodeMobilityRandomWaypointInternal	mobility.cpp	/^static void nodeMobilityRandomWaypointInternal(manetNode *us)$/;"	f	file:
nodeOpenSucceed	watcher.cpp	/^void nodeOpenSucceed(manetNode *us)$/;"	f
nodePacketInsert	node.cpp	/^void nodePacketInsert(manetNode *us, packet *p)$/;"	f
nodePacketSearch	node.cpp	/^packet *nodePacketSearch(manetNode *us, packet *p)$/;"	f
nodePathLength	node.cpp	/^int *nodePathLength(manet *m)$/;"	f
nodeReachable	des.cpp	/^static int nodeReachable(manetNode *a, manetNode *b)$/;"	f	file:
nodeTail	idsCommunications-sanitized.h	/^    struct manetNode *nodeHead, *nodeTail;$/;"	m	struct:NodeEdge	typeref:struct:NodeEdge::
nodeTail	idsCommunications.h	/^    struct manetNode *nodeHead, *nodeTail;$/;"	m	struct:NodeEdge	typeref:struct:NodeEdge::
nodeaddr	des.h	/^        struct manetNode *nodeaddr;	\/* node which gets this event *\/$/;"	m	struct:eventnode	typeref:struct:eventnode::manetNode
nodes	amroute.h	/^    nodeInfo *nodes;$/;"	m	struct:clusteringState
noflood	idsCommunications-sanitized.h	/^    unsigned int noflood;$/;"	m	struct:__anon38
noflood	idsCommunications.h	/^    unsigned int noflood;$/;"	m	struct:__anon16
nofly	mobility.h	/^		struct NoflyRect nofly;$/;"	m	union:MobilityConstraint::__anon43	typeref:struct:MobilityConstraint::__anon43::NoflyRect
nolog	hierarchy2text.cpp	/^static void nolog(char const *fmt, ...)$/;"	f	file:
nopPacket	nopcluster.cpp	/^static void nopPacket(manetNode *us, packet *p)$/;"	f	file:
norm	rng.cc	/^	const double norm = 1.0 \/ (m1 + 1.0); $/;"	v
normal	rng.cc	/^RNG::normal(double avg, double std)$/;"	f	class:RNG
notifyCore	amroute.cpp	/^STATIC void notifyCore(manetNode *us)$/;"	f
notifyNeighbor	neighborlist.cpp	/^STATIC void notifyNeighbor(int ntype, manetNode *us, int index, const char *action)$/;"	f
notifyPacket	amroute.cpp	/^void notifyPacket(manetNode *us, packet_amroute *pamr, const char *action, int ttl)$/;"	f
notifyParticipant	amroute.cpp	/^STATIC void notifyParticipant(manetNode *us, const char *action)$/;"	f
notifyneighbor	amroute.cpp	/^int notifyneighbor = 1;$/;"	v
notifynode	amroute.cpp	/^static int notifynode = 1;	\/* join\/leave group, logical core *\/$/;"	v	file:
notifypacket	amroute.cpp	/^int notifypacket = 1;$/;"	v
notifytree	amroute.cpp	/^int notifytree = 1;$/;"	v
nptr	transformNull.c	/^typedef struct NullData *nptr;$/;"	t	typeref:struct:NullData	file:
nptr	untransformNull.c	/^typedef struct NullData *nptr;$/;"	t	typeref:struct:NullData	file:
ntd	transformNull.c	/^    struct NullTransformData *ntd;$/;"	m	struct:NullData	typeref:struct:NullData::NullTransformData	file:
nud	untransformNull.c	/^    struct NullUntransformData *nud;$/;"	m	struct:NullData	typeref:struct:NullData::NullUntransformData	file:
numInited	mobility.h	/^	int numInited;     \/* number of nodes inited, used to know when to position the nodes *\/$/;"	m	struct:mobilityManetState
numNeighbors	hello.cpp	/^        int numNeighbors;                \/* number of neighbors *\/$/;"	m	struct:__anon59	file:
numNeighbors	interim2.cpp	/^        int numNeighbors;                \/* number of neighbors (including asymmetric) *\/$/;"	m	struct:__anon57	file:
numNodes	idsCommunications-sanitized.h	/^    unsigned int numNodes;$/;"	m	struct:__anon38
numNodes	idsCommunications.h	/^    unsigned int numNodes;$/;"	m	struct:__anon16
numSymNeighbors	hello.cpp	/^        int numSymNeighbors;             \/* number of symmetric neighbors *\/$/;"	m	struct:__anon59	file:
numbcast	livenetwork.cpp	/^	int numbcast;$/;"	m	struct:__anon63	file:
numheard	flood.h	/^	int numheard,nextpos;$/;"	m	struct:floodState
numhops	routing.h	/^	int numhops;$/;"	m	struct:__anon24
numneighbors	graphcluster.cpp	/^	int numneighbors;            \/* set of neighbor nodes which the subtree has *\/$/;"	m	struct:__anon50	file:
numnodes	des.h	/^	int numnodes;$/;"	m	struct:manet
numnodes	pgraphwatcher.c	/^	int numnodes;$/;"	m	struct:detector	file:
numpoints	test.c	/^int numpoints;$/;"	v
numsamples	metric.h	/^	int numsamples;$/;"	m	struct:__anon53
numtypes	idsCommunications-sanitized.h	/^    int numtypes;   		\/* Indicates length of the array pointed to by packetList *\/$/;"	m	struct:ApiStatus
numtypes	idsCommunications.h	/^    int numtypes;   		\/* Indicates length of the array pointed to by packetList *\/$/;"	m	struct:ApiStatus
onDetectorPositionUpdate	demoverifiedalertreader.c	/^static void onDetectorPositionUpdate(void *data, IDSPositionType position, IDSPositionStatus status)$/;"	f	file:
onDirectiveArrive	demosigningaggregator.c	/^static void onDirectiveArrive(void *data, const struct MessageInfo *mi)$/;"	f	file:
onReportArrive	demosigningaggregator.c	/^static void onReportArrive(void *data, const struct MessageInfo *mi)$/;"	f	file:
onReportSendTimeout	demosigningdetector.c	/^static void onReportSendTimeout($/;"	f	file:
onVerifiedAlertArrive	demoverifiedalertreader.c	/^static void onVerifiedAlertArrive(void *data, const struct MessageInfo *mi)$/;"	f	file:
onehopcolor	routingdetector.c	/^	unsigned char onehopcolor[4];$/;"	m	struct:DetectorInit	file:
onehopcolor	routingdetector.c	/^	unsigned char onehopcolor[4];$/;"	m	struct:detector	file:
onehopcount	bft.h	/^        int onehopcount;          \/* number of neighbors *\/$/;"	m	struct:__anon2
onehopcount	graphcluster.cpp	/^        int onehopcount;          \/* number of neighbors *\/$/;"	m	struct:__anon47	file:
onehopcount	simulation.h	/^	int onehopcount;          \/* number of neighbors *\/$/;"	m	struct:__anon31
onehopdegree	des.h	/^        int onehopdegree;        \/* these are interim algorithm fields *\/$/;"	m	struct:neighbor
onehopfamily	routingdetector.c	/^	int onehopfamily;$/;"	m	struct:DetectorInit	file:
onehopfamily	routingdetector.c	/^	int onehopfamily;$/;"	m	struct:detector	file:
operator ()	hierarchy2text.cpp	/^    bool operator()(graph_traits<Graph>::vertex_descriptor const &v)$/;"	f	class:MatchAddr
operator ()	hierarchy2text.cpp	/^    void operator()(graph_traits<Graph>::edge_descriptor const &e)$/;"	f	class:PrintChildAndParent
operator ()	hierarchy2text.cpp	/^    void operator()(graph_traits<Graph>::vertex_descriptor const &me)$/;"	f	class:PrintMeAndMyParents
operator ()	hierarchy2text.cpp	/^    void operator()(graph_traits<Graph>::vertex_descriptor const$/;"	f	class:PrintLine
operator ()	packetstats.cpp	/^	size_t operator()(const PacketClass &pclass) const {$/;"	f	struct:PacketClassHash
operator ==	packetstats.cpp	/^	bool operator==(const PacketClass &other) const$/;"	f	struct:PacketClass
origBcastXmitByte	idsCommunications-sanitized.h	/^    long long int bcastRecByte,origBcastXmitByte, repBcastXmitByte;$/;"	m	struct:ApiPacketCount
origBcastXmitByte	idsCommunications.h	/^    long long int bcastRecByte,origBcastXmitByte, repBcastXmitByte;$/;"	m	struct:ApiPacketCount
origBcastXmitCount	idsCommunications-sanitized.h	/^    long long int bcastRecCount,origBcastXmitCount, repBcastXmitCount;$/;"	m	struct:ApiPacketCount
origBcastXmitCount	idsCommunications.h	/^    long long int bcastRecCount,origBcastXmitCount, repBcastXmitCount;$/;"	m	struct:ApiPacketCount
origTime	amroute.h	/^    destime origTime;$/;"	m	struct:packet_amroute_s
origUnicastXmitByte	idsCommunications-sanitized.h	/^    long long int unicastRecByte,origUnicastXmitByte, repUnicastXmitByte;$/;"	m	struct:ApiPacketCount
origUnicastXmitByte	idsCommunications.h	/^    long long int unicastRecByte,origUnicastXmitByte, repUnicastXmitByte;$/;"	m	struct:ApiPacketCount
origUnicastXmitCount	idsCommunications-sanitized.h	/^    long long int unicastRecCount,origUnicastXmitCount,repUnicastXmitCount;$/;"	m	struct:ApiPacketCount
origUnicastXmitCount	idsCommunications.h	/^    long long int unicastRecCount,origUnicastXmitCount,repUnicastXmitCount;$/;"	m	struct:ApiPacketCount
origdest	packetapi.h	/^	CommunicationsDestination origdest;$/;"	m	struct:__anon41
origdst	flood.h	/^	ManetAddr origsrc,origdst;$/;"	m	struct:packetFlood
origdst	routing.h	/^	ManetAddr origdst;$/;"	m	struct:__anon25
origin	apisupport.h	/^	ManetAddr origin;$/;"	m	struct:MessageInfo
originApi	apisupport.h	/^	struct ApiSession *originApi;		\/* set by demon, client which originally sent this MI  *\/$/;"	m	struct:MessageInfo	typeref:struct:MessageInfo::ApiSession
originated	amroute.h	/^    int originated, copiesSent, copiesForwarded;$/;"	m	struct:__anon27
origination	amroute.h	/^    ManetAddr origination;$/;"	m	struct:packet_amroute_s
originnode	des.h	/^	struct manetNode *originnode;$/;"	m	struct:packet	typeref:struct:packet::manetNode
origsrc	flood.h	/^	ManetAddr origsrc,origdst;$/;"	m	struct:packetFlood
origsrc	routing.h	/^	ManetAddr origsrc;$/;"	m	struct:__anon25
origtype	data.h	/^	int origtype;           \/* type of encapsulated packet *\/$/;"	m	struct:PacketData
origtype	flood.h	/^	int origtype;            \/* type of encapsulated packet *\/$/;"	m	struct:packetFlood
origtype	routing.h	/^	int origtype;$/;"	m	struct:__anon25
othermouth	routingdetector.c	/^	ManetAddr othermouth;$/;"	m	struct:detector	file:
outbound	demosigningaggregator.c	/^    struct TransDuo *outbound;$/;"	m	struct:__anon9	typeref:struct:__anon9::TransDuo	file:
outbound	demosigningdetector.c	/^    struct TransDuo *outbound;$/;"	m	struct:__anon7	typeref:struct:__anon7::TransDuo	file:
outgoing	packetapi.cpp	/^	ApiCommand *outgoing;		\/* queue of ApiCommands which need to be written to the client *\/$/;"	m	struct:ApiSession	file:
ox	mobility.h	/^	double ox, oy, oz;    \/* previous location   *\/$/;"	m	struct:mobilityState
oy	mobility.h	/^	double ox, oy, oz;    \/* previous location   *\/$/;"	m	struct:mobilityState
oz	mobility.h	/^	double ox, oy, oz;    \/* previous location   *\/$/;"	m	struct:mobilityState
p	data.cpp	/^	packet *p;			\/* pointer to dup of original packet which was sent.  *\/$/;"	m	struct:InFlight	file:
p	watcher.cpp	/^    QuadranglePoint p[4];$/;"	m	struct:Quadrangle	file:
packet	des.h	/^typedef struct packet$/;"	s
packet	des.h	/^} packet;$/;"	t	typeref:struct:packet
packetApi	des.h	/^	struct PacketApiNodeState *packetApi;$/;"	m	struct:manetNode	typeref:struct:manetNode::PacketApiNodeState
packetApiHeaderMarshal	packetapi.cpp	/^int packetApiHeaderMarshal(packet *p, const PacketApi *pa)$/;"	f
packetApiHeaderUnmarshal	packetapi.cpp	/^int packetApiHeaderUnmarshal(const packet *p, PacketApi *pa)$/;"	f
packetApiInit	packetProtection.cpp	/^void packetApiInit(manetNode*) { return; }$/;"	f
packetApiInit	packetapi.cpp	/^void packetApiInit(manetNode *us)$/;"	f
packetApiIntSend	packetapi.cpp	/^static void packetApiIntSend(manetNode *us, MessageInfo *mi, ApiSession *as)$/;"	f	file:
packetApiMarshal	packetapi.cpp	/^packet *packetApiMarshal(manetNode *us, const PacketApi *pa,int doCompression)$/;"	f
packetApiMessageHandlerSet	packetapi.cpp	/^void packetApiMessageHandlerSet($/;"	f
packetApiPositionWeightLoad	packetapi.cpp	/^void packetApiPositionWeightLoad(manetNode *us, const char *filename)$/;"	f
packetApiPositionWeightSearchList	packetapi.cpp	/^CommunicationsPositionWeight *packetApiPositionWeightSearchList(manetNode *us, CommunicationsPositionWeight *key)$/;"	f
packetApiReceive	packetapi.cpp	/^static void packetApiReceive(manetNode *us, packet *p)$/;"	f	file:
packetApiReceiveAck	packetapi.cpp	/^static void packetApiReceiveAck(manetNode *us, packet *p)$/;"	f	file:
packetApiRoute	packetapi.cpp	/^void packetApiRoute(manetNode *us, packet *p)$/;"	f
packetApiSend	packetapi.cpp	/^void packetApiSend(manetNode *us, ManetAddr dest, int ttl,  PacketApi *pa)$/;"	f
packetApiUnmarshal	packetapi.cpp	/^PacketApi *packetApiUnmarshal(const packet *p, int doCompression)$/;"	f
packetBFTTree	bft.cpp	/^} packetBFTTree;$/;"	t	typeref:struct:__anon60	file:
packetBannerjeeTree	graphcluster.cpp	/^} packetBannerjeeTree;$/;"	t	typeref:struct:__anon48	file:
packetCopy	des.h	262;"	d
packetCopyInt	des.cpp	/^packet *packetCopyInt(packet const *o, int payloaddelta, char *fil, int lin)$/;"	f
packetDaddy	graphcluster.cpp	/^} packetDaddy;$/;"	t	typeref:struct:__anon49	file:
packetDataAckMarshal	data.cpp	/^static packet *packetDataAckMarshal(manetNode *us, PacketDataAck *pda)$/;"	f	file:
packetDataAckUnmarshal	data.cpp	/^PacketDataAck *packetDataAckUnmarshal(const packet *p)$/;"	f
packetDataMarshal	data.cpp	/^static packet *packetDataMarshal(const packet *p, PacketData *pd)$/;"	f	file:
packetDataUnmarshal	data.cpp	/^PacketData *packetDataUnmarshal(const packet *p)$/;"	f
packetDescr	infrasniff.cpp	/^char packetDescr[80*1024];$/;"	v
packetDescrAppend	infrasniff.cpp	/^static void packetDescrAppend(char const *fmt, ...)$/;"	f	file:
packetDumpDebug	des.cpp	/^void packetDumpDebug(void)$/;"	f
packetDumpDebug	des.h	253;"	d
packetDup	des.h	259;"	d
packetDupInt	des.cpp	/^packet *packetDupInt(packet *p, char *fil, int lin)$/;"	f
packetEnqueue	des.cpp	/^eventnode *packetEnqueue(manetNode *us,packet *p,int delay)$/;"	f
packetFill	packetProtection.cpp	/^static void packetFill(packet *p)$/;"	f	file:
packetFlood	flood.h	/^typedef struct packetFlood$/;"	s
packetFlood	flood.h	/^} packetFlood;$/;"	t	typeref:struct:packetFlood
packetFloodMarshal	flood.cpp	/^static int packetFloodMarshal(packet *p, packetFlood *pf)$/;"	f	file:
packetFloodUnmarshal	flood.cpp	/^packetFlood *packetFloodUnmarshal(const packet *p)$/;"	f
packetFree	des.cpp	/^void packetFree(packet *p)$/;"	f
packetGraphclusterCluster	graphcluster.cpp	/^} packetGraphclusterCluster;$/;"	t	typeref:struct:__anon51	file:
packetGraphclusterTerm	graphcluster.cpp	/^} packetGraphclusterTerm;$/;"	t	typeref:struct:__anon50	file:
packetHello	graphcluster.cpp	/^} packetHello;$/;"	t	typeref:struct:__anon47	file:
packetHello	hello.cpp	/^} packetHello;$/;"	t	typeref:struct:__anon59	file:
packetHello	interim2.cpp	/^} packetHello;$/;"	t	typeref:struct:__anon57	file:
packetList	idsCommunications-sanitized.h	/^    ApiPacketCount *packetList;	\/* array of packet types and their counts  *\/$/;"	m	struct:ApiStatus
packetList	idsCommunications.h	/^    ApiPacketCount *packetList;	\/* array of packet types and their counts  *\/$/;"	m	struct:ApiStatus
packetMalloc	des.h	255;"	d
packetMallocInt	des.cpp	/^packet *packetMallocInt(manetNode *us, int len, char *fil, int lin)$/;"	f
packetOriginate	des.h	267;"	d
packetProtect	packetProtection.cpp	/^int packetProtect($/;"	f
packetProtection	des.h	/^	struct PacketProtection *packetProtection;$/;"	m	struct:manet	typeref:struct:manet::PacketProtection
packetProtection	infrasniff.cpp	/^struct PacketProtection *packetProtection=NULL;$/;"	v	typeref:struct:PacketProtection
packetProtectionFini	packetProtection.cpp	/^void packetProtectionFini(struct PacketProtection *pp)$/;"	f
packetProtectionInit	packetProtection.cpp	/^int packetProtectionInit($/;"	f
packetReReceive	des.cpp	/^void packetReReceive(manetNode *us, packet *p)$/;"	f
packetRemalloc	des.cpp	/^packet *packetRemalloc(manetNode *us, int len,packet *oldp)$/;"	f
packetRepeat	des.h	268;"	d
packetRepeatType	des.h	269;"	d
packetRoot	interim2.cpp	/^} packetRoot;$/;"	t	typeref:struct:__anon58	file:
packetRouting	routing.h	/^} packetRouting;$/;"	t	typeref:struct:__anon24
packetRoutingData	routing.h	/^} packetRoutingData;$/;"	t	typeref:struct:__anon25
packetSend	infrasniff.cpp	/^void packetSend(manetNode *us, packet *p, int origflag)$/;"	f
packetSend	livenetwork.cpp	/^void packetSend(manetNode *us, packet *p, int origflag)$/;"	f
packetSend	main.cpp	/^void packetSend(manetNode *us, packet *p, int origflag)$/;"	f
packetSend	watcher.cpp	/^void packetSend(manetNode *us, packet *p, int origflag)$/;"	f
packetTesttraffic	testtraffic.h	/^} packetTesttraffic;$/;"	t	typeref:struct:__anon10
packetUnprotect	packetProtection.cpp	/^int packetUnprotect(struct PacketProtection const *pp, ManetAddr from, packet *p)$/;"	f
packet_amroute	amroute.h	/^    } packet_amroute;$/;"	t	typeref:struct:packet_amroute_s
packet_amroute_s	amroute.h	/^typedef struct packet_amroute_s {$/;"	s
packet_hello	bft.h	/^} packet_hello;$/;"	t	typeref:struct:__anon2
packet_hello	simulation.h	/^} packet_hello;$/;"	t	typeref:struct:__anon31
packetcount	des.h	/^} packetcount;$/;"	t	typeref:struct:__anon45
packetlist	des.h	/^	struct packet *packetlist[NODE_PACKETLIST];   \/* list of last n heard packets, to avoid repeating a packet more than once *\/$/;"	m	struct:manetNode	typeref:struct:manetNode::packet
packetlistlen	des.h	/^	int packetlistlen,packetlistpos;$/;"	m	struct:manetNode
packetlistpos	des.h	/^	int packetlistlen,packetlistpos;$/;"	m	struct:manetNode
packetorigin	des.h	/^	long long int packetorigin;$/;"	m	struct:__anon45
packetrepeat	des.h	/^	long long int packetrepeat;$/;"	m	struct:__anon45
packets	packetstats.cpp	/^	unsigned long long packets;$/;"	m	struct:PacketCounts	file:
packetstats	infrasniff.cpp	/^	struct PacketStats *packetstats;$/;"	m	struct:__anon61	typeref:struct:__anon61::PacketStats	file:
parent	bft.cpp	/^        ManetAddr parent;$/;"	m	struct:clusteringNeighbor	file:
parent	graphcluster.cpp	/^	neighbor *parent;$/;"	m	struct:clusteringState	file:
parent	graphcluster.cpp	/^        ManetAddr parent;$/;"	m	struct:clusteringNeighbor	file:
parent	idsCommunications-sanitized.h	/^    ManetAddr parent;$/;"	m	struct:__anon37
parent	idsCommunications.h	/^    ManetAddr parent;$/;"	m	struct:__anon15
parentid	bft.cpp	/^	ManetAddr parentid;$/;"	m	struct:__anon60	file:
parentid	graphcluster.cpp	/^	ManetAddr parentid;$/;"	m	struct:__anon48	file:
pareto	rng.h	/^	inline double pareto(double scale, double shape) { $/;"	f	class:RNG
paretoII	rng.h	/^        inline double paretoII(double scale, double shape) { $/;"	f	class:RNG
participants	amroute.cpp	/^static int participants = 0;$/;"	v	file:
payload	apisupport.h	/^	unsigned char *payload;$/;"	m	struct:ApiCommand
payload	apisupport.h	/^	unsigned char *payload;$/;"	m	struct:MessageInfo
payload	hello.cpp	/^	unsigned char *payload;$/;"	m	struct:__anon59	file:
payload	hello.cpp	/^	unsigned char *payload;$/;"	m	struct:helloState	file:
payload	packetapi.h	/^	unsigned char *payload;$/;"	m	struct:__anon41
payloadLen	apisupport.h	/^	int payloadLen;$/;"	m	struct:MessageInfo
payloadLen	hello.cpp	/^	int payloadLen;$/;"	m	struct:__anon59	file:
payloadLen	hello.cpp	/^	int payloadLen;$/;"	m	struct:helloState	file:
payloadLen	packetapi.h	/^	int payloadLen;$/;"	m	struct:__anon41
payloadPtr	apisupport.h	/^	void *payloadPtr;    $/;"	m	struct:MessageInfo
payloadUpdate	testhello.cpp	/^static void payloadUpdate(manetNode *us, void *data)$/;"	f	file:
payloadptr	apisupport.h	/^	unsigned char *payloadptr;$/;"	m	struct:ApiCommand
pcapfile	infrasniff.cpp	/^pcap_dumper_t *pcapfile=NULL;$/;"	v
pcapgotpacket	infrasniff.cpp	/^void pcapgotpacket(u_char *user,const struct pcap_pkthdr *pheader,const u_char *packet)$/;"	f
pcapgotpacketwrapper	infrasniff.cpp	/^void pcapgotpacketwrapper(u_char *user,const struct pcap_pkthdr *pheader, const u_char *packet)$/;"	f
pclasses	packetstats.cpp	/^	pclasses_t pclasses;$/;"	m	class:PacketStats	file:
pclasses_t	packetstats.cpp	/^typedef hash_map<PacketClass,PacketCounts,PacketClassHash> pclasses_t;$/;"	t	file:
pd	data.cpp	/^	PacketData *pd;$/;"	m	struct:InFlight	file:
peer	untransformSign.c	/^    peer_entry_vec peer;$/;"	m	struct:SignUntransformData	file:
peer_entry	untransformSign.c	/^typedef struct peer_entry$/;"	s	file:
peer_entry	untransformSign.c	/^} peer_entry;$/;"	t	typeref:struct:peer_entry	file:
pending	apisupport.h	/^	MessageInfo *pending;			\/* list of MIs which have been sent to this blocking client, and for which we are expecting *\/$/;"	m	struct:MessageTypeNode
period	idsCommunications-sanitized.h	/^    int period;			\/* -1 is disabled.  0 is only when level changes, positive is a period in milliseconds.  *\/$/;"	m	struct:ApiStatus
period	idsCommunications.h	/^    int period;			\/* -1 is disabled.  0 is only when level changes, positive is a period in milliseconds.  *\/$/;"	m	struct:ApiStatus
period	mobility.h	/^	int period;$/;"	m	struct:mobilityManetState
periodicTreeExamine	neighborlist.cpp	/^void periodicTreeExamine(manetNode *us, void *data)$/;"	f
phandle	infrasniff.cpp	/^pcap_t *phandle;$/;"	v
pkt	des.h	/^		packet *pkt;$/;"	m	union:eventnode::__anon46
points	graphics.h	/^} points;$/;"	t	typeref:struct:__anon62
port	packetstats.cpp	/^	unsigned int port;$/;"	m	struct:PacketClass	file:
port	tealabcontrol.c	/^	int port;$/;"	m	struct:__anon1	file:
position	idsCommunications-sanitized.h	/^    IDSPositionType position;$/;"	m	struct:CommunicationsPositionWeight
position	idsCommunications-sanitized.h	/^    IDSPositionType position;$/;"	m	struct:IDSPosition
position	idsCommunications.h	/^    IDSPositionType position;$/;"	m	struct:CommunicationsPositionWeight
position	idsCommunications.h	/^    IDSPositionType position;$/;"	m	struct:IDSPosition
positionList	apisupport.h	/^	struct IDSPosition *positionList;			\/* list of positions we are eligible for, and callbacks *\/$/;"	m	struct:CommunicationsState	typeref:struct:CommunicationsState::IDSPosition
positionList	packetapi.cpp	/^	IDSPosition *positionList;	\/* list of positions this client is elegible for *\/$/;"	m	struct:ApiSession	file:
positionStatus	watcher.h	/^	IDSPositionStatus positionStatus[3];$/;"	m	struct:clusteringState
positionUpdate	goodwin.cpp	/^static void positionUpdate(void *data, IDSPositionType position, IDSPositionStatus status)$/;"	f	file:
positionUpdate	hierarchy2text.cpp	/^void Node::positionUpdate(void *data, IDSPositionType pos, IDSPositionStatus stat)$/;"	f	class:Node
positionUpdate	routingdetector.c	/^static void positionUpdate(void *data, IDSPositionType position, IDSPositionStatus positionStatus)$/;"	f	file:
positionWeightList	apisupport.h	/^	CommunicationsPositionWeight *positionWeightList;	\/* list of positions, and weights *\/$/;"	m	struct:CommunicationsState
positionWeightList	packetapi.cpp	/^static ApiCommand *positionWeightList(PacketApiNodeState *st)$/;"	f	file:
prev	des.h	/^	struct eventbucket *prev;	\/*previous and next buckets *\/$/;"	m	struct:eventbucket	typeref:struct:eventbucket::eventbucket
prev	des.h	/^	struct eventnode *prev;	\/* previous and next events (unordered) in the bucket (this list does not cross buckets *\/$/;"	m	struct:eventnode	typeref:struct:eventnode::eventnode
printGraph	hierarchy2text.cpp	/^static void printGraph(bool verbose)$/;"	f	file:
printGraphPairs	hierarchy2text.cpp	/^static void printGraphPairs(bool verbose, bool rootgroup)$/;"	f	file:
printHeader	hierarchy2text.cpp	/^static void printHeader()$/;"	f	file:
printIndex	gmclusterTest.cpp	/^void printIndex(const int &row)$/;"	f
printMatrix	gmclusterTest.cpp	/^void printMatrix()$/;"	f
printNodeVerbose	hierarchy2text.cpp	/^static void printNodeVerbose(Node const &n)$/;"	f	file:
printRow	gmclusterTest.cpp	/^void printRow(const GroupRow &row)$/;"	f
print_additionaldata_content	idmefPrint.c	/^print_additionaldata_content(FILE *fil, IDMEFadditionaldata *data)$/;"	f	file:
priority	apisupport.h	/^	unsigned int priority;$/;"	m	struct:MessageHandlerRequest
priority	apisupport.h	/^	unsigned int priority;$/;"	m	struct:MessageTypeNode
priority	idsCommunications-sanitized.h	/^    int priority;$/;"	m	struct:FloatingLabel
priority	idsCommunications-sanitized.h	/^    int priority;$/;"	m	struct:NodeEdge
priority	idsCommunications-sanitized.h	/^    int priority;$/;"	m	struct:NodeLabel
priority	idsCommunications.h	/^    int priority;$/;"	m	struct:FloatingLabel
priority	idsCommunications.h	/^    int priority;$/;"	m	struct:NodeEdge
priority	idsCommunications.h	/^    int priority;$/;"	m	struct:NodeLabel
priv	packetProtection.cpp	/^	rsa_private_key priv;$/;"	m	struct:TupPriv	file:
priv	packetProtection.cpp	/^    hashtable *priv;$/;"	m	struct:PacketProtection	file:
privateroot_seqnum	graphcluster.cpp	/^	int privateroot_seqnum;$/;"	m	struct:clusteringState	file:
prog	demosigningaggregator.c	/^    char const *prog;$/;"	m	struct:__anon9	file:
prog	demosigningdetector.c	/^    char const *prog;$/;"	m	struct:__anon7	file:
prog	demoverifiedalertreader.c	/^    char const *prog;$/;"	m	struct:__anon56	file:
promisc	livenetwork.cpp	/^	int promisc;		\/* accept manet packets from any address *\/$/;"	m	struct:__anon63	file:
protect	packetProtection.cpp	/^static int protect($/;"	f	file:
proto	packetstats.cpp	/^	PacketProto proto;$/;"	m	struct:PacketClass	file:
protoName	packetstats.cpp	/^protoName(PacketProto proto)$/;"	f
pub	packetProtection.cpp	/^	rsa_public_key pub;$/;"	m	struct:TupPub	file:
pub	packetProtection.cpp	/^    hashtable *pub;$/;"	m	struct:PacketProtection	file:
rand_int	rng.cc	/^long RNG::rand_int (long low, long high) $/;"	f	class:RNG
rand_u01	rng.cc	/^double RNG::rand_u01 () $/;"	f	class:RNG
random	rng.h	/^	inline int random() { return uniform_positive_int(); }$/;"	f	class:RNG
raw	transform.h	/^    void const * (*raw)(const TransformDataHandle handle);$/;"	m	struct:Transform
raw	transformNull.c	/^static void const * raw(const TransformDataHandle handle)$/;"	f	file:
raw	transformSign.c	/^    uint8_t *raw;$/;"	m	struct:SignData	file:
raw	transformSign.c	/^static void const * raw(const TransformDataHandle handle)$/;"	f	file:
raw	untransform.h	/^    void const * (*raw)(const UntransformDataHandle handle);$/;"	m	struct:Untransform
raw	untransformNull.c	/^static void const * raw(const UntransformDataHandle handle)$/;"	f	file:
raw	untransformSign.c	/^    uint8_t *raw;$/;"	m	struct:SignData	file:
raw	untransformSign.c	/^static void const * raw(const UntransformDataHandle handle)$/;"	f	file:
rawLength	transform.h	/^    size_t (*rawLength)(const TransformDataHandle handle);$/;"	m	struct:Transform
rawLength	transformNull.c	/^static size_t rawLength(const TransformDataHandle handle)$/;"	f	file:
rawLength	transformSign.c	/^    size_t rawLength;$/;"	m	struct:SignData	file:
rawLength	transformSign.c	/^static size_t rawLength(const TransformDataHandle handle)$/;"	f	file:
rawLength	untransform.h	/^    size_t (*rawLength)(const UntransformDataHandle handle);$/;"	m	struct:Untransform
rawLength	untransformNull.c	/^static size_t rawLength(const UntransformDataHandle handle)$/;"	f	file:
rawLength	untransformSign.c	/^    size_t rawLength;$/;"	m	struct:SignData	file:
rawLength	untransformSign.c	/^static size_t rawLength(const UntransformDataHandle handle)$/;"	f	file:
rcsid	amroute.cpp	/^static const char *rcsid __attribute__ ((unused)) = "$Id: amroute.cpp,v 1.22 2007\/06\/27 22:08:47 mheyman Exp $";$/;"	v	file:
rcsid	amroutesend.cpp	/^static const char *rcsid __attribute__ ((unused)) = "$Id: amroutesend.cpp,v 1.9 2007\/04\/02 13:58:34 dkindred Exp $";$/;"	v	file:
rcsid	apisupport.c	/^static const char *rcsid __attribute__ ((unused)) = "$Id: apisupport.c,v 1.79 2007\/08\/22 18:20:09 dkindred Exp $";$/;"	v	file:
rcsid	bft.cpp	/^static const char *rcsid __attribute__ ((unused)) = "$Id: bft.cpp,v 1.12 2007\/04\/23 18:51:07 dkindred Exp $";$/;"	v	file:
rcsid	config.c	/^static const char *rcsid __attribute__ ((unused)) = "$Id: config.c,v 1.24 2007\/07\/18 15:35:16 mheyman Exp $";$/;"	v	file:
rcsid	data.cpp	/^static const char *rcsid __attribute__ ((unused)) = "$Id: data.cpp,v 1.51 2007\/08\/30 14:14:58 dkindred Exp $";$/;"	v	file:
rcsid	demoaggregator.c	/^static const char *rcsid __attribute__ ((unused)) = "$Id: demoaggregator.c,v 1.24 2007\/08\/20 02:54:29 dkindred Exp $";$/;"	v	file:
rcsid	demodetector.c	/^static const char *rcsid __attribute__ ((unused)) = "$Id: demodetector.c,v 1.20 2007\/08\/17 19:43:45 dkindred Exp $";$/;"	v	file:
rcsid	demolib.c	/^static const char *rcsid __attribute__ ((unused)) = "$Id: demolib.c,v 1.7 2007\/08\/21 03:48:53 dkindred Exp $";$/;"	v	file:
rcsid	demoresponder.c	/^static const char *rcsid __attribute__ ((unused)) = "$Id: demoresponder.c,v 1.27 2007\/08\/20 02:54:29 dkindred Exp $";$/;"	v	file:
rcsid	demorewriter.c	/^static const char *rcsid __attribute__ ((unused)) = "$Id: demorewriter.c,v 1.18 2007\/08\/16 19:32:52 dkindred Exp $";$/;"	v	file:
rcsid	demosigningaggregator.c	/^static const char *rcsid __attribute__ ((unused)) = "$Id: demosigningaggregator.c,v 1.13 2007\/07\/21 02:01:58 sherman Exp $";$/;"	v	file:
rcsid	demosigningdetector.c	/^static const char *rcsid __attribute__ ((unused)) = "$Id: demosigningdetector.c,v 1.9 2007\/07\/25 20:35:01 dkindred Exp $";$/;"	v	file:
rcsid	demoverifiedalertreader.c	/^static const char *rcsid __attribute__ ((unused)) = "$Id: demoverifiedalertreader.c,v 1.3 2007\/07\/25 13:48:26 dkindred Exp $";$/;"	v	file:
rcsid	des.cpp	/^static const char *rcsid __attribute__ ((unused)) = "$Id: des.cpp,v 1.63 2007\/07\/18 07:01:32 dkindred Exp $";$/;"	v	file:
rcsid	edgetest.c	/^static const char *rcsid __attribute__ ((unused)) = "$Id: edgetest.c,v 1.12 2007\/04\/23 17:00:47 dkindred Exp $";$/;"	v	file:
rcsid	floatinglabeltest.c	/^static const char *rcsid __attribute__ ((unused)) = "$Id: floatinglabeltest.c,v 1.1 2007\/03\/09 22:48:08 tjohnson Exp $";$/;"	v	file:
rcsid	flood.cpp	/^static const char *rcsid __attribute__ ((unused)) = "$Id: flood.cpp,v 1.34 2007\/08\/30 14:14:58 dkindred Exp $";$/;"	v	file:
rcsid	glancer.c	/^static const char *rcsid __attribute__ ((unused)) = "$Id: glancer.c,v 1.13 2007\/06\/27 22:08:47 mheyman Exp $";$/;"	v	file:
rcsid	gmcluster.cpp	/^static const char *rcsid __attribute__ ((unused)) = "$Id: gmcluster.cpp,v 1.24 2007\/08\/29 04:33:39 dkindred Exp $"; $/;"	v	file:
rcsid	goodwin.cpp	/^static const char *rcsid __attribute__ ((unused)) = "$Id: goodwin.cpp,v 1.23 2007\/07\/18 15:35:16 mheyman Exp $";$/;"	v	file:
rcsid	goodwincreate.c	/^static const char *rcsid __attribute__ ((unused)) = "$Id: goodwincreate.c,v 1.7 2007\/07\/16 01:41:15 dkindred Exp $";$/;"	v	file:
rcsid	goodwinmerge.c	/^static const char *rcsid __attribute__ ((unused)) = "$Id: goodwinmerge.c,v 1.7 2007\/03\/09 22:59:58 tjohnson Exp $";$/;"	v	file:
rcsid	goodwintest.c	/^static const char *rcsid __attribute__ ((unused)) = "$Id: goodwintest.c,v 1.14 2007\/08\/17 20:02:10 dkindred Exp $";$/;"	v	file:
rcsid	graphcluster.cpp	/^static const char *rcsid __attribute__ ((unused)) = "$Id: graphcluster.cpp,v 1.33 2007\/04\/23 18:51:07 dkindred Exp $";$/;"	v	file:
rcsid	graphics.cpp	/^static const char *rcsid __attribute__ ((unused)) = "$Id: graphics.cpp,v 1.54 2007\/07\/13 20:40:22 mheyman Exp $";$/;"	v	file:
rcsid	hashtable.c	/^static const char *rcsid __attribute__ ((unused)) = "$Id: hashtable.c,v 1.6 2007\/06\/27 22:08:47 mheyman Exp $";$/;"	v	file:
rcsid	hello.cpp	/^static const char *rcsid __attribute__ ((unused)) = "$Id: hello.cpp,v 1.22 2007\/06\/10 02:08:34 dkindred Exp $";$/;"	v	file:
rcsid	hierarchy2text.cpp	/^static const char *rcsid __attribute__ ((unused)) = "$Id: hierarchy2text.cpp,v 1.5 2007\/09\/05 21:42:14 sherman Exp $";$/;"	v	file:
rcsid	idmefPrint.c	/^static const char *rcsid __attribute__ ((unused)) = "$Id: idmefPrint.c,v 1.8 2007\/06\/27 22:08:47 mheyman Exp $";$/;"	v	file:
rcsid	idsCommunications.c	/^static const char *rcsid __attribute__ ((unused)) = "$Id: idsCommunications.c,v 1.101 2007\/08\/19 04:01:19 dkindred Exp $";$/;"	v	file:
rcsid	infrasniff.cpp	/^static const char *rcsid __attribute__ ((unused)) = "$Id: infrasniff.cpp,v 1.15 2007\/08\/30 14:08:12 dkindred Exp $";$/;"	v	file:
rcsid	interim.cpp	/^static const char *rcsid __attribute__ ((unused)) = "$Id: interim.cpp,v 1.16 2007\/04\/23 18:51:07 dkindred Exp $";$/;"	v	file:
rcsid	interim2.cpp	/^static const char *rcsid  __attribute__ ((unused)) = "$Id: interim2.cpp,v 1.84 2007\/08\/14 17:38:18 dkindred Exp $";$/;"	v	file:
rcsid	justneighbors.cpp	/^static const char *rcsid __attribute__ ((unused)) = "$Id: justneighbors.cpp,v 1.4 2007\/07\/20 04:45:17 dkindred Exp $";$/;"	v	file:
rcsid	labeltest.c	/^static const char *rcsid __attribute__ ((unused)) = "$Id: labeltest.c,v 1.13 2007\/04\/23 17:00:47 dkindred Exp $";$/;"	v	file:
rcsid	livenetwork.cpp	/^static const char *rcsid __attribute__ ((unused)) = "$Id: livenetwork.cpp,v 1.113 2007\/07\/18 15:35:16 mheyman Exp $";$/;"	v	file:
rcsid	main.cpp	/^static const char *rcsid __attribute__ ((unused)) = "$Id: main.cpp,v 1.38 2007\/07\/23 16:59:50 dkindred Exp $";$/;"	v	file:
rcsid	metric.c	/^static const char *rcsid __attribute__ ((unused)) = "$Id: metric.c,v 1.11 2006\/06\/14 15:04:34 tjohnson Exp $";$/;"	v	file:
rcsid	mobility.cpp	/^static const char *rcsid __attribute__ ((unused)) = "$Id: mobility.cpp,v 1.41 2007\/07\/23 17:02:15 dkindred Exp $";$/;"	v	file:
rcsid	neighborlist.cpp	/^static const char *rcsid __attribute__ ((unused)) = "$Id: neighborlist.cpp,v 1.14 2007\/04\/25 14:20:05 dkindred Exp $";$/;"	v	file:
rcsid	node.cpp	/^static const char *rcsid __attribute__ ((unused)) = "$Id: node.cpp,v 1.49 2007\/08\/14 20:17:52 dkindred Exp $";$/;"	v	file:
rcsid	nopcluster.cpp	/^static const char *rcsid __attribute__ ((unused)) = "$Id: nopcluster.cpp,v 1.15 2007\/08\/17 19:42:45 dkindred Exp $";$/;"	v	file:
rcsid	packetProtection.cpp	/^static const char *rcsid __attribute__ ((unused)) = "$Id: packetProtection.cpp,v 1.14 2007\/04\/26 20:22:56 dkindred Exp $";$/;"	v	file:
rcsid	packetapi.cpp	/^static const char *rcsid __attribute__ ((unused)) = "$Id: packetapi.cpp,v 1.35 2007\/09\/04 20:51:02 dkindred Exp $";$/;"	v	file:
rcsid	packetstats.cpp	/^static const char *rcsid __attribute__ ((unused)) = "$Id: packetstats.cpp,v 1.4 2007\/08\/30 14:08:12 dkindred Exp $";$/;"	v	file:
rcsid	pgraphwatcher.c	/^static const char *rcsid __attribute__ ((unused)) = "$Id: pgraphwatcher.c,v 1.5 2007\/06\/27 22:08:47 mheyman Exp $";$/;"	v	file:
rcsid	positionweight.c	/^static const char *rcsid __attribute__ ((unused)) = "$Id: positionweight.c,v 1.10 2007\/08\/19 18:23:10 dkindred Exp $";$/;"	v	file:
rcsid	rng.cc	/^static const char rcsid[] __attribute__((unused))=$/;"	v	file:
rcsid	routing.cpp	/^static const char *rcsid __attribute__ ((unused)) = "$Id: routing.cpp,v 1.24 2007\/04\/23 18:51:07 dkindred Exp $";$/;"	v	file:
rcsid	routingdetector.c	/^static const char *rcsid __attribute__ ((unused)) = "$Id: routingdetector.c,v 1.29 2007\/06\/27 22:08:47 mheyman Exp $";$/;"	v	file:
rcsid	statetest.c	/^static const char *rcsid __attribute__ ((unused)) = "$Id: statetest.c,v 1.6 2007\/07\/20 20:24:28 dkindred Exp $";$/;"	v	file:
rcsid	tealabcontrol.c	/^static const char *rcsid __attribute__ ((unused)) = "$Id: tealabcontrol.c,v 1.12 2007\/06\/27 22:08:47 mheyman Exp $";$/;"	v	file:
rcsid	test.c	/^static const char *rcsid __attribute__ ((unused)) = "$Id: test.c,v 1.7 2007\/04\/25 14:20:05 dkindred Exp $";$/;"	v	file:
rcsid	testapi.c	/^static const char *rcsid __attribute__ ((unused)) = "$Id: testapi.c,v 1.39 2007\/08\/17 19:43:45 dkindred Exp $";$/;"	v	file:
rcsid	testhello.cpp	/^static const char *rcsid __attribute__ ((unused)) = "$Id: testhello.cpp,v 1.11 2006\/11\/29 21:33:34 tjohnson Exp $";$/;"	v	file:
rcsid	testtraffic.cpp	/^static const char *rcsid __attribute__ ((unused)) = "$Id: testtraffic.cpp,v 1.16 2006\/06\/23 21:41:17 tjohnson Exp $";$/;"	v	file:
rcsid	watcher.cpp	/^static const char *rcsid __attribute__ ((unused)) = "$Id: watcher.cpp,v 1.127 2007\/08\/14 20:17:03 dkindred Exp $";$/;"	v	file:
rcsid	watcherGPS.cpp	/^static const char *rcsid __attribute__ ((unused)) = "$Id: watcherGPS.cpp,v 1.7 2007\/07\/11 03:50:45 dkindred Exp $";$/;"	v	file:
rcsid	watchermovement.cpp	/^static const char *rcsid __attribute__ ((unused)) = "$Id: watchermovement.cpp,v 1.14 2007\/04\/23 18:51:07 dkindred Exp $";$/;"	v	file:
readLog	apisupport.h	/^	CommunicationsLogStatePtr readLog; \/* non-NULL if reading from a log instead of talking to a daemon *\/$/;"	m	struct:CommunicationsState
readNext	goodwinmerge.c	/^static void readNext(CommunicationsLogMerge *clm, int usegpsclock)$/;"	f	file:
realPacketRec	livenetwork.cpp	/^static packet *realPacketRec(int fd, State *st)$/;"	f	file:
realPacketSend	livenetwork.cpp	/^static int realPacketSend(State *st, packet *p)$/;"	f	file:
rebuildEverything	amroute.cpp	/^static int rebuildEverything = 12000;$/;"	v	file:
received	amroute.h	/^    amroutePacketTypeStats received, ignored;$/;"	m	struct:__anon27
recordPacket	packetstats.cpp	/^	void recordPacket(PacketProto proto, unsigned int port,$/;"	f	class:PacketStats
recordPacket	packetstats.cpp	/^void recordPacket(struct PacketStats *stats,$/;"	f
rectime	des.h	/^	destime rectime;		\/* timestamp (in future...) of event  *\/$/;"	m	struct:eventnode
rectime	des.h	/^	destime rectime;		\/* timestamp of this bucket *\/$/;"	m	struct:eventbucket
refcount	des.h	/^	int refcount;  $/;"	m	struct:packet
registerNewUntransform	transDuo.c	/^static void registerNewUntransform(struct TransDuoManager *m, Untransform *u)$/;"	f	file:
repBcastXmitByte	idsCommunications-sanitized.h	/^    long long int bcastRecByte,origBcastXmitByte, repBcastXmitByte;$/;"	m	struct:ApiPacketCount
repBcastXmitByte	idsCommunications.h	/^    long long int bcastRecByte,origBcastXmitByte, repBcastXmitByte;$/;"	m	struct:ApiPacketCount
repBcastXmitCount	idsCommunications-sanitized.h	/^    long long int bcastRecCount,origBcastXmitCount, repBcastXmitCount;$/;"	m	struct:ApiPacketCount
repBcastXmitCount	idsCommunications.h	/^    long long int bcastRecCount,origBcastXmitCount, repBcastXmitCount;$/;"	m	struct:ApiPacketCount
repUnicastXmitByte	idsCommunications-sanitized.h	/^    long long int unicastRecByte,origUnicastXmitByte, repUnicastXmitByte;$/;"	m	struct:ApiPacketCount
repUnicastXmitByte	idsCommunications.h	/^    long long int unicastRecByte,origUnicastXmitByte, repUnicastXmitByte;$/;"	m	struct:ApiPacketCount
repUnicastXmitCount	idsCommunications-sanitized.h	/^    long long int unicastRecCount,origUnicastXmitCount,repUnicastXmitCount;$/;"	m	struct:ApiPacketCount
repUnicastXmitCount	idsCommunications.h	/^    long long int unicastRecCount,origUnicastXmitCount,repUnicastXmitCount;$/;"	m	struct:ApiPacketCount
repel	mobility.h	/^		struct Repel repel;$/;"	m	union:MobilityConstraint::__anon43	typeref:struct:MobilityConstraint::__anon43::Repel
repelRadius	mobility.h	/^	double repelRadius;$/;"	m	struct:Repel
reportSend	demosigningdetector.c	/^static void reportSend(State *state)$/;"	f	file:
reportnum	routingdetector.c	/^	int reportnum;$/;"	m	struct:detector	file:
reportperiod	demodetector.c	/^	int reportperiod;$/;"	m	struct:detector	file:
reportperiod	demosigningdetector.c	/^    int reportperiod;$/;"	m	struct:__anon7	file:
reportperiod	goodwin.cpp	/^	int reportperiod;$/;"	m	struct:detector	file:
reportperiod	routingdetector.c	/^	int reportperiod;		\/* frequency to generate reports at *\/$/;"	m	struct:DetectorInit	file:
reportperiod	routingdetector.c	/^	int reportperiod;		\/* frequency to generate reports at *\/$/;"	m	struct:detector	file:
reqseqnum	routing.h	/^	unsigned int reqseqnum;$/;"	m	struct:routingState
request	apisupport.h	/^	ApiCommandType request;            \/* Is this request a subscribe, or a delete?   *\/$/;"	m	struct:MessageHandlerRequest
requestlist	routing.h	/^	routingRequest *requestlist;$/;"	m	struct:routingState
resetTimeout	demosigningdetector.c	/^static void resetTimeout($/;"	f	file:
reset_next_substream	rng.cc	/^void RNG::reset_next_substream () $/;"	f	class:RNG
reset_start_stream	rng.cc	/^void RNG::reset_start_stream () $/;"	f	class:RNG
reset_start_substream	rng.cc	/^void RNG::reset_start_substream () $/;"	f	class:RNG
resolveCore	amroute.cpp	/^STATIC ManetAddr resolveCore(ManetAddr x, ManetAddr y)$/;"	f
rexmittimeout	data.cpp	/^	destime rexmittimeout;$/;"	m	struct:InFlight	file:
rfRNG	main.cpp	/^	RNG *rfRNG;$/;"	m	struct:ManetRFModelState	file:
rfState	des.h	/^	struct ManetRFModelState *rfState;$/;"	m	struct:manet	typeref:struct:manet::ManetRFModelState
rnd	bft.cpp	/^static RNG *rnd=NULL;$/;"	v	file:
rnd	graphcluster.cpp	/^static RNG *rnd=NULL;$/;"	v	file:
rnd	hello.cpp	/^static RNG *rnd=NULL;$/;"	v	file:
rnd	interim2.cpp	/^static RNG *rnd=NULL;$/;"	v	file:
rnd	nopcluster.cpp	/^static RNG *rnd=NULL;$/;"	v	file:
rng_test	rng.h	65;"	d
root	interim2.cpp	/^	ManetAddr root;$/;"	m	struct:__anon57	file:
root	interim2.cpp	/^	ManetAddr root;$/;"	m	struct:clusteringNeighbor	file:
root	interim2.cpp	/^	ManetAddr root;$/;"	m	struct:clusteringState	file:
root	routingdetector.c	/^	ManetAddr root;                   \/* our root node (may be NODE_LOCAL, or NODE_BROADCAST for none) *\/$/;"	m	struct:detector	file:
rootDistance	interim2.cpp	/^	int rootDistance;	\/* only set this using setRootDistance() *\/$/;"	m	struct:clusteringState	file:
rootDistance	interim2.cpp	/^	int rootDistance;  \/* the neighbor computes its distance from the root, and announces it in hellos *\/$/;"	m	struct:clusteringNeighbor	file:
rootDistance	interim2.cpp	/^	int rootDistance;$/;"	m	struct:__anon57	file:
rootGroupMinSize	interim2.cpp	/^	int rootGroupMinSize;  		\/* 0=don't do dynamic root group, else use this val and expand root group radius *\/$/;"	m	struct:clusteringState	file:
rootGroupRadius	interim2.cpp	/^	int rootGroupRadius;	\/* -1 means "not set".  0..255 are valid *\/$/;"	m	struct:__anon57	file:
rootGroupRadius	interim2.cpp	/^	int rootGroupRadius;	\/* -1 means "not set".  0..255 are valid *\/$/;"	m	struct:clusteringNeighbor	file:
rootGroupRadius	interim2.cpp	/^	int rootGroupRadius; 		\/* nodes whose rootDistance <= this value are in the RG *\/$/;"	m	struct:clusteringState	file:
rootGroupRadiusMax	interim2.cpp	/^	int rootGroupRadiusMax;$/;"	m	struct:clusteringState	file:
rootMarshal	interim2.cpp	/^static packet *rootMarshal(manetNode *us, packetRoot *p)$/;"	f	file:
rootRec	interim2.cpp	/^static void rootRec(manetNode *us, packet *p)$/;"	f	file:
rootSend	interim2.cpp	/^static void rootSend(manetNode *us, neighbor *dst)$/;"	f	file:
rootUnmarshal	interim2.cpp	/^static packetRoot *rootUnmarshal(packet *np)$/;"	f	file:
root_distance	bft.cpp	/^	int root_distance;$/;"	m	struct:__anon60	file:
root_distance	bft.cpp	/^        int root_distance;$/;"	m	struct:clusteringNeighbor	file:
root_distance	graphcluster.cpp	/^	int root_distance;$/;"	m	struct:__anon48	file:
root_distance	graphcluster.cpp	/^	int root_distance;$/;"	m	struct:__anon50	file:
root_distance	graphcluster.cpp	/^	int root_distance;$/;"	m	struct:clusteringNeighbor	file:
root_seqnum	bft.cpp	/^	int root_seqnum;$/;"	m	struct:__anon60	file:
root_seqnum	bft.cpp	/^        int root_seqnum;$/;"	m	struct:clusteringNeighbor	file:
root_seqnum	bft.h	/^        int root_seqnum;$/;"	m	struct:clusteringState
root_seqnum	graphcluster.cpp	/^	int root_seqnum;$/;"	m	struct:__anon48	file:
root_seqnum	graphcluster.cpp	/^	int root_seqnum;$/;"	m	struct:__anon50	file:
root_seqnum	graphcluster.cpp	/^	int root_seqnum;$/;"	m	struct:__anon51	file:
root_seqnum	graphcluster.cpp	/^	int root_seqnum;$/;"	m	struct:clusteringNeighbor	file:
root_seqnum	graphcluster.cpp	/^	int root_seqnum;$/;"	m	struct:clusteringState	file:
root_seqnum	graphcluster.cpp	/^        int root_seqnum;$/;"	m	struct:__anon49	file:
rootdistancecolor	routingdetector.c	/^	unsigned char rootdistancecolor[4];$/;"	m	struct:DetectorInit	file:
rootdistancecolor	routingdetector.c	/^	unsigned char rootdistancecolor[4];$/;"	m	struct:detector	file:
rootdistanceenable	routingdetector.c	/^	int rootdistanceenable;$/;"	m	struct:DetectorInit	file:
rootdistanceenable	routingdetector.c	/^	int rootdistanceenable;$/;"	m	struct:detector	file:
rootdistancefamily	routingdetector.c	/^	int rootdistancefamily;$/;"	m	struct:DetectorInit	file:
rootdistancefamily	routingdetector.c	/^	int rootdistancefamily;$/;"	m	struct:detector	file:
rootedgecolor	routingdetector.c	/^	unsigned char rootedgecolor[4];$/;"	m	struct:DetectorInit	file:
rootedgecolor	routingdetector.c	/^	unsigned char rootedgecolor[4];$/;"	m	struct:detector	file:
rootedgeenable	routingdetector.c	/^	int rootedgeenable;$/;"	m	struct:DetectorInit	file:
rootedgeenable	routingdetector.c	/^	int rootedgeenable;$/;"	m	struct:detector	file:
rootedgefamily	routingdetector.c	/^	int rootedgefamily;$/;"	m	struct:DetectorInit	file:
rootedgefamily	routingdetector.c	/^	int rootedgefamily;$/;"	m	struct:detector	file:
rootflag	demoaggregator.c	/^    int rootflag;$/;"	m	struct:detector	file:
rootflag	demodetector.c	/^	int rootflag;$/;"	m	struct:detector	file:
rootflag	demoresponder.c	/^	int rootflag;$/;"	m	struct:detector	file:
rootflag	demorewriter.c	/^	int rootflag;$/;"	m	struct:detector	file:
rootflag	demosigningaggregator.c	/^    int rootflag;$/;"	m	struct:__anon9	file:
rootflag	demosigningdetector.c	/^    int rootflag;$/;"	m	struct:__anon7	file:
rootflag	des.h	/^	int rootflag;           \/* node is a hierarchy root *\/$/;"	m	struct:manetNode
rootflag	idsCommunications-sanitized.h	/^    int rootflag;$/;"	m	struct:ApiStatus
rootflag	idsCommunications.h	/^    int rootflag;$/;"	m	struct:ApiStatus
rootflag	interim.cpp	/^	int rootflag;$/;"	m	struct:clusteringState	file:
rootflag	interim2.cpp	/^	int rootflag;      \/* announced by neighbor, indicates that it is root, is actually one of 0, INTERIM2_ROOT, or INTERIM2_ROOTNAILED *\/$/;"	m	struct:clusteringNeighbor	file:
rootflag	interim2.cpp	/^	int rootflag;$/;"	m	struct:__anon57	file:
rootflag	pgraphwatcher.c	/^	int rootflag;$/;"	m	struct:detector	file:
rootflag	positionweight.c	/^	int rootflag;$/;"	m	struct:detector	file:
rootgroup	hierarchy2text.cpp	/^    bool rootgroup;$/;"	m	class:PrintChildAndParent	file:
rootgroup	hierarchy2text.cpp	/^    bool rootgroup;$/;"	m	class:PrintMeAndMyParents	file:
rootgroupenable	routingdetector.c	/^	int rootgroupenable;$/;"	m	struct:DetectorInit	file:
rootgroupenable	routingdetector.c	/^	int rootgroupenable;$/;"	m	struct:detector	file:
rootgroupflag	des.h	/^	int rootgroupflag;      \/* node is an active member of "root group" *\/$/;"	m	struct:manetNode
rootgroupflag	idsCommunications.h	/^    unsigned int rootgroupflag:1;$/;"	m	struct:__anon15
rootgroupflag	routingdetector.c	/^	int rootgroupflag;                \/* are we in the root group? *\/$/;"	m	struct:detector	file:
rootid	bft.cpp	/^	ManetAddr rootid;$/;"	m	struct:__anon60	file:
rootid	bft.cpp	/^        ManetAddr rootid;$/;"	m	struct:clusteringNeighbor	file:
rootid	bft.h	/^        ManetAddr rootid;$/;"	m	struct:clusteringState
rootid	graphcluster.cpp	/^	ManetAddr rootid;$/;"	m	struct:__anon48	file:
rootid	graphcluster.cpp	/^	ManetAddr rootid;$/;"	m	struct:__anon50	file:
rootid	graphcluster.cpp	/^	ManetAddr rootid;$/;"	m	struct:__anon51	file:
rootid	graphcluster.cpp	/^	ManetAddr rootid;$/;"	m	struct:clusteringNeighbor	file:
rootid	graphcluster.cpp	/^	ManetAddr rootid;$/;"	m	struct:clusteringState	file:
rootid	graphcluster.cpp	/^        ManetAddr rootid;$/;"	m	struct:__anon49	file:
rotateX	watcher.cpp	/^static void rotateX(float deg)$/;"	f	file:
rotateY	watcher.cpp	/^static void rotateY(float deg)$/;"	f	file:
rotateZ	watcher.cpp	/^static void rotateZ(float deg)$/;"	f	file:
route	interim2.cpp	/^	ManetAddr route[MAXHOP];$/;"	m	struct:__anon57	file:
route	interim2.cpp	/^	ManetAddr route[MAXHOP];$/;"	m	struct:__anon58	file:
route	interim2.cpp	/^	ManetAddr route[MAXHOP];$/;"	m	struct:clusteringNeighbor	file:
routeDelete	routing.cpp	/^static void routeDelete(manetNode *us, ManetAddr dst)$/;"	f	file:
routeDump	routingdetector.c	/^static void routeDump(FILE *fil,Route *r)$/;"	f	file:
routeDumpBuffered	routing.cpp	/^void routeDumpBuffered(manetNode *us,FILE *fd)$/;"	f
routeFlags	apisupport.h	/^	int routeFlags;		\/* This is used to indicate if DATA_ROUTE_NOFAILOVER should be set on xmit  *\/$/;"	m	struct:MessageInfo
routeFree	routingdetector.c	/^static void routeFree(Route *r)$/;"	f	file:
routeHopCntComputeInterval	gmcluster.cpp	/^	int routeHopCntComputeInterval; \/\/ How often to call nodeGetHopAndNbrCount() to compute hop count and nbr count.$/;"	m	struct:groupClusterState	file:
routeInit	packetProtection.cpp	/^void routeInit(manetNode*) { return; }$/;"	f
routeInit	routing.cpp	/^void routeInit(manetNode *us)$/;"	f
routeInsert	routing.cpp	/^static routingNode *routeInsert(manetNode *us, ManetAddr dst, ManetAddr nexthop, int distance)$/;"	f	file:
routeInsert	routingdetector.c	/^static void routeInsert(Route **list, Route *n)$/;"	f	file:
routeNumber	routingdetector.c	/^static int routeNumber(Route *r)$/;"	f	file:
routePacketData	routing.cpp	/^void routePacketData(manetNode *us, packet *p)$/;"	f
routePacketRoute	routing.cpp	/^void routePacketRoute(manetNode *us, packet *p)$/;"	f
routePacketTest	routing.cpp	/^void routePacketTest(manetNode *us, packet *p)$/;"	f
routeRead	routingdetector.c	/^static Route *routeRead(ManetAddr manetnetwork,ManetAddr manetmask)$/;"	f	file:
routeSearch	routing.cpp	/^static routingNode *routeSearch(manetNode *us, ManetAddr dst)$/;"	f	file:
routeSearchNext	routingdetector.c	/^static Route *routeSearchNext(Route *list, Route *key)$/;"	f	file:
routeSend	routing.cpp	/^void routeSend(manetNode *us, packet *p)$/;"	f
routeSendCheck	routing.cpp	/^static void routeSendCheck(manetNode *us)$/;"	f	file:
routeTest	routing.cpp	/^void routeTest(manetNode *us, void *data)$/;"	f
routeedgewidth	routingdetector.c	/^	int routeedgewidth; $/;"	m	struct:DetectorInit	file:
routeedgewidth	routingdetector.c	/^	int routeedgewidth;$/;"	m	struct:detector	file:
routelen	graphcluster.cpp	/^	int routelen;$/;"	m	struct:__anon50	file:
routelen	interim2.cpp	/^	int routelen;$/;"	m	struct:__anon57	file:
routelen	interim2.cpp	/^	int routelen;$/;"	m	struct:__anon58	file:
routelen	interim2.cpp	/^	int routelen;$/;"	m	struct:clusteringNeighbor	file:
routelist	routing.h	/^	routingNode *routelist;$/;"	m	struct:routingState
routetype	data.h	/^	DataRoute routetype;$/;"	m	struct:PacketData
routing	des.h	/^	struct routingState *routing;    \/* routing stuff. *\/$/;"	m	struct:manetNode	typeref:struct:manetNode::routingState
routingNode	routing.h	/^typedef struct routingNode$/;"	s
routingNode	routing.h	/^} routingNode;$/;"	t	typeref:struct:routingNode
routingRequest	routing.h	/^typedef struct routingRequest$/;"	s
routingRequest	routing.h	/^} routingRequest;$/;"	t	typeref:struct:routingRequest
routingRequestDelete	routing.cpp	/^static void routingRequestDelete(routingRequest **list, ManetAddr src)$/;"	f	file:
routingRequestInsert	routing.cpp	/^static routingRequest *routingRequestInsert(routingRequest **list, ManetAddr src, ManetAddr dst, int seqnum, int hopcount)$/;"	f	file:
routingRequestSearch	routing.cpp	/^static routingRequest *routingRequestSearch(routingRequest **list, ManetAddr src, ManetAddr dst)$/;"	f	file:
routingState	routing.h	/^typedef struct routingState$/;"	s
routingState	routing.h	/^} routingState;$/;"	t	typeref:struct:routingState
runFlag	watcher.cpp	/^    int runFlag;    \/* Or, proceed in real time...  *\/$/;"	m	struct:__anon3	file:
runflag	tealabcontrol.c	/^	int runflag;$/;"	m	struct:__anon1	file:
runningAMRoute	amroute.h	/^    int runningAMRoute;$/;"	m	struct:clusteringState
runstartfile	watcher.cpp	/^    destime runstartfile;$/;"	m	struct:__anon3	file:
runstartwall	watcher.cpp	/^    destime runstartwall;$/;"	m	struct:__anon3	file:
rwx	mobility.h	/^	int rwx, rwy;     \/* private vars for mobilityMove.  Need to be elsewhere *\/$/;"	m	struct:mobilityState
rwx	mobility.h	/^	int rwx, rwy;$/;"	m	struct:MobilityMove
rwy	mobility.h	/^	int rwx, rwy;     \/* private vars for mobilityMove.  Need to be elsewhere *\/$/;"	m	struct:mobilityState
rwy	mobility.h	/^	int rwx, rwy;$/;"	m	struct:MobilityMove
sample	metric.h	/^	double *sample;$/;"	m	struct:__anon53
scaleAndShiftToCenter	watcher.cpp	/^static void scaleAndShiftToCenter(manet *m, ScaleAndShiftUpdate onChangeOrAlways)$/;"	f	file:
scaleAndShiftToSeeOnManet	watcher.cpp	/^static void scaleAndShiftToSeeOnManet($/;"	f	file:
scaleLine	idsCommunications.h	/^    float scaleLine[2];$/;"	m	struct:__anon19
scaleText	idsCommunications.h	/^    float scaleText[2];$/;"	m	struct:__anon19
scaleX	main.cpp	/^float scaleX = 0.02, scaleY = 0.02, scaleZ = 0.10;$/;"	v
scaleX	test.c	/^float scaleX = 1.0, scaleY = 1.0, scaleZ = 1.0;$/;"	v
scaleX	watcher.cpp	/^    float scaleX;$/;"	m	struct:__anon4	file:
scaleY	main.cpp	/^float scaleX = 0.02, scaleY = 0.02, scaleZ = 0.10;$/;"	v
scaleY	test.c	/^float scaleX = 1.0, scaleY = 1.0, scaleZ = 1.0;$/;"	v
scaleY	watcher.cpp	/^    float scaleY;$/;"	m	struct:__anon4	file:
scaleZ	main.cpp	/^float scaleX = 0.02, scaleY = 0.02, scaleZ = 0.10;$/;"	v
scaleZ	test.c	/^float scaleX = 1.0, scaleY = 1.0, scaleZ = 1.0;$/;"	v
scaleZ	watcher.cpp	/^    float scaleZ;$/;"	m	struct:__anon4	file:
screenDistSquared	graphics.cpp	/^static int screenDistSquared($/;"	f	file:
secondLength	bufferPair.c	/^    uint32_t secondLength; \/\/ network byte order$/;"	m	struct:BufferPair	file:
seed	rng.cc	/^long RNG::seed() $/;"	f	class:RNG
seed	rng.h	/^	inline int seed() { return stream_.seed(); }$/;"	f	class:RNG
seed	rng.h	/^	long seed() { return seed_; }$/;"	f	class:RNGImplementation
seed_	rng.h	/^	long seed_;$/;"	m	class:RNGImplementation
selectCoordinator	hello.cpp	/^static void selectCoordinator(manetNode *us)$/;"	f	file:
selectCoordinator	interim2.cpp	/^static void selectCoordinator(manetNode *us)$/;"	f	file:
selectLoop	demoaggregator.c	/^static void selectLoop(detector *dt)$/;"	f	file:
selectLoop	demodetector.c	/^static void selectLoop(detector *dt)$/;"	f	file:
selectLoop	demoresponder.c	/^static void selectLoop(detector *dt)$/;"	f	file:
selectLoop	demorewriter.c	/^static void selectLoop(detector *dt)$/;"	f	file:
selectLoop	demosigningaggregator.c	/^static void selectLoop(State *dt)$/;"	f	file:
selectLoop	demosigningdetector.c	/^static void selectLoop(State *state)$/;"	f	file:
selectLoop	demoverifiedalertreader.c	/^static void selectLoop(State *dt)$/;"	f	file:
selectLoop	glancer.c	/^static void selectLoop(CommunicationsStatePtr cs, int *flag)$/;"	f	file:
selectLoop	goodwin.cpp	/^void selectLoop(detector *dtlist, Config *conf)$/;"	f
selectLoop	livenetwork.cpp	/^static int selectLoop(State *st)$/;"	f	file:
selectLoop	pgraphwatcher.c	/^static void selectLoop(detector *dt)$/;"	f	file:
selectLoop	routingdetector.c	/^static void selectLoop(detector *dt)$/;"	f	file:
selectLoop	tealabcontrol.c	/^static void selectLoop(state *st)$/;"	f	file:
selectLoop	testapi.c	/^static void selectLoop(CommunicationsStatePtr cs)$/;"	f	file:
selecttime	hello.cpp	/^	destime selecttime;$/;"	m	struct:helloState	file:
selecttime	interim2.cpp	/^	destime selecttime;$/;"	m	struct:clusteringState	file:
sendAMRoutePacket	amroutesend.cpp	/^void sendAMRoutePacket(manetNode *us, ManetAddr dest, int ttl,$/;"	f
sendCluster	graphcluster.cpp	/^static void sendCluster(manetNode *us)$/;"	f	file:
sendDaddy	graphcluster.cpp	/^static void sendDaddy(manetNode *us)$/;"	f	file:
sendGidPacket	gmcluster.cpp	/^void sendGidPacket(manetNode *us, const gidPacket &gid, const bool &forward)$/;"	f
sendJoinReq	amroute.cpp	/^STATIC void sendJoinReq(manetNode *us, void *data)$/;"	f
sendPacketAck	data.cpp	/^static void sendPacketAck(manetNode *us, InFlight *inf)$/;"	f	file:
sendTerm	graphcluster.cpp	/^static void sendTerm(manetNode *us)$/;"	f	file:
sendTermTimer	graphcluster.cpp	/^static void sendTermTimer(manetNode *us,void *data)$/;"	f	file:
sendToNeighbors	amroutesend.cpp	/^void sendToNeighbors(int ntype, manetNode *us, amroutePacketType *type,$/;"	f
sendTree	bft.cpp	/^static void sendTree(manetNode *us)$/;"	f	file:
sendTree	graphcluster.cpp	/^static void sendTree(manetNode *us)$/;"	f	file:
sendTreeCreate	amroute.cpp	/^STATIC void sendTreeCreate(manetNode *us, void *data)$/;"	f
sendTreeInit	bft.cpp	/^static void sendTreeInit(manetNode *us, void *data)$/;"	f	file:
sendTreeTimer	bft.cpp	/^static void sendTreeTimer(manetNode *us, void *data)$/;"	f	file:
sendTreeTimer	graphcluster.cpp	/^static void sendTreeTimer(manetNode *us, void *data)$/;"	f	file:
seq	graphcluster.cpp	/^	int seq;$/;"	m	struct:__anon49	file:
seq	packetProtection.cpp	/^	nnp_sequence_number_t seq;$/;"	m	struct:TupPriv	file:
seq	packetProtection.cpp	/^	nnp_sequence_number_t seq;$/;"	m	struct:TupPub	file:
seq	transformSign.c	/^    nnp_sequence_number_t seq;$/;"	m	struct:SignTransformData	file:
seq	untransformSign.c	/^    nnp_sequence_number_record seq;$/;"	m	struct:peer_entry	file:
seqNo	amroutesend.cpp	/^static int seqNo = 1;		\/* start with 1 *\/$/;"	v	file:
seq_rec	packetProtection.cpp	/^	nnp_sequence_number_record seq_rec;$/;"	m	struct:TupPub	file:
seqno	gmcluster.cpp	/^	unsigned short seqno; $/;"	m	struct:gidPacket	file:
seqno	gmcluster.cpp	/^	unsigned short seqno; $/;"	m	struct:groupClusterState	file:
seqnum	routing.h	/^	unsigned int seqnum;$/;"	m	struct:__anon24
seqnum	routing.h	/^	unsigned int seqnum;$/;"	m	struct:routingRequest
sequenceNumber	amroute.h	/^    int sequenceNumber;$/;"	m	struct:packet_amroute_s
sequencenum	bft.h	/^        int sequencenum;$/;"	m	struct:__anon2
sequencenum	graphcluster.cpp	/^        int sequencenum;$/;"	m	struct:__anon47	file:
sequencenum	hello.cpp	/^        int sequencenum;$/;"	m	struct:__anon59	file:
sequencenum	interim2.cpp	/^	int sequencenum;$/;"	m	struct:clusteringState	file:
sequencenum	interim2.cpp	/^        int sequencenum;$/;"	m	struct:__anon57	file:
sequencenum	simulation.h	/^	int sequencenum;$/;"	m	struct:__anon31
sequentialCount	interim2.cpp	/^	int sequentialCount;    \/* how many hello packets have we heard with no gaps in the sequence numbers?  *\/$/;"	m	struct:clusteringNeighbor	file:
setBit	gmclusterTest.cpp	/^void setBit(const int &A, const int &B, bool value)$/;"	f
setClusterHead	gmcluster.cpp	/^void setClusterHead(manetNode *us)$/;"	f
setClusterHead	interim2.cpp	/^static void setClusterHead(manetNode *us, neighbor *ch, const char *reason)$/;"	f	file:
setColor	routingdetector.c	/^static void setColor(detector *st)$/;"	f	file:
setLevel	interim2.cpp	/^static void setLevel(manetNode *us, int newLevel)$/;"	f	file:
setLogicalCore	amroute.cpp	/^STATIC void setLogicalCore(manetNode *us, ManetAddr addr)$/;"	f
setRaw	transform.h	/^    int (*setRaw)($/;"	m	struct:Transform
setRaw	transformNull.c	/^static int setRaw($/;"	f	file:
setRaw	transformSign.c	/^static int setRaw($/;"	f	file:
setRoot	interim2.cpp	/^static void setRoot(manetNode *us)$/;"	f	file:
setRootDistance	interim2.cpp	/^static void setRootDistance(manetNode *us, int newDistance)$/;"	f	file:
setRootGroupRadius	interim2.cpp	/^static void setRootGroupRadius(manetNode *us)$/;"	f	file:
setRootTo	interim2.cpp	/^static void setRootTo(manetNode *us, ManetAddr newRoot)$/;"	f	file:
setRootness	routingdetector.c	/^static void setRootness(detector *st, ManetAddr addr, int distance, int isRoot)$/;"	f	file:
setTransformed	untransform.h	/^    int (*setTransformed)($/;"	m	struct:Untransform
setTransformed	untransformNull.c	/^static int setTransformed($/;"	f	file:
setTransformed	untransformSign.c	/^static int setTransformed($/;"	f	file:
set_antithetic	rng.cc	/^void RNG::set_antithetic (bool a) $/;"	f	class:RNG
set_package_seed	rng.cc	/^void RNG::set_package_seed (const unsigned long seed[6]) $/;"	f	class:RNG
set_seed	rng.cc	/^RNG::set_seed(RNGSources source, int seedvalue)$/;"	f	class:RNG
set_seed	rng.cc	/^void RNG::set_seed (const unsigned long seedvalue[6]) $/;"	f	class:RNG
set_seed	rng.cc	/^void RNG::set_seed (long seedvalue) $/;"	f	class:RNG
set_seed	rng.h	/^	void set_seed(long seed) { seed_ = seed; }$/;"	f	class:RNGImplementation
shiftCenterDown	watcher.cpp	/^static void shiftCenterDown()$/;"	f	file:
shiftCenterIn	watcher.cpp	/^static void shiftCenterIn()$/;"	f	file:
shiftCenterLeft	watcher.cpp	/^static void shiftCenterLeft()$/;"	f	file:
shiftCenterOut	watcher.cpp	/^static void shiftCenterOut()$/;"	f	file:
shiftCenterRight	watcher.cpp	/^static void shiftCenterRight()$/;"	f	file:
shiftCenterUp	watcher.cpp	/^static void shiftCenterUp()$/;"	f	file:
shiftX	main.cpp	/^float shiftX = 0.0, shiftY = 0.0, shiftZ = 0.0;$/;"	v
shiftX	test.c	/^float shiftX = 0.0, shiftY = 0.0, shiftZ = 0.0;$/;"	v
shiftX	watcher.cpp	/^    float shiftX;$/;"	m	struct:__anon4	file:
shiftY	main.cpp	/^float shiftX = 0.0, shiftY = 0.0, shiftZ = 0.0;$/;"	v
shiftY	test.c	/^float shiftX = 0.0, shiftY = 0.0, shiftZ = 0.0;$/;"	v
shiftY	watcher.cpp	/^    float shiftY;$/;"	m	struct:__anon4	file:
shiftZ	main.cpp	/^float shiftX = 0.0, shiftY = 0.0, shiftZ = 0.0;$/;"	v
shiftZ	test.c	/^float shiftX = 0.0, shiftY = 0.0, shiftZ = 0.0;$/;"	v
shiftZ	watcher.cpp	/^    float shiftZ;$/;"	m	struct:__anon4	file:
showflags	infrasniff.cpp	/^unsigned int showflags=0xFFFFFFFF;$/;"	v
showpacket	infrasniff.cpp	/^int showpacket;$/;"	v
sigint	livenetwork.cpp	/^void sigint(int)$/;"	f
sign	demosigningaggregator.c	/^    Transform *sign;$/;"	m	struct:__anon9	file:
sign	demosigningdetector.c	/^    Transform *sign;$/;"	m	struct:__anon7	file:
signer	untransformSign.c	/^    ManetAddr signer;$/;"	m	struct:SignData	file:
somelongs	ut_marshal.c	/^static long somelongs[] = {$/;"	v	file:
somepoints	test.c	/^points somepoints[10];$/;"	v
someulongs	ut_marshal.c	/^static unsigned long someulongs[] = {$/;"	v	file:
speed	mobility.h	/^	double speed;$/;"	m	struct:MobilityMove
speed	mobility.h	/^	double speed;$/;"	m	struct:mobilityState
speed	watcher.cpp	/^    int speed;$/;"	m	struct:__anon3	file:
sptr	transformSign.c	/^typedef struct SignData *sptr;$/;"	t	typeref:struct:SignData	file:
sptr	untransformSign.c	/^typedef struct SignData *sptr;$/;"	t	typeref:struct:SignData	file:
src	data.cpp	/^	ManetAddr src;$/;"	m	struct:InFlightKey	file:
src	des.h	/^	ManetAddr src;$/;"	m	struct:packet
src	flood.h	/^	ManetAddr src;$/;"	m	struct:floodEntry
src	routing.h	/^	ManetAddr src,dst;                  \/* src, dst and seqnum are the key  *\/$/;"	m	struct:routingRequest
src	routing.h	/^	ManetAddr src,dst;     \/* destination on RREQUEST...  *\/$/;"	m	struct:__anon24
srcid	bft.cpp	/^	ManetAddr srcid;$/;"	m	struct:__anon60	file:
srcid	graphcluster.cpp	/^	ManetAddr srcid;$/;"	m	struct:__anon48	file:
st	livenetwork.cpp	/^State *st;$/;"	v
stand_alone	rng.h	61;"	d
stand_alone	rng.h	64;"	d
startClusteringAlgorithm	gmcluster.cpp	/^void startClusteringAlgorithm(manetNode *us, void *data)$/;"	f
starttime	des.h	/^	destime starttime,curtime;$/;"	m	struct:manet
state	graphcluster.cpp	/^	clusterState state;$/;"	m	struct:clusteringState	file:
state	idsCommunications-sanitized.h	/^    CommunicationsNeighborState state;	\/* If the neighbor is present$/;"	m	struct:CommunicationsNeighbor
state	idsCommunications-sanitized.h	/^    IDSStateElement *state;$/;"	m	struct:__anon38
state	idsCommunications.h	/^    CommunicationsNeighborState state;	\/* If the neighbor is present$/;"	m	struct:CommunicationsNeighbor
state	idsCommunications.h	/^    IDSStateElement *state;$/;"	m	struct:__anon16
state	tealabcontrol.c	/^} state;$/;"	t	typeref:struct:__anon1	file:
state	watchermovement.cpp	/^} state;$/;"	t	typeref:struct:__anon55	file:
stateCreate	demosigningaggregator.c	/^static State *stateCreate($/;"	f	file:
stateCreate	demosigningdetector.c	/^static State *stateCreate($/;"	f	file:
stateCreate	demoverifiedalertreader.c	/^static State *stateCreate($/;"	f	file:
stateDestroy	demosigningaggregator.c	/^static void stateDestroy(State *state)$/;"	f	file:
stateDestroy	demosigningdetector.c	/^static void stateDestroy(State *state)$/;"	f	file:
stateDestroy	demoverifiedalertreader.c	/^static void stateDestroy(State *state)$/;"	f	file:
stateInit	livenetwork.cpp	/^static State *stateInit(Config *conf)$/;"	f	file:
stateRec	interim2.cpp	/^static void stateRec(manetNode *us, packet *p)$/;"	f	file:
stateRec	justneighbors.cpp	/^static void stateRec(manetNode *us, packet *p)$/;"	f	file:
statisticsAdd	amroute.cpp	/^STATIC void statisticsAdd(const amroutePacketType *x, amroutePacketType *y)$/;"	f
statisticsAdd2	amroute.cpp	/^STATIC void statisticsAdd2(const amroutePacketTypeStats *x, amroutePacketTypeStats *y)$/;"	f
statisticsPrint	amroute.cpp	/^STATIC void statisticsPrint(const amroutePacketType *x)$/;"	f
statisticsPrint2	amroute.cpp	/^STATIC void statisticsPrint2(const char *name, const char *event,$/;"	f
stats	infrasniff.cpp	/^} stats;$/;"	v	typeref:struct:__anon61	file:
status	des.h	/^	ApiStatus status;		\/* packet counters, and debugging stuff *\/$/;"	m	struct:manetNode
status	idsCommunications-sanitized.h	/^    IDSPositionStatus status;$/;"	m	struct:IDSPosition
status	idsCommunications.h	/^    IDSPositionStatus status;$/;"	m	struct:IDSPosition
status	packetapi.cpp	/^	ApiStatus status;$/;"	m	struct:PacketApiNodeState	file:
status	testapi.c	/^static void status(const struct MessageInfo *mi, void *messageStatusHandlerData, MessageStatus stat)$/;"	f	file:
status	watcher.cpp	/^void status(void *messageStatusHandlerData, MessageStatus stat)$/;"	f
statusCallback	apisupport.h	/^	MessageStatusHandler statusCallback;   \/* used by the API, to hold the callback to call upon ACK  *\/$/;"	m	struct:MessageInfo
statusCheck	packetapi.cpp	/^static void statusCheck(manetNode *us, int override)$/;"	f	file:
statusCount	des.cpp	/^void statusCount(manetNode *us, int origflag, packet *p)$/;"	f
statusData	apisupport.h	/^	void *statusData;$/;"	m	struct:MessageInfo
statusEnable	packetapi.cpp	/^	int statusEnable;		\/* If true, send this client status messages (debugging) *\/$/;"	m	struct:ApiSession	file:
statusHandler	apisupport.h	/^	CommunicationsStatusUpdateProc statusHandler;		\/* callback for status messages *\/$/;"	m	struct:CommunicationsState
statusHandlerData	apisupport.h	/^	void *statusHandlerData;$/;"	m	struct:CommunicationsState
statusPeriod	apisupport.h	/^	int statusPeriod;					\/* minimum period for status messages (milliseconds) *\/$/;"	m	struct:CommunicationsState
statusPeriod	packetapi.cpp	/^	int statusPeriod;		\/* How frequently does this client want status msgs?  *\/$/;"	m	struct:ApiSession	file:
statusRunning	packetapi.cpp	/^	int statusRunning;$/;"	m	struct:PacketApiNodeState	file:
statusStartCheck	packetapi.cpp	/^static void statusStartCheck(manetNode *us)$/;"	f	file:
statusTimeout	packetapi.cpp	/^static void statusTimeout(manetNode *us, void *data)$/;"	f	file:
statusUpdate	hierarchy2text.cpp	/^void Node::statusUpdate(void *data, ApiStatus *as)$/;"	f	class:Node
std	transformSign.c	/^    struct SignTransformData *std;$/;"	m	struct:SignData	typeref:struct:SignData::SignTransformData	file:
step	des.h	/^	int step;$/;"	m	struct:manet
step	tealabcontrol.c	/^	int step;$/;"	m	struct:__anon1	file:
step	watcher.cpp	/^    int step;     \/* distance to go...  *\/$/;"	m	struct:__anon3	file:
stepSend	tealabcontrol.c	/^static int stepSend(state *st)$/;"	f	file:
stepend	tealabcontrol.c	/^	int stepend;$/;"	m	struct:__anon1	file:
stepfd	tealabcontrol.c	/^	int stepfd;   \/* FD to send step messages to the tealabs  *\/$/;"	m	struct:__anon1	file:
steptime	tealabcontrol.c	/^	int steptime;$/;"	m	struct:__anon1	file:
stoptime	watcher.cpp	/^    destime stoptime;$/;"	m	struct:__anon3	file:
store	transformNull.c	/^    nptr_vec store;$/;"	m	struct:NullTransformData	file:
store	transformSign.c	/^    sptr_vec store;$/;"	m	struct:SignTransformData	file:
store	untransformNull.c	/^    nptr_vec store;$/;"	m	struct:NullUntransformData	file:
store	untransformSign.c	/^    sptr_vec store;$/;"	m	struct:SignUntransformData	file:
strToManetAddr	packetProtection.cpp	/^static ManetAddr strToManetAddr(char const *addrstr)$/;"	f	file:
stream_	rng.h	/^	RNGImplementation stream_;$/;"	m	class:RNG
stringClear	watcher.cpp	/^    char *stringClear;$/;"	m	struct:__anon5	file:
stringSet	watcher.cpp	/^    char *stringSet;$/;"	m	struct:__anon5	file:
strip	mallocreadline.h	/^static inline void strip(char *buf)$/;"	f
subtreesize	bft.h	/^        int subtreesize;$/;"	m	struct:clusteringState
subtreesize	graphcluster.cpp	/^	int subtreesize;$/;"	m	struct:__anon50	file:
sud	untransformSign.c	/^    struct SignUntransformData *sud;$/;"	m	struct:SignData	typeref:struct:SignData::SignUntransformData	file:
symcount	bft.h	/^        int symcount;             \/* number of symmetric neighbors *\/$/;"	m	struct:__anon2
symcount	graphcluster.cpp	/^        int symcount;             \/* number of symmetric neighbors *\/$/;"	m	struct:__anon47	file:
symcount	simulation.h	/^	int symcount;             \/* number of symmetric neighbors *\/$/;"	m	struct:__anon31
t	transDuo.c	/^        } t;$/;"	m	union:TransDuo::__anon21	typeref:struct:TransDuo::__anon21::__anon22	file:
t	ut_TransDuo.c	/^static tptr_vec t = { 0, 0, 0 };$/;"	v	file:
t	ut_transformNull.c	/^static Transform *t;$/;"	v	file:
t1	ut_transformSign.c	/^static Transform *t1;$/;"	v	file:
t2	ut_transformSign.c	/^static Transform *t2;$/;"	v	file:
t3	ut_transformSign.c	/^static Transform *t3;$/;"	v	file:
tag	apisupport.h	/^	MessageID tag;		\/* set by API, when messageSend is called *\/$/;"	m	struct:MessageInfo
tag	apisupport.h	/^	MessageID tag;$/;"	m	struct:ApiCommand
tag	idsCommunications-sanitized.h	/^    int tag;			\/* client assigned grouping value.  *\/$/;"	m	struct:NodeLabel
tag	idsCommunications-sanitized.h	/^    int tag;                        \/* client assigned grouping value.  *\/$/;"	m	struct:FloatingLabel
tag	idsCommunications-sanitized.h	/^    int tag;$/;"	m	struct:NodeEdge
tag	idsCommunications.h	/^    int tag;			\/* client assigned grouping value.  *\/$/;"	m	struct:NodeLabel
tag	idsCommunications.h	/^    int tag;                        \/* client assigned grouping value.  *\/$/;"	m	struct:FloatingLabel
tag	idsCommunications.h	/^    int tag;$/;"	m	struct:NodeEdge
tag	routingdetector.c	/^	int tag;$/;"	m	struct:detector	file:
tag	tealabcontrol.c	/^	char *tag;$/;"	m	struct:__anon1	file:
tag	transform.h	/^    uint32_t tag;$/;"	m	struct:Transform
tag	untransform.h	/^    uint32_t tag;$/;"	m	struct:Untransform
tail	idsCommunications-sanitized.h	/^    ManetAddr head, tail;$/;"	m	struct:NodeEdge
tail	idsCommunications.h	/^    ManetAddr head, tail;$/;"	m	struct:NodeEdge
takeStep	des.cpp	/^void takeStep(manet *m)$/;"	f
tcpOpen	watchermovement.cpp	/^int tcpOpen(unsigned int addr, int port)$/;"	f
tcpport	packetapi.cpp	/^	int tcpport;		\/* TCP port demon is listening on for client traffic   *\/$/;"	m	struct:PacketApiNodeState	file:
tdstore	transDuo.c	/^    dptr_vec tdstore;$/;"	m	struct:TransDuoManager	file:
term	graphcluster.cpp	/^	packetGraphclusterTerm term;$/;"	m	struct:clusteringNeighbor	file:
terminateflag	bft.cpp	/^	int terminateflag;$/;"	m	struct:__anon60	file:
termvalid	graphcluster.cpp	/^	int termvalid;$/;"	m	struct:clusteringNeighbor	file:
testmissingpriv	packetProtection.cpp	/^static int testmissingpriv(PacketProtection const *pp)$/;"	f	file:
testmissingpub	packetProtection.cpp	/^static int testmissingpub(PacketProtection const *pp)$/;"	f	file:
testmod	packetProtection.cpp	/^static int testmod(PacketProtection const *pp)$/;"	f	file:
testnoprotection	packetProtection.cpp	/^static int testnoprotection(void)$/;"	f	file:
testround	packetProtection.cpp	/^static int testround(PacketProtection const *pp)$/;"	f	file:
testspoof	packetProtection.cpp	/^static int testspoof(PacketProtection const *pp)$/;"	f	file:
testtraffic	des.h	/^	struct testtrafficState *testtraffic;             \/* test traffic stuff *\/$/;"	m	struct:manetNode	typeref:struct:manetNode::testtrafficState
testtrafficAck	testtraffic.cpp	/^static void testtrafficAck(manetNode *us, packet *p)$/;"	f	file:
testtrafficData	testtraffic.cpp	/^static void testtrafficData(manetNode *us, packet *p)$/;"	f	file:
testtrafficInit	testtraffic.cpp	/^void testtrafficInit(manetNode *us)$/;"	f
testtrafficState	testtraffic.h	/^typedef struct testtrafficState$/;"	s
testtrafficState	testtraffic.h	/^} testtrafficState;$/;"	t	typeref:struct:testtrafficState
testtrafficTest	testtraffic.cpp	/^void testtrafficTest(manetNode *us, void *data)$/;"	f
text	idsCommunications-sanitized.h	/^    char *text;$/;"	m	struct:FloatingLabel
text	idsCommunications-sanitized.h	/^    char *text;$/;"	m	struct:NodeLabel
text	idsCommunications.h	/^    char *text;$/;"	m	struct:FloatingLabel
text	idsCommunications.h	/^    char *text;$/;"	m	struct:NodeLabel
textScale	idsCommunications-sanitized.h	/^    float textScale;$/;"	m	struct:__anon40
textZoomIn	watcher.cpp	/^static void textZoomIn(void)$/;"	f	file:
textZoomOut	watcher.cpp	/^static void textZoomOut(void)$/;"	f	file:
textZoomReset	watcher.cpp	/^static void textZoomReset(void)$/;"	f	file:
themanet	livenetwork.cpp	/^	manet *themanet;	\/* stub datastructure to make the simulator-API code happy *\/$/;"	m	struct:__anon63	file:
themanet	main.cpp	/^manet *themanet;$/;"	v
theta	graphics.cpp	/^static float theta(points a, points b)$/;"	f	file:
tickSet	des.cpp	/^eventnode *tickSet(manetNode *us, eventCallback *cb,void *rawptr)$/;"	f
ticklist	des.h	/^	eventnode *ticklist;      \/* list of tick events, to be called when the current instant is over *\/$/;"	m	struct:manet
time	goodwinmerge.c	/^	destime time[MAXBUFF];$/;"	m	struct:__anon8	file:
time	watcherGPS.h	/^	destime time;$/;"	m	struct:WatcherGPS
timeHello	interim2.cpp	/^	int timeHello;$/;"	m	struct:clusteringState	file:
timeHelloTimeout	interim2.cpp	/^	int timeHelloTimeout;$/;"	m	struct:clusteringState	file:
timePromotion	interim2.cpp	/^	int timePromotion;$/;"	m	struct:clusteringState	file:
timeSelect	interim2.cpp	/^	int timeSelect;$/;"	m	struct:clusteringState	file:
timeSinceLastSent	amroute.h	/^    long long int timeSinceOrig, timeSinceLastSent;$/;"	m	struct:__anon26
timeSinceOrig	amroute.h	/^    long long int timeSinceOrig, timeSinceLastSent;$/;"	m	struct:__anon26
timeUndesired	interim2.cpp	/^	int timeUndesired;$/;"	m	struct:clusteringState	file:
timerSet	des.cpp	/^eventnode *timerSet(manetNode *us, eventCallback *cb, int delay, void *rawptr)$/;"	f
timestamp	idsCommunications-sanitized.h	/^    destime timestamp;   \/* timestamp, in unix time, in milliseconds *\/$/;"	m	struct:ApiStatus
timestamp	idsCommunications.h	/^    destime timestamp;   \/* timestamp, in unix time, in milliseconds *\/$/;"	m	struct:ApiStatus
timevalFromDestime	idsCommunications.c	/^void timevalFromDestime(destime t, struct timeval *tv)$/;"	f
tmpclusterhead	graphcluster.cpp	/^	neighbor *tmpclusterhead;$/;"	m	struct:clusteringState	file:
totSymmetricNeighbors	interim2.cpp	/^	int totSymmetricNeighbors;$/;"	m	struct:__anon57	file:
totSymmetricNeighbors	interim2.cpp	/^	int totSymmetricNeighbors;$/;"	m	struct:clusteringNeighbor	file:
totals	packetstats.cpp	/^	PacketCounts totals;$/;"	m	class:PacketStats	file:
totpackets	watcher.h	/^	ApiPacketCount totpackets;$/;"	m	struct:clusteringState
tptr	ut_TransDuo.c	/^typedef Transform *tptr;$/;"	t	file:
transDuoAdd	transDuo.c	/^int transDuoAdd($/;"	f
transDuoBufferDup	transDuo.c	/^void *transDuoBufferDup(struct TransDuo *transDuo)$/;"	f
transDuoBufferGet	transDuo.c	/^void const *transDuoBufferGet(struct TransDuo *transDuo)$/;"	f
transDuoBufferLengthGet	transDuo.c	/^size_t transDuoBufferLengthGet(struct TransDuo *transDuo)$/;"	f
transDuoCopy	transDuo.c	/^int transDuoCopy($/;"	f
transDuoCreate	transDuo.c	/^struct TransDuo *transDuoCreate(struct TransDuoManager *m)$/;"	f
transDuoDestroy	transDuo.c	/^void transDuoDestroy(struct TransDuo *transDuo)$/;"	f
transDuoFini	transDuo.c	/^void transDuoFini(void)$/;"	f
transDuoFromBuffer	transDuo.c	/^struct TransDuo *transDuoFromBuffer($/;"	f
transDuoInit	transDuo.c	/^void transDuoInit(void)$/;"	f
transDuoManagerCreate	transDuo.c	/^struct TransDuoManager *transDuoManagerCreate(void)$/;"	f
transDuoManagerDestroy	transDuo.c	/^void transDuoManagerDestroy(struct TransDuoManager *h)$/;"	f
transDuoRawGet	transDuo.c	/^void const *transDuoRawGet(struct TransDuo *transDuo)$/;"	f
transDuoRawLengthGet	transDuo.c	/^size_t transDuoRawLengthGet(struct TransDuo *transDuo)$/;"	f
transDuoTagGet	transDuo.c	/^int transDuoTagGet(struct TransDuo *transDuo)$/;"	f
transDuoTransformDataHandleGet	transDuo.c	/^TransformDataHandle transDuoTransformDataHandleGet(struct TransDuo *transDuo)$/;"	f
transDuoTransformedGet	transDuo.c	/^void const *transDuoTransformedGet(struct TransDuo *transDuo)$/;"	f
transDuoTransformedLengthGet	transDuo.c	/^size_t transDuoTransformedLengthGet(struct TransDuo *transDuo)$/;"	f
transDuoUntransformDataHandleGet	transDuo.c	/^UntransformDataHandle transDuoUntransformDataHandleGet(struct TransDuo *transDuo)$/;"	f
transDuoUntransformRegister	transDuo.c	/^void transDuoUntransformRegister(struct TransDuoManager *m, Untransform *u)$/;"	f
transformData	transform.h	/^    void *transformData;$/;"	m	struct:Transform
transformDestroy	transform.h	/^    void (*transformDestroy)(struct Transform *transform);$/;"	m	struct:Transform
transformDestroy	transformNull.c	/^static void transformDestroy(struct Transform *transform)$/;"	f	file:
transformDestroy	transformSign.c	/^static void transformDestroy(struct Transform *transform)$/;"	f	file:
transformHandleDestroy	transDuo.c	/^static void transformHandleDestroy(struct TransDuo *td)$/;"	f	file:
transformNullCreate	transformNull.c	/^Transform *transformNullCreate(void)$/;"	f
transformNullTag	transformNull.c	/^const int transformNullTag = 1;$/;"	v
transformSignCreate	transformSign.c	/^Transform *transformSignCreate(char const *privateKeyFileName)$/;"	f
transformed	transform.h	/^    void const * (*transformed)(const TransformDataHandle handle);$/;"	m	struct:Transform
transformed	transformNull.c	/^static void const * transformed(const TransformDataHandle handle)$/;"	f	file:
transformed	transformSign.c	/^    uint8_t *transformed;$/;"	m	struct:SignData	file:
transformed	transformSign.c	/^static void const * transformed(const TransformDataHandle handle)$/;"	f	file:
transformed	untransform.h	/^    void const * (*transformed)(const UntransformDataHandle handle);$/;"	m	struct:Untransform
transformed	untransformNull.c	/^static void const * transformed(const UntransformDataHandle handle)$/;"	f	file:
transformed	untransformSign.c	/^    uint8_t *transformed;$/;"	m	struct:SignData	file:
transformed	untransformSign.c	/^static void const * transformed(const UntransformDataHandle handle)$/;"	f	file:
transformedLength	transform.h	/^    size_t (*transformedLength)(const TransformDataHandle handle);$/;"	m	struct:Transform
transformedLength	transformNull.c	/^static size_t transformedLength(const TransformDataHandle handle)$/;"	f	file:
transformedLength	transformSign.c	/^    size_t transformedLength;$/;"	m	struct:SignData	file:
transformedLength	transformSign.c	/^static size_t transformedLength(const TransformDataHandle handle)$/;"	f	file:
transformedLength	untransform.h	/^    size_t (*transformedLength)(const UntransformDataHandle handle);$/;"	m	struct:Untransform
transformedLength	untransformNull.c	/^static size_t transformedLength(const UntransformDataHandle handle)$/;"	f	file:
transformedLength	untransformSign.c	/^    size_t transformedLength;$/;"	m	struct:SignData	file:
transformedLength	untransformSign.c	/^static size_t transformedLength(const UntransformDataHandle handle)$/;"	f	file:
treeCreate	amroute.cpp	/^static amroutePacketType treeCreate = $/;"	v	file:
treeCreateCopies	amroute.cpp	/^static int treeCreateCopies = 0;$/;"	v	file:
treeCreateInterval	amroute.cpp	/^static int treeCreateInterval = 6000;$/;"	v	file:
treeCreateNak	amroute.cpp	/^static amroutePacketType treeCreateNak = $/;"	v	file:
treeExamineInterval	amroute.cpp	/^int treeExamineInterval = 1000;$/;"	v
treeExamineOnChange	amroute.cpp	/^int treeExamineOnChange = 0;$/;"	v
treeExaminePeriodic	amroute.cpp	/^static int treeExaminePeriodic = 1;$/;"	v	file:
treeIterate	neighborlist.cpp	/^STATIC void treeIterate(manetNode *us, int usIndex, int parentIndex, int *distances,$/;"	f
treeMark	amroute.h	/^    int treeMark;$/;"	m	struct:clusteringState
treeTime	neighborlist.cpp	/^static destime treeTime[2];		\/* amount of time in each state *\/$/;"	v	file:
treeTracker	neighborlist.cpp	/^void treeTracker(manet *m)$/;"	f
treeseq	bft.cpp	/^	int treeseq;$/;"	m	struct:__anon60	file:
treeseq	bft.cpp	/^        int treeseq;$/;"	m	struct:clusteringNeighbor	file:
treeseq	bft.h	/^	int treeseq;$/;"	m	struct:clusteringState
treeseq	graphcluster.cpp	/^	int treeseq;$/;"	m	struct:__anon48	file:
treeseq	graphcluster.cpp	/^	int treeseq;$/;"	m	struct:clusteringNeighbor	file:
treeseq	graphcluster.cpp	/^	int treeseq;$/;"	m	struct:clusteringState	file:
ts	ut_BufferPair.c	/^static struct Transform *ts = 0;$/;"	v	typeref:struct:Transform	file:
ttl	amroute.h	/^    int ttl;$/;"	m	struct:clusteringState
ttl	des.h	/^	int ttl;       \/* set by caller, and decremented by forwarding code.  dropped on 0 *\/$/;"	m	struct:packet
ttl	idsCommunications-sanitized.h	/^    int ttl;$/;"	m	struct:CommunicationsDestination
ttl	idsCommunications.h	/^    int ttl;$/;"	m	struct:CommunicationsDestination
ttl	interim.cpp	/^	int ttl[MAXLEVEL];$/;"	m	struct:clusteringState	file:
ttl	interim2.cpp	/^	int ttl;           \/* the neighbor's current TTL, read from hellos  *\/$/;"	m	struct:clusteringNeighbor	file:
ttls	interim2.cpp	/^	int ttls[MAXLEVEL];$/;"	m	struct:clusteringState	file:
two17	rng.cc	/^	const double two17 = 131072.0; $/;"	v
two53	rng.cc	/^	const double two53 = 9007199254740992.0; $/;"	v
typ	testapi.c	/^int typ;$/;"	v
type	amroute.h	/^    amroutePacketType *type;$/;"	m	struct:packet_amroute_s
type	apisupport.h	/^	ApiCommandType type;$/;"	m	struct:ApiCommand
type	apisupport.h	/^	MessageType type;$/;"	m	struct:MessageHandlerRequest
type	apisupport.h	/^	MessageType type;$/;"	m	struct:MessageInfo
type	apisupport.h	/^        MessageType type;$/;"	m	struct:MessageTypeNode
type	des.h	/^	int type;      \/* This is in reality an 8 byte value *\/$/;"	m	struct:packet
type	des.h	/^	int type;$/;"	m	struct:eventnode
type	idsCommunications-sanitized.h	/^    CommunicationsDestinationType type;$/;"	m	struct:CommunicationsDestination
type	idsCommunications-sanitized.h	/^    CommunicationsNeighborType type;	\/* neighbor's type, child or parent *\/$/;"	m	struct:CommunicationsNeighbor
type	idsCommunications-sanitized.h	/^    int type;$/;"	m	struct:ApiPacketCount
type	idsCommunications.h	/^    CommunicationsDestinationType type;$/;"	m	struct:CommunicationsDestination
type	idsCommunications.h	/^    CommunicationsNeighborType type;	\/* neighbor's type, child or parent *\/$/;"	m	struct:CommunicationsNeighbor
type	idsCommunications.h	/^    int type;$/;"	m	struct:ApiPacketCount
type	idsCommunicationsMessages.h	/^	MessageType type;$/;"	m	struct:CommunicationsMessageType
type	mobility.h	/^	MobilityConstraintType type;$/;"	m	struct:MobilityConstraint
type	packetapi.h	/^	MessageType type;               \/* The client's packet type  *\/$/;"	m	struct:__anon41
type	routing.h	/^	int type;$/;"	m	struct:__anon24
typeList	packetapi.cpp	/^	MessageTypeNode *typeList;	\/* list of message types for which this client has registered *\/$/;"	m	struct:ApiSession	file:
typehandler	apisupport.h	/^	struct MessageTypeNode *typehandler;			\/* list of message types we are subscribed to, and callbacks *\/$/;"	m	struct:CommunicationsState	typeref:struct:CommunicationsState::MessageTypeNode
typetostr	glancer.c	/^static char *typetostr(CommunicationsNeighborType type)$/;"	f	file:
u	transDuo.c	/^        } u;$/;"	m	union:TransDuo::__anon21	typeref:struct:TransDuo::__anon21::__anon23	file:
u	ut_transformNull.c	/^static Untransform *u;$/;"	v	file:
u	ut_transformSign.c	/^static Untransform *u;$/;"	v	file:
ub1	hashtable.c	/^typedef  unsigned       char ub1;   \/* unsigned 1-byte quantities *\/$/;"	t	file:
ub4	hashtable.c	/^typedef  unsigned long  int  ub4;   \/* unsigned 4-byte quantities *\/$/;"	t	file:
udpOpen	watchermovement.cpp	/^int udpOpen(unsigned int addr, int port)$/;"	f
udp_messaging	tsm_v4_TOJ.pl	/^sub udp_messaging {$/;"	s
udpfd	livenetwork.cpp	/^	int udpfd;		\/* FD for incoming unicast packets *\/$/;"	m	struct:__anon63	file:
udpport	livenetwork.cpp	/^	int udpport;		\/* UDP port demon is listening on for MANET traffic  *\/$/;"	m	struct:__anon63	file:
undef	des.h	/^		void *undef;$/;"	m	union:eventnode::__anon46
unicastRecByte	idsCommunications-sanitized.h	/^    long long int unicastRecByte,origUnicastXmitByte, repUnicastXmitByte;$/;"	m	struct:ApiPacketCount
unicastRecByte	idsCommunications.h	/^    long long int unicastRecByte,origUnicastXmitByte, repUnicastXmitByte;$/;"	m	struct:ApiPacketCount
unicastRecCount	idsCommunications-sanitized.h	/^    long long int unicastRecCount,origUnicastXmitCount,repUnicastXmitCount;$/;"	m	struct:ApiPacketCount
unicastRecCount	idsCommunications.h	/^    long long int unicastRecCount,origUnicastXmitCount,repUnicastXmitCount;$/;"	m	struct:ApiPacketCount
uniform	amroute.cpp	22;"	d	file:
uniform	rng.h	/^	inline double uniform() {return uniform_double();}$/;"	f	class:RNG
uniform	rng.h	/^	inline double uniform(double a, double b)$/;"	f	class:RNG
uniform	rng.h	/^	inline double uniform(double r) $/;"	f	class:RNG
uniform	rng.h	/^	inline int uniform(int k) $/;"	f	class:RNG
uniform_double	rng.h	/^	inline double uniform_double() { \/\/ range [0.0, 1.0)$/;"	f	class:RNG
uniform_positive_int	rng.h	/^	inline int uniform_positive_int() {  \/\/ range [0, MAXINT]$/;"	f	class:RNG
unionNeighbor	graphcluster.cpp	/^static int unionNeighbor(ManetAddr *list, ManetAddr neigh,int count)$/;"	f	file:
unmarshalGidPacket	gmcluster.cpp	/^int unmarshalGidPacket(const char *data, gidPacket &gid)$/;"	f
unprotect	packetProtection.cpp	/^int unprotect(struct PacketProtection const *pp, ManetAddr from, packet *p)$/;"	f
unsentlist	routing.h	/^	packet *unsentlist;$/;"	m	struct:routingState
untransformData	untransform.h	/^    void *untransformData;$/;"	m	struct:Untransform
untransformDestroy	untransform.h	/^    void (*untransformDestroy)(struct Untransform *untransform);$/;"	m	struct:Untransform
untransformDestroy	untransformNull.c	/^static void untransformDestroy(struct Untransform *untransform)$/;"	f	file:
untransformDestroy	untransformSign.c	/^static void untransformDestroy(struct Untransform *untransform)$/;"	f	file:
untransformNullCreate	untransformNull.c	/^Untransform *untransformNullCreate(void)$/;"	f
untransformNullTag	untransformNull.c	/^const int untransformNullTag = 1;$/;"	v
untransformResult	untransformSign.c	/^    UntransformSignResult untransformResult;$/;"	m	struct:SignData	file:
untransformSignCreate	untransformSign.c	/^Untransform *untransformSignCreate(char const *publicKeyFileName)$/;"	f
untransformSignResult	untransformSign.c	/^untransformSignResult(UntransformDataHandle handle)$/;"	f
untransformSignSigner	untransformSign.c	/^ManetAddr untransformSignSigner(UntransformDataHandle handle)$/;"	f
uort	transDuo.c	/^    } uort;$/;"	m	struct:TransDuo	typeref:union:TransDuo::__anon21	file:
update	idsCommunications-sanitized.h	/^    IDSPositionUpdateProc update;$/;"	m	struct:IDSPosition
update	idsCommunications.h	/^    IDSPositionUpdateProc update;$/;"	m	struct:IDSPosition
update	watcher.cpp	/^static void update(manet *m)$/;"	f	file:
updateData	idsCommunications-sanitized.h	/^    void *updateData;$/;"	m	struct:IDSPosition
updateData	idsCommunications.h	/^    void *updateData;$/;"	m	struct:IDSPosition
updateEdgeAdd	hierarchy2text.cpp	/^static bool updateEdgeAdd($/;"	f	file:
updateEdgeRemove	hierarchy2text.cpp	/^static bool  updateEdgeRemove($/;"	f	file:
updateFlag	hierarchy2text.cpp	/^void Node::updateFlag(IDSPositionStatus stat, bool &b)$/;"	f	class:Node
updateLevel	graphcluster.cpp	/^static void updateLevel(manetNode *us)$/;"	f	file:
updateRoutes	routingdetector.c	/^static void updateRoutes(detector *st, Route *list)$/;"	f	file:
updateflag	pgraphwatcher.c	/^	int updateflag;$/;"	m	struct:detector	file:
uptr	transDuo.c	/^typedef Untransform *uptr;$/;"	t	file:
us	data.cpp	/^	manetNode *us;$/;"	m	struct:InFlight	file:
usage	demosigningaggregator.c	/^static void usage(char const *prog, char const *msg)$/;"	f	file:
usage	demosigningdetector.c	/^static void usage(char const *prog, char const *msg)$/;"	f	file:
usage	demoverifiedalertreader.c	/^static void usage(char const *prog, char const *msg)$/;"	f	file:
usage	goodwin.cpp	/^void usage(void)$/;"	f
usage	showPath	/^sub usage$/;"	s
usage	tsm_v4_TOJ.pl	/^sub usage {$/;"	s
useList	interim2.cpp	/^	neighbor **useList;$/;"	m	struct:clusteringState	file:
userGraph	watcher.cpp	/^static NodeEdge *userGraph = NULL;$/;"	v	file:
ustore	transDuo.c	/^    uptr_vec ustore;$/;"	m	struct:TransDuoManager	file:
val	config.c	/^	char *val;$/;"	m	struct:ConfigNode	file:
value	idsCommunications-sanitized.h	/^    float value;$/;"	m	struct:CommunicationsGraphEdge
value	idsCommunications.h	/^    float value;$/;"	m	struct:CommunicationsGraphEdge
velocity	gmcluster.cpp	/^	nodeVelocityData *velocity; $/;"	m	struct:groupClusterState	file:
velocity	gmcluster.cpp	/^	nodeVelocityData *velocity; $/;"	m	struct:groupClusteringNeighbor	file:
verbose	hierarchy2text.cpp	/^    bool verbose;$/;"	m	class:PrintChildAndParent	file:
verbose	hierarchy2text.cpp	/^    bool verbose;$/;"	m	class:PrintLine	file:
verbose	hierarchy2text.cpp	/^    bool verbose;$/;"	m	class:PrintMeAndMyParents	file:
verbose	rng.cc	/^RNGTest::verbose()$/;"	f	class:RNGTest
verbose_mil	rng.cc	/^RNGTest::verbose_mil()$/;"	f	class:RNGTest
viewpointReset	watcher.cpp	/^static void viewpointReset(void)$/;"	f	file:
visibleDrawBoxAtZ	watcher.cpp	/^static int visibleDrawBoxAtZ($/;"	f	file:
waitJoinAck	amroute.cpp	/^STATIC void waitJoinAck(manetNode *us, void *data)$/;"	f
watcherColorMarshal	apisupport.c	/^unsigned char *watcherColorMarshal(unsigned char *hp, ManetAddr node, const unsigned char *color)$/;"	f
watcherColorUnMarshal	apisupport.c	/^unsigned char *watcherColorUnMarshal(unsigned char *hp, ManetAddr *node, unsigned char *color)$/;"	f
watcherDrawNodes	watcher.cpp	/^static void watcherDrawNodes(NodeDisplayType dispType, manet *m)$/;"	f	file:
watcherGPSMarshal	watcherGPS.cpp	/^int watcherGPSMarshal(void *payload, int payloadlen, const WatcherGPS *gps)$/;"	f
watcherGPSUnmarshal	watcherGPS.cpp	/^WatcherGPS *watcherGPSUnmarshal(const void *payload, int payloadlen)$/;"	f
watcherGraphDraw	watcherGraph.cpp	/^void watcherGraphDraw(NodeEdge **g, NodeDisplayType dispType, NodeDisplayStatus *dispStat, destime curtime)$/;"	f
watcherGraphEdgeInsert	watcherGraph.cpp	/^void watcherGraphEdgeInsert(NodeEdge **g, NodeEdge *nw, destime curtime)$/;"	f
watcherGraphEdgeNuke	watcherGraph.cpp	/^void watcherGraphEdgeNuke(NodeEdge **g)      \/* remove all edges  *\/$/;"	f
watcherGraphEdgeRemove	watcherGraph.cpp	/^void watcherGraphEdgeRemove(NodeEdge **g, int bitmap, NodeEdge *nw)$/;"	f
watcherGraphEdgeRemoveFamily	watcherGraph.cpp	/^void watcherGraphEdgeRemoveFamily(NodeEdge **g,int family)$/;"	f
watcherLabelDraw	watcherGraph.cpp	/^static void watcherLabelDraw(GLdouble x, GLdouble y, GLdouble z, GLdouble scale, NodeLabel *l, int monochromeMode)$/;"	f	file:
watcherMobilityGetNodeNum	watchermovement.cpp	/^static int watcherMobilityGetNodeNum(manet *m,ManetAddr addr)$/;"	f	file:
watcherMobilityInitFile	watchermovement.cpp	/^watcherMobilityInitFile(manet *m, char *filname,state *st)$/;"	f	file:
watcherMovementEnable	goodwin.cpp	/^	int watcherMovementEnable;$/;"	m	struct:detector	file:
watcherMovementFD	goodwin.cpp	/^	int watcherMovementFD;$/;"	m	struct:detector	file:
watcherMovementFD	watchermovement.cpp	/^int watcherMovementFD(void *motionData)$/;"	f
watcherMovementInit	watchermovement.cpp	/^void *watcherMovementInit(manet *m)$/;"	f
watcherMovementRead	watchermovement.cpp	/^int watcherMovementRead(void *motionData,manet *m)$/;"	f
watcherMovementState	goodwin.cpp	/^	void *watcherMovementState;$/;"	m	struct:detector	file:
watcherMovementUpdate	watchermovement.cpp	/^int watcherMovementUpdate(void *motionData,manet *m)$/;"	f
watcherNodeColor	packetapi.cpp	/^void watcherNodeColor(manetNode *us, ManetAddr node, unsigned char *color)$/;"	f
weight	idsCommunications-sanitized.h	/^    int weight;$/;"	m	struct:CommunicationsPositionWeight
weight	idsCommunications.h	/^    int weight;$/;"	m	struct:CommunicationsPositionWeight
weightList	packetapi.cpp	/^	CommunicationsPositionWeight *weightList;$/;"	m	struct:PacketApiNodeState	file:
weights	interim2.cpp	/^	int weights[COORDINATOR_MAXVAL];$/;"	m	struct:clusteringNeighbor	file:
weirdWalkReReceive	livenetwork.cpp	/^void weirdWalkReReceive(State *st)$/;"	f
width	idsCommunications-sanitized.h	/^    int width;$/;"	m	struct:NodeEdge
width	idsCommunications.h	/^    int width;$/;"	m	struct:NodeEdge
width	mobility.h	/^	double x,y,width,height;$/;"	m	struct:NoflyRect
window_size	infrasniff.cpp	/^	unsigned long window_size;$/;"	m	struct:__anon61	file:
window_start	infrasniff.cpp	/^	time_t window_start;$/;"	m	struct:__anon61	file:
wlog	apisupport.h	/^	CommunicationsErrorFunction wlog; \/* warning log *\/$/;"	m	struct:CommunicationsState
worldX_ret	graphics.h	/^    GLdouble worldX_ret;$/;"	m	struct:XYWorldZToWorldXWorldY
worldY_ret	graphics.h	/^    GLdouble worldY_ret;$/;"	m	struct:XYWorldZToWorldXWorldY
worldZ	graphics.h	/^    GLdouble worldZ;$/;"	m	struct:XYWorldZToWorldXWorldY
write_state	rng.cc	/^void RNG::write_state () const $/;"	f	class:RNG
write_state_full	rng.cc	/^void RNG::write_state_full () const $/;"	f	class:RNG
x	des.h	/^	double x,y,z;   \/* location in 3 space.  not all functions are actually fully 3D though  *\/$/;"	m	struct:manetNode
x	graphics.h	/^	double x;$/;"	m	struct:__anon62
x	graphics.h	/^    int x;$/;"	m	struct:XYWorldZToWorldXWorldY
x	idsCommunications-sanitized.h	/^    int x,y,z;$/;"	m	struct:FloatingLabel
x	idsCommunications.h	/^    int x,y,z;$/;"	m	struct:FloatingLabel
x	mobility.h	/^	double x,y,width,height;$/;"	m	struct:NoflyRect
x	transDuo.c	/^            Transform *x;$/;"	m	struct:TransDuo::__anon21::__anon22	file:
x	transDuo.c	/^            Untransform *x;$/;"	m	struct:TransDuo::__anon21::__anon23	file:
x	watcher.cpp	/^    double x;$/;"	m	struct:QuadranglePoint	file:
xOffset	mobility.h	/^	double xOffset, yOffset; 	\/* Or this. *\/$/;"	m	struct:mobilityState
xmitnum	data.cpp	/^	int xmitnum;$/;"	m	struct:InFlight	file:
xmitnum	data.h	/^	int xmitnum;		\/* the number of this transmission attempt.  first packet is 0  *\/$/;"	m	struct:PacketData
xmittime	des.h	/^	destime xmittime;		\/* timestamp of event initiation  *\/$/;"	m	struct:eventnode
xyAtZForModelProjViewXY	graphics.cpp	/^int xyAtZForModelProjViewXY($/;"	f
xyAtZForScreenXY	graphics.cpp	/^int xyAtZForScreenXY(int x, int y, GLdouble z, GLdouble *x_ret, GLdouble *y_ret)$/;"	f
xyAtZForScreenXY	graphics.h	73;"	d
y	des.h	/^	double x,y,z;   \/* location in 3 space.  not all functions are actually fully 3D though  *\/$/;"	m	struct:manetNode
y	graphics.h	/^	double y;$/;"	m	struct:__anon62
y	graphics.h	/^    int y;$/;"	m	struct:XYWorldZToWorldXWorldY
y	idsCommunications-sanitized.h	/^    int x,y,z;$/;"	m	struct:FloatingLabel
y	idsCommunications.h	/^    int x,y,z;$/;"	m	struct:FloatingLabel
y	mobility.h	/^	double x,y,width,height;$/;"	m	struct:NoflyRect
y	watcher.cpp	/^    double y;$/;"	m	struct:QuadranglePoint	file:
yOffset	mobility.h	/^	double xOffset, yOffset; 	\/* Or this. *\/$/;"	m	struct:mobilityState
z	des.h	/^	double x,y,z;   \/* location in 3 space.  not all functions are actually fully 3D though  *\/$/;"	m	struct:manetNode
z	idsCommunications-sanitized.h	/^    int x,y,z;$/;"	m	struct:FloatingLabel
z	idsCommunications.h	/^    int x,y,z;$/;"	m	struct:FloatingLabel
zeroflag	testapi.c	/^int zeroflag;		\/* if set, then only xmit 0 length messages.  *\/$/;"	v
zoomIn	watcher.cpp	/^static void zoomIn(void)$/;"	f	file:
zoomOut	watcher.cpp	/^static void zoomOut(void)$/;"	f	file:
